// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: chain.capnp

#include "chain.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<657> b_ddfb1d54c24414b3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    179,  20,  68, 194,  84,  29, 251, 221,
     18,   0,   0,   0,   3,   0,   0,   0,
    101,  44, 189, 100,  72,  26, 242, 148,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
     29,   0,   0,   0,  31,   0,   0,   0,
     69,   0,   0,   0, 135,  13,   0,   0,
     21,  10,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
     94,  64, 177, 183, 121,  96, 244, 230,
      4,   0,   0,   0,   2,   0,   1,   0,
     24,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 146,   0,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101, 115,  58,  58,  67, 104,  97, 105,
    110,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    216,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    177,  79,  89,   9, 229, 175, 229, 251,
    169, 160,  36,   9, 198, 117, 106, 249,
    177,   6,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    165,   6,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    108, 143, 230, 245,  96, 216, 157, 131,
    110,  82, 147, 135,   8, 246, 245, 184,
    153,   6,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    145,   6,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    137, 134,  80,  55, 238, 144, 116, 153,
    205,  64, 168,  39,  97,  15, 216, 185,
    133,   6,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   6,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     67, 218, 106, 172,  63, 151,  34, 148,
     41,   3,  96, 167,  15, 135, 143, 156,
    113,   6,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   6,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     70,  48, 205, 102, 216,  37,  21, 189,
    129, 153,  27,  54, 234, 208, 250, 160,
     93,   6,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     85,   6,   0,   0,   7,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
     89, 227, 202, 165,  52,  30, 154, 175,
    155,   0, 145,  63,  59, 186, 193, 225,
     73,   6,   0,   0, 178,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   6,   0,   0,   7,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
    144, 203, 217, 244, 192, 153,  19, 253,
    187, 183, 224,  86,  35, 126, 208, 136,
     57,   6,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   6,   0,   0,   7,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
     43, 136, 189, 109, 250,  71, 127, 146,
     38, 138, 114,  32, 208, 102,  72, 168,
     37,   6,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   6,   0,   0,   7,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
     56,   3,   9,  73,  39, 119, 134, 220,
     18, 242, 212, 236,   9,   2, 201, 140,
     21,   6,   0,   0, 178,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   6,   0,   0,   7,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
    232,  76,  19, 183, 116, 240,  73, 252,
    169,  72, 134, 172, 143, 201,  52, 230,
      5,   6,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    253,   5,   0,   0,   7,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
    178,  93,  70,  44, 183, 215, 105, 191,
     30, 211, 112, 248, 123, 114,  92, 195,
    241,   5,   0,   0,   2,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    241,   5,   0,   0,   7,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
    220, 255, 150,  31,   4, 230, 222, 212,
    182, 194,  28, 198, 206, 195, 232, 183,
    229,   5,   0,   0, 170,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    225,   5,   0,   0,   7,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
     68, 149,  66, 205, 186, 225, 126, 233,
    184,  93,  20, 161, 111,  91,  95, 177,
    213,   5,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    209,   5,   0,   0,   7,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
    207, 143,  36, 223, 141,  51, 209, 177,
      0,  53, 219, 149, 139, 129,  63, 181,
    197,   5,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    193,   5,   0,   0,   7,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
    145, 177,  15, 253, 192,  30,  77, 186,
     44, 151, 221, 147, 179, 173,  39, 172,
    181,   5,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    173,   5,   0,   0,   7,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
     98, 241, 231, 192, 181, 149,  54, 209,
    218,  85, 187,  81, 228, 205,   7, 173,
    161,   5,   0,   0, 210,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    161,   5,   0,   0,   7,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    190, 163,  82, 251,  90, 121,  33, 176,
    114,  22, 215, 159,  45, 235, 120, 168,
    149,   5,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   5,   0,   0,   7,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     46,   4, 234, 109, 188, 127,  21, 153,
     55, 169, 254, 154, 130,  60, 207, 135,
    129,   5,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   5,   0,   0,   7,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
     50,  20, 144,  93, 212,  12, 116, 138,
     55,  97,  75, 221,  12,  26, 228, 254,
    109,   5,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   5,   0,   0,   7,   0,   0,   0,
     19,   0,   0,   0,   0,   0,   0,   0,
     89, 160, 159,   2,  75, 213, 146, 137,
     36, 179,  69, 161,   3, 230, 145, 205,
     89,   5,   0,   0, 194,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     85,   5,   0,   0,   7,   0,   0,   0,
     20,   0,   0,   0,   0,   0,   0,   0,
    141,  36,  35, 158,  43,  71,  78, 253,
     62, 164, 224,  60,  81, 253, 177, 173,
     73,   5,   0,   0, 170,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   5,   0,   0,   7,   0,   0,   0,
     21,   0,   0,   0,   0,   0,   0,   0,
    160, 247, 129,   8, 193, 205, 101, 207,
     36, 194, 155,  91,  78,  63,  46, 250,
     57,   5,   0,   0, 186,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   5,   0,   0,   7,   0,   0,   0,
     22,   0,   0,   0,   0,   0,   0,   0,
    132, 107, 210,  25, 173,  82, 174, 175,
     67, 204, 123,   7,  18, 113,  33, 243,
     41,   5,   0,   0, 226,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   5,   0,   0,   7,   0,   0,   0,
     23,   0,   0,   0,   0,   0,   0,   0,
     41,   2,  20, 148,  46, 122,  88, 129,
    227, 235,  66, 237, 134,  46, 234, 207,
     29,   5,   0,   0, 202,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   5,   0,   0,   7,   0,   0,   0,
     24,   0,   0,   0,   0,   0,   0,   0,
     31,  11, 252, 194,  21, 176, 136, 216,
    202, 243, 112, 201,  67, 110, 210, 187,
     17,   5,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   5,   0,   0,   7,   0,   0,   0,
     25,   0,   0,   0,   0,   0,   0,   0,
    232,  67, 235,  97, 167,   1,  62, 144,
      0, 132, 111, 124,  25,  18, 178, 148,
      1,   5,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    253,   4,   0,   0,   7,   0,   0,   0,
     26,   0,   0,   0,   0,   0,   0,   0,
     76,   2, 116,  45, 222,  80, 168, 153,
    237,  63,  78,   4, 108,  10, 233, 169,
    241,   4,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    237,   4,   0,   0,   7,   0,   0,   0,
     27,   0,   0,   0,   0,   0,   0,   0,
    251, 160,  66, 246, 119, 151, 176, 236,
     53, 166,  65, 150,  23, 141,  89, 232,
    225,   4,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    221,   4,   0,   0,   7,   0,   0,   0,
     28,   0,   0,   0,   0,   0,   0,   0,
     51, 232,  21, 248,   5,  43, 125, 213,
     13,   8,  28, 119,  76, 154,  22, 164,
    209,   4,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    201,   4,   0,   0,   7,   0,   0,   0,
     29,   0,   0,   0,   0,   0,   0,   0,
     74,  10,  25, 138,  12,  40, 108, 141,
     85, 226, 123, 244,  55, 157, 188, 202,
    189,   4,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    181,   4,   0,   0,   7,   0,   0,   0,
     30,   0,   0,   0,   0,   0,   0,   0,
    160, 118, 205,  25, 207,   2,  68, 202,
    143,  20, 188,  44, 133, 105, 196, 198,
    169,   4,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    165,   4,   0,   0,   7,   0,   0,   0,
     31,   0,   0,   0,   0,   0,   0,   0,
     83, 248, 224, 198, 145, 106, 233, 226,
    196, 104, 164, 226,  27, 133,  20, 209,
    153,   4,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    145,   4,   0,   0,   7,   0,   0,   0,
     32,   0,   0,   0,   0,   0,   0,   0,
     15, 121, 185,  78,  70,  13,  45, 160,
     86, 190, 163, 241, 217, 121, 199, 188,
    133,   4,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   4,   0,   0,   7,   0,   0,   0,
     33,   0,   0,   0,   0,   0,   0,   0,
    118, 162, 109, 233, 228,  99,   5, 143,
     34, 236,  27, 216, 206,  37,  48, 204,
    113,   4,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   4,   0,   0,   7,   0,   0,   0,
     34,   0,   0,   0,   0,   0,   0,   0,
    227,  21, 187, 148,  84,  69, 123, 184,
    200, 103,  52, 124,  68,  44, 134, 227,
     93,   4,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     89,   4,   0,   0,   7,   0,   0,   0,
     35,   0,   0,   0,   0,   0,   0,   0,
    173, 180, 168,  32,  67, 120,  85, 154,
    210, 157, 234, 166, 174, 100, 102, 239,
     77,   4,   0,   0, 186,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   4,   0,   0,   7,   0,   0,   0,
     36,   0,   0,   0,   0,   0,   0,   0,
      2, 103, 118, 250, 114, 212,  57, 134,
    189,  29,  50, 136, 107, 230,  49, 134,
     61,   4,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     57,   4,   0,   0,   7,   0,   0,   0,
     37,   0,   0,   0,   0,   0,   0,   0,
    147, 237,   5, 104, 158, 185, 226, 155,
     98, 104, 143, 206, 218,   0,  17, 164,
     45,   4,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   4,   0,   0,   7,   0,   0,   0,
     38,   0,   0,   0,   0,   0,   0,   0,
     23, 219,   0, 173,  31, 232,  32, 251,
     86, 171,  70,  17, 222,   6, 252, 162,
     25,   4,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   4,   0,   0,   7,   0,   0,   0,
     39,   0,   0,   0,   0,   0,   0,   0,
    220, 112,  32,  68, 221,  92,  37, 162,
    250,  15, 252, 136, 252,  33,  97, 128,
      5,   4,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    253,   3,   0,   0,   7,   0,   0,   0,
     40,   0,   0,   0,   0,   0,   0,   0,
    204,  27, 130,  11,  12, 110, 253, 185,
     40,  27, 161, 199, 219, 203,  78, 209,
    241,   3,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    233,   3,   0,   0,   7,   0,   0,   0,
     41,   0,   0,   0,   0,   0,   0,   0,
    150, 213, 202, 221, 182, 130,  30, 135,
     14,  65,  21,  88, 105,  17, 234, 168,
    221,   3,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    217,   3,   0,   0,   7,   0,   0,   0,
     42,   0,   0,   0,   0,   0,   0,   0,
     78,  19, 145, 160, 160,  12,  51, 233,
    158, 110, 142,  16, 252, 138, 227, 225,
    205,   3,   0,   0,  10,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    209,   3,   0,   0,   7,   0,   0,   0,
     43,   0,   0,   0,   0,   0,   0,   0,
    206, 168, 122,  60, 202,  64,  93, 159,
     58,  90,  85, 214, 115,  65, 155, 202,
    197,   3,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    189,   3,   0,   0,   7,   0,   0,   0,
     44,   0,   0,   0,   0,   0,   0,   0,
    199,  29, 234, 112, 135, 179, 124, 138,
    251,  69, 218, 129, 167, 116,  45, 203,
    177,   3,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    173,   3,   0,   0,   7,   0,   0,   0,
     45,   0,   0,   0,   0,   0,   0,   0,
    164, 135,  22,   1,  43, 154, 199, 214,
    159, 250, 252, 213, 224,  13, 223, 244,
    161,   3,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   3,   0,   0,   7,   0,   0,   0,
     46,   0,   0,   0,   0,   0,   0,   0,
    237, 136, 182, 111, 187,  71, 171, 156,
    180, 129, 101,  78,  70,  24, 107, 244,
    141,   3,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   3,   0,   0,   7,   0,   0,   0,
     47,   0,   0,   0,   0,   0,   0,   0,
     86, 190, 120,  61,  35, 222, 197, 237,
    188,  58, 103, 145,  98, 128,  51, 228,
    121,   3,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   3,   0,   0,   7,   0,   0,   0,
     48,   0,   0,   0,   0,   0,   0,   0,
     10,  63, 110,  33, 150, 148, 115, 176,
     26,   7, 252, 101, 140,  10,  41, 195,
    101,   3,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     93,   3,   0,   0,   7,   0,   0,   0,
     49,   0,   0,   0,   0,   0,   0,   0,
     72,   9, 144, 102,  26,   5,  30, 153,
    174, 209,  80, 103,  34,  40,  66, 184,
     81,   3,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   3,   0,   0,   7,   0,   0,   0,
     50,   0,   0,   0,   0,   0,   0,   0,
     54, 215,  19, 197,  30, 167, 191, 171,
     88, 137, 206,  45, 252,   4,  49, 244,
     61,   3,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     57,   3,   0,   0,   7,   0,   0,   0,
     51,   0,   0,   0,   0,   0,   0,   0,
    142,  79,  73, 210, 185, 200, 150, 154,
     72, 151,  32,  76, 237, 246,   0, 221,
     45,   3,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   3,   0,   0,   7,   0,   0,   0,
     52,   0,   0,   0,   0,   0,   0,   0,
    233, 198, 191,  39,  48,  76, 250, 182,
     71, 183, 105, 174,  45, 213, 251, 193,
     29,   3,   0,   0, 218,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   3,   0,   0,   7,   0,   0,   0,
     53,   0,   0,   0,   0,   0,   0,   0,
    178,  11,  24,  66,  35, 243, 182, 171,
    142, 223, 193, 174, 150, 119, 160, 225,
     17,   3,   0,   0, 170,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   3,   0,   0,   7,   0,   0,   0,
    100, 101, 115, 116, 114, 111, 121,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  72, 101, 105, 103, 104,
    116,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  66, 108, 111,  99, 107,
     72,  97, 115, 104,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    104,  97, 118, 101,  66, 108, 111,  99,
    107,  79, 110,  68, 105, 115, 107,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  84, 105, 112,  76, 111,
     99,  97, 116, 111, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  65,  99, 116, 105, 118,
    101,  67, 104,  97, 105, 110,  76, 111,
     99,  97, 116, 111, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    102, 105, 110, 100,  76, 111,  99,  97,
    116, 111, 114,  70, 111, 114, 107,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    104,  97, 115,  66, 108, 111,  99, 107,
     70, 105, 108, 116, 101, 114,  73, 110,
    100, 101, 120,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     98, 108, 111,  99, 107,  70, 105, 108,
    116, 101, 114,  77,  97, 116,  99, 104,
    101, 115,  65, 110, 121,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    102, 105, 110, 100,  66, 108, 111,  99,
    107,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    102, 105, 110, 100,  70, 105, 114, 115,
    116,  66, 108, 111,  99, 107,  87, 105,
    116, 104,  84, 105, 109, 101,  65, 110,
    100,  72, 101, 105, 103, 104, 116,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    102, 105, 110, 100,  65, 110,  99, 101,
    115, 116, 111, 114,  66, 121,  72, 101,
    105, 103, 104, 116,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    102, 105, 110, 100,  65, 110,  99, 101,
    115, 116, 111, 114,  66, 121,  72,  97,
    115, 104,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    102, 105, 110, 100,  67, 111, 109, 109,
    111, 110,  65, 110,  99, 101, 115, 116,
    111, 114,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    102, 105, 110, 100,  67, 111, 105, 110,
    115,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 117, 101, 115, 115,  86, 101, 114,
    105, 102, 105,  99,  97, 116, 105, 111,
    110,  80, 114, 111, 103, 114, 101, 115,
    115,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    104,  97, 115,  66, 108, 111,  99, 107,
    115,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    105, 115,  82,  66,  70,  79, 112, 116,
     73, 110,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    105, 115,  73, 110,  77, 101, 109, 112,
    111, 111, 108,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    104,  97, 115,  68, 101, 115,  99, 101,
    110, 100,  97, 110, 116, 115,  73, 110,
     77, 101, 109, 112, 111, 111, 108,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     98, 114, 111,  97, 100,  99,  97, 115,
    116,  84, 114,  97, 110, 115,  97,  99,
    116, 105, 111, 110,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  84, 114,  97, 110, 115,
     97,  99, 116, 105, 111, 110,  65, 110,
     99, 101, 115, 116, 114, 121,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99,  97, 108,  99, 117, 108,  97, 116,
    101,  73, 110, 100, 105, 118, 105, 100,
    117,  97, 108,  66, 117, 109, 112,  70,
    101, 101, 115,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99,  97, 108,  99, 117, 108,  97, 116,
    101,  67, 111, 109,  98, 105, 110, 101,
    100,  66, 117, 109, 112,  70, 101, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  80,  97,  99, 107,  97,
    103, 101,  76, 105, 109, 105, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 104, 101,  99, 107,  67, 104,  97,
    105, 110,  76, 105, 109, 105, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    101, 115, 116, 105, 109,  97, 116, 101,
     83, 109,  97, 114, 116,  70, 101, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    101, 115, 116, 105, 109,  97, 116, 101,
     77,  97, 120,  66, 108, 111,  99, 107,
    115,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    109, 101, 109, 112, 111, 111, 108,  77,
    105, 110,  70, 101, 101,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 108,  97, 121,  77, 105, 110,
     70, 101, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 108,  97, 121,  73, 110,  99,
    114, 101, 109, 101, 110, 116,  97, 108,
     70, 101, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 108,  97, 121,  68, 117, 115,
    116,  70, 101, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    104,  97, 118, 101,  80, 114, 117, 110,
    101, 100,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  80, 114, 117, 110, 101,
     72, 101, 105, 103, 104, 116,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    105, 115,  82, 101,  97, 100, 121,  84,
    111,  66, 114, 111,  97, 100,  99,  97,
    115, 116,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    105, 115,  73, 110, 105, 116, 105,  97,
    108,  66, 108, 111,  99, 107,  68, 111,
    119, 110, 108, 111,  97, 100,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 104, 117, 116, 100, 111, 119, 110,
     82, 101, 113, 117, 101, 115, 116, 101,
    100,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    105, 110, 105, 116,  77, 101, 115, 115,
     97, 103, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    105, 110, 105, 116,  87,  97, 114, 110,
    105, 110, 103,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    105, 110, 105, 116,  69, 114, 114, 111,
    114,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 104, 111, 119,  80, 114, 111, 103,
    114, 101, 115, 115,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    104,  97, 110, 100, 108, 101,  78, 111,
    116, 105, 102, 105,  99,  97, 116, 105,
    111, 110, 115,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    119,  97, 105, 116,  70, 111, 114,  78,
    111, 116, 105, 102, 105,  99,  97, 116,
    105, 111, 110, 115,  73, 102,  84, 105,
    112,  67, 104,  97, 110, 103, 101, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    104,  97, 110, 100, 108, 101,  82, 112,
     99,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 112,  99,  69, 110,  97,  98, 108,
    101,  68, 101, 112, 114, 101,  99,  97,
    116, 101, 100,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 112,  99,  82, 117, 110,  76,  97,
    116, 101, 114,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  83, 101, 116, 116, 105,
    110, 103,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  83, 101, 116, 116, 105,
    110, 103, 115,  76, 105, 115, 116,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  82, 119,  83, 101, 116,
    116, 105, 110, 103,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    117, 112, 100,  97, 116, 101,  82, 119,
     83, 101, 116, 116, 105, 110, 103,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    111, 118, 101, 114, 119, 114, 105, 116,
    101,  82, 119,  83, 101, 116, 116, 105,
    110, 103,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    100, 101, 108, 101, 116, 101,  82, 119,
     83, 101, 116, 116, 105, 110, 103, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,  77,
    101, 109, 112, 111, 111, 108,  84, 114,
     97, 110, 115,  97,  99, 116, 105, 111,
    110, 115,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    104,  97, 115,  65, 115, 115, 117, 109,
    101, 100,  86,  97, 108, 105, 100,  67,
    104,  97, 105, 110,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_ddfb1d54c24414b3 = b_ddfb1d54c24414b3.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ddfb1d54c24414b3[] = {
  &s_806121fc88fc0ffa,
  &s_81587a2e94140229,
  &s_839dd860f5e68f6c,
  &s_8631e66b88321dbd,
  &s_8639d472fa766702,
  &s_871e82b6ddcad596,
  &s_87cf3c829afea937,
  &s_88d07e2356e0b7bb,
  &s_8992d54b029fa059,
  &s_8a740cd45d901432,
  &s_8a7cb38770ea1dc7,
  &s_8cc90209ecd4f212,
  &s_8d6c280c8a190a4a,
  &s_8f0563e4e96da276,
  &s_903e01a761eb43e8,
  &s_927f47fa6dbd882b,
  &s_9422973fac6ada43,
  &s_94b212197c6f8400,
  &s_99157fbc6dea042e,
  &s_991e051a66900948,
  &s_997490ee37508689,
  &s_99a850de2d74024c,
  &s_9a55784320a8b4ad,
  &s_9a96c8b9d2494f8e,
  &s_9be2b99e6805ed93,
  &s_9c8f870fa7600329,
  &s_9cab47bb6fb688ed,
  &s_9f5d40ca3c7aa8ce,
  &s_a02d0d464eb9790f,
  &s_a0fad0ea361b9981,
  &s_a2255cdd442070dc,
  &s_a2fc06de1146ab56,
  &s_a41100dace8f6862,
  &s_a4169a4c771c080d,
  &s_a84866d020728a26,
  &s_a878eb2d9fd71672,
  &s_a8ea11695815410e,
  &s_a9e90a6c044e3fed,
  &s_abb6f32342180bb2,
  &s_abbfa71ec513d736,
  &s_ac27adb393dd972c,
  &s_ad07cde451bb55da,
  &s_adb1fd513ce0a43e,
  &s_af9a1e34a5cae359,
  &s_afae52ad19d26b84,
  &s_b021795afb52a3be,
  &s_b0739496216e3f0a,
  &s_b15f5b6fa1145db8,
  &s_b1d1338ddf248fcf,
  &s_b53f818b95db3500,
  &s_b6fa4c3027bfc6e9,
  &s_b7e8c3cec61cc2b6,
  &s_b84228226750d1ae,
  &s_b87b455494bb15e3,
  &s_b8f5f6088793526e,
  &s_b9d80f6127a840cd,
  &s_b9fd6e0c0b821bcc,
  &s_ba4d1ec0fd0fb191,
  &s_bbd26e43c970f3ca,
  &s_bcc779d9f1a3be56,
  &s_bd1525d866cd3046,
  &s_bf69d7b72c465db2,
  &s_c1fbd52dae69b747,
  &s_c3290a8c65fc071a,
  &s_c35c727bf870d31e,
  &s_c6c469852cbc148f,
  &s_ca4402cf19cd76a0,
  &s_ca9b4173d6555a3a,
  &s_cabc9d37f47be255,
  &s_cb2d74a781da45fb,
  &s_cc3025ced81bec22,
  &s_cd91e603a145b324,
  &s_cf65cdc10881f7a0,
  &s_cfea2e86ed42ebe3,
  &s_d114851be2a468c4,
  &s_d13695b5c0e7f162,
  &s_d14ecbdbc7a11b28,
  &s_d4dee6041f96ffdc,
  &s_d57d2b05f815e833,
  &s_d6c79a2b011687a4,
  &s_d888b015c2fc0b1f,
  &s_dc86772749090338,
  &s_dd00f6ed4c209748,
  &s_e1a07796aec1df8e,
  &s_e1c1ba3b3f91009b,
  &s_e1e38afc108e6e9e,
  &s_e2e96a91c6e0f853,
  &s_e3862c447c3467c8,
  &s_e433806291673abc,
  &s_e634c98fac8648a9,
  &s_e8598d179641a635,
  &s_e9330ca0a091134e,
  &s_e97ee1bacd429544,
  &s_ecb09777f642a0fb,
  &s_edc5de233d78be56,
  &s_ef6664aea6ea9dd2,
  &s_f3217112077bcc43,
  &s_f43104fc2dce8958,
  &s_f46b18464e6581b4,
  &s_f4df0de0d5fcfa9f,
  &s_f96a75c60924a0a9,
  &s_fa2e3f4e5b9bc224,
  &s_fb20e81fad00db17,
  &s_fbe5afe509594fb1,
  &s_fc49f074b7134ce8,
  &s_fd1399c0f4d9cb90,
  &s_fd4e472b9e23248d,
  &s_fee41a0cdd4b6137,
};
static const uint16_t m_ddfb1d54c24414b3[] = {8, 20, 23, 22, 25, 51, 0, 27, 26, 12, 11, 9, 14, 13, 10, 6, 5, 2, 1, 24, 33, 48, 46, 47, 4, 21, 15, 41, 43, 53, 7, 16, 19, 3, 32, 39, 37, 38, 18, 35, 17, 34, 28, 50, 31, 30, 29, 52, 44, 45, 40, 36, 49, 42};
const ::capnp::_::RawSchema s_ddfb1d54c24414b3 = {
  0xddfb1d54c24414b3, b_ddfb1d54c24414b3.words, 657, d_ddfb1d54c24414b3, m_ddfb1d54c24414b3,
  108, 54, nullptr, nullptr, nullptr, { &s_ddfb1d54c24414b3, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_fbe5afe509594fb1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    177,  79,  89,   9, 229, 175, 229, 251,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    100, 101, 115, 116, 114, 111, 121,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fbe5afe509594fb1 = b_fbe5afe509594fb1.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fbe5afe509594fb1[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_fbe5afe509594fb1[] = {0};
static const uint16_t i_fbe5afe509594fb1[] = {0};
const ::capnp::_::RawSchema s_fbe5afe509594fb1 = {
  0xfbe5afe509594fb1, b_fbe5afe509594fb1.words, 33, d_fbe5afe509594fb1, m_fbe5afe509594fb1,
  1, 1, i_fbe5afe509594fb1, nullptr, nullptr, { &s_fbe5afe509594fb1, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_f96a75c60924a0a9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    169, 160,  36,   9, 198, 117, 106, 249,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    100, 101, 115, 116, 114, 111, 121,  36,
     82, 101, 115, 117, 108, 116, 115,   0, }
};
::capnp::word const* const bp_f96a75c60924a0a9 = b_f96a75c60924a0a9.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f96a75c60924a0a9 = {
  0xf96a75c60924a0a9, b_f96a75c60924a0a9.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f96a75c60924a0a9, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_839dd860f5e68f6c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    108, 143, 230, 245,  96, 216, 157, 131,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    103, 101, 116,  72, 101, 105, 103, 104,
    116,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_839dd860f5e68f6c = b_839dd860f5e68f6c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_839dd860f5e68f6c[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_839dd860f5e68f6c[] = {0};
static const uint16_t i_839dd860f5e68f6c[] = {0};
const ::capnp::_::RawSchema s_839dd860f5e68f6c = {
  0x839dd860f5e68f6c, b_839dd860f5e68f6c.words, 34, d_839dd860f5e68f6c, m_839dd860f5e68f6c,
  1, 1, i_839dd860f5e68f6c, nullptr, nullptr, { &s_839dd860f5e68f6c, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_b8f5f6088793526e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    110,  82, 147, 135,   8, 246, 245, 184,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    103, 101, 116,  72, 101, 105, 103, 104,
    116,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,  32,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,  97, 115,  82, 101, 115, 117, 108,
    116,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b8f5f6088793526e = b_b8f5f6088793526e.words;
#if !CAPNP_LITE
static const uint16_t m_b8f5f6088793526e[] = {1, 0};
static const uint16_t i_b8f5f6088793526e[] = {0, 1};
const ::capnp::_::RawSchema s_b8f5f6088793526e = {
  0xb8f5f6088793526e, b_b8f5f6088793526e.words, 50, nullptr, m_b8f5f6088793526e,
  0, 2, i_b8f5f6088793526e, nullptr, nullptr, { &s_b8f5f6088793526e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_997490ee37508689 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    137, 134,  80,  55, 238, 144, 116, 153,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    103, 101, 116,  66, 108, 111,  99, 107,
     72,  97, 115, 104,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 101, 105, 103, 104, 116,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_997490ee37508689 = b_997490ee37508689.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_997490ee37508689[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_997490ee37508689[] = {0, 1};
static const uint16_t i_997490ee37508689[] = {0, 1};
const ::capnp::_::RawSchema s_997490ee37508689 = {
  0x997490ee37508689, b_997490ee37508689.words, 49, d_997490ee37508689, m_997490ee37508689,
  1, 2, i_997490ee37508689, nullptr, nullptr, { &s_997490ee37508689, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_b9d80f6127a840cd = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    205,  64, 168,  39,  97,  15, 216, 185,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    103, 101, 116,  66, 108, 111,  99, 107,
     72,  97, 115, 104,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b9d80f6127a840cd = b_b9d80f6127a840cd.words;
#if !CAPNP_LITE
static const uint16_t m_b9d80f6127a840cd[] = {0};
static const uint16_t i_b9d80f6127a840cd[] = {0};
const ::capnp::_::RawSchema s_b9d80f6127a840cd = {
  0xb9d80f6127a840cd, b_b9d80f6127a840cd.words, 34, nullptr, m_b9d80f6127a840cd,
  0, 1, i_b9d80f6127a840cd, nullptr, nullptr, { &s_b9d80f6127a840cd, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_9422973fac6ada43 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     67, 218, 106, 172,  63, 151,  34, 148,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    104,  97, 118, 101,  66, 108, 111,  99,
    107,  79, 110,  68, 105, 115, 107,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 101, 105, 103, 104, 116,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9422973fac6ada43 = b_9422973fac6ada43.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9422973fac6ada43[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_9422973fac6ada43[] = {0, 1};
static const uint16_t i_9422973fac6ada43[] = {0, 1};
const ::capnp::_::RawSchema s_9422973fac6ada43 = {
  0x9422973fac6ada43, b_9422973fac6ada43.words, 49, d_9422973fac6ada43, m_9422973fac6ada43,
  1, 2, i_9422973fac6ada43, nullptr, nullptr, { &s_9422973fac6ada43, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_9c8f870fa7600329 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     41,   3,  96, 167,  15, 135, 143, 156,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    104,  97, 118, 101,  66, 108, 111,  99,
    107,  79, 110,  68, 105, 115, 107,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9c8f870fa7600329 = b_9c8f870fa7600329.words;
#if !CAPNP_LITE
static const uint16_t m_9c8f870fa7600329[] = {0};
static const uint16_t i_9c8f870fa7600329[] = {0};
const ::capnp::_::RawSchema s_9c8f870fa7600329 = {
  0x9c8f870fa7600329, b_9c8f870fa7600329.words, 34, nullptr, m_9c8f870fa7600329,
  0, 1, i_9c8f870fa7600329, nullptr, nullptr, { &s_9c8f870fa7600329, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_bd1525d866cd3046 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     70,  48, 205, 102, 216,  37,  21, 189,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    103, 101, 116,  84, 105, 112,  76, 111,
     99,  97, 116, 111, 114,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bd1525d866cd3046 = b_bd1525d866cd3046.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bd1525d866cd3046[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_bd1525d866cd3046[] = {0};
static const uint16_t i_bd1525d866cd3046[] = {0};
const ::capnp::_::RawSchema s_bd1525d866cd3046 = {
  0xbd1525d866cd3046, b_bd1525d866cd3046.words, 34, d_bd1525d866cd3046, m_bd1525d866cd3046,
  1, 1, i_bd1525d866cd3046, nullptr, nullptr, { &s_bd1525d866cd3046, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_a0fad0ea361b9981 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    129, 153,  27,  54, 234, 208, 250, 160,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    103, 101, 116,  84, 105, 112,  76, 111,
     99,  97, 116, 111, 114,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a0fad0ea361b9981 = b_a0fad0ea361b9981.words;
#if !CAPNP_LITE
static const uint16_t m_a0fad0ea361b9981[] = {0};
static const uint16_t i_a0fad0ea361b9981[] = {0};
const ::capnp::_::RawSchema s_a0fad0ea361b9981 = {
  0xa0fad0ea361b9981, b_a0fad0ea361b9981.words, 34, nullptr, m_a0fad0ea361b9981,
  0, 1, i_a0fad0ea361b9981, nullptr, nullptr, { &s_a0fad0ea361b9981, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_af9a1e34a5cae359 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     89, 227, 202, 165,  52,  30, 154, 175,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    103, 101, 116,  65,  99, 116, 105, 118,
    101,  67, 104,  97, 105, 110,  76, 111,
     99,  97, 116, 111, 114,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 108, 111,  99, 107,  72,  97, 115,
    104,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_af9a1e34a5cae359 = b_af9a1e34a5cae359.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_af9a1e34a5cae359[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_af9a1e34a5cae359[] = {1, 0};
static const uint16_t i_af9a1e34a5cae359[] = {0, 1};
const ::capnp::_::RawSchema s_af9a1e34a5cae359 = {
  0xaf9a1e34a5cae359, b_af9a1e34a5cae359.words, 51, d_af9a1e34a5cae359, m_af9a1e34a5cae359,
  1, 2, i_af9a1e34a5cae359, nullptr, nullptr, { &s_af9a1e34a5cae359, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_e1c1ba3b3f91009b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    155,   0, 145,  63,  59, 186, 193, 225,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    103, 101, 116,  65,  99, 116, 105, 118,
    101,  67, 104,  97, 105, 110,  76, 111,
     99,  97, 116, 111, 114,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e1c1ba3b3f91009b = b_e1c1ba3b3f91009b.words;
#if !CAPNP_LITE
static const uint16_t m_e1c1ba3b3f91009b[] = {0};
static const uint16_t i_e1c1ba3b3f91009b[] = {0};
const ::capnp::_::RawSchema s_e1c1ba3b3f91009b = {
  0xe1c1ba3b3f91009b, b_e1c1ba3b3f91009b.words, 35, nullptr, m_e1c1ba3b3f91009b,
  0, 1, i_e1c1ba3b3f91009b, nullptr, nullptr, { &s_e1c1ba3b3f91009b, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_fd1399c0f4d9cb90 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    144, 203, 217, 244, 192, 153,  19, 253,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    102, 105, 110, 100,  76, 111,  99,  97,
    116, 111, 114,  70, 111, 114, 107,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108, 111,  99,  97, 116, 111, 114,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fd1399c0f4d9cb90 = b_fd1399c0f4d9cb90.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fd1399c0f4d9cb90[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_fd1399c0f4d9cb90[] = {0, 1};
static const uint16_t i_fd1399c0f4d9cb90[] = {0, 1};
const ::capnp::_::RawSchema s_fd1399c0f4d9cb90 = {
  0xfd1399c0f4d9cb90, b_fd1399c0f4d9cb90.words, 49, d_fd1399c0f4d9cb90, m_fd1399c0f4d9cb90,
  1, 2, i_fd1399c0f4d9cb90, nullptr, nullptr, { &s_fd1399c0f4d9cb90, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_88d07e2356e0b7bb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    187, 183, 224,  86,  35, 126, 208, 136,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    102, 105, 110, 100,  76, 111,  99,  97,
    116, 111, 114,  70, 111, 114, 107,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,  32,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,  97, 115,  82, 101, 115, 117, 108,
    116,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_88d07e2356e0b7bb = b_88d07e2356e0b7bb.words;
#if !CAPNP_LITE
static const uint16_t m_88d07e2356e0b7bb[] = {1, 0};
static const uint16_t i_88d07e2356e0b7bb[] = {0, 1};
const ::capnp::_::RawSchema s_88d07e2356e0b7bb = {
  0x88d07e2356e0b7bb, b_88d07e2356e0b7bb.words, 50, nullptr, m_88d07e2356e0b7bb,
  0, 2, i_88d07e2356e0b7bb, nullptr, nullptr, { &s_88d07e2356e0b7bb, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_927f47fa6dbd882b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     43, 136, 189, 109, 250,  71, 127, 146,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    104,  97, 115,  66, 108, 111,  99, 107,
     70, 105, 108, 116, 101, 114,  73, 110,
    100, 101, 120,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 105, 108, 116, 101, 114,  84, 121,
    112, 101,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_927f47fa6dbd882b = b_927f47fa6dbd882b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_927f47fa6dbd882b[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_927f47fa6dbd882b[] = {0, 1};
static const uint16_t i_927f47fa6dbd882b[] = {0, 1};
const ::capnp::_::RawSchema s_927f47fa6dbd882b = {
  0x927f47fa6dbd882b, b_927f47fa6dbd882b.words, 51, d_927f47fa6dbd882b, m_927f47fa6dbd882b,
  1, 2, i_927f47fa6dbd882b, nullptr, nullptr, { &s_927f47fa6dbd882b, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_a84866d020728a26 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     38, 138, 114,  32, 208, 102,  72, 168,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    104,  97, 115,  66, 108, 111,  99, 107,
     70, 105, 108, 116, 101, 114,  73, 110,
    100, 101, 120,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a84866d020728a26 = b_a84866d020728a26.words;
#if !CAPNP_LITE
static const uint16_t m_a84866d020728a26[] = {0};
static const uint16_t i_a84866d020728a26[] = {0};
const ::capnp::_::RawSchema s_a84866d020728a26 = {
  0xa84866d020728a26, b_a84866d020728a26.words, 35, nullptr, m_a84866d020728a26,
  0, 1, i_a84866d020728a26, nullptr, nullptr, { &s_a84866d020728a26, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<87> b_dc86772749090338 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     56,   3,   9,  73,  39, 119, 134, 220,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
     98, 108, 111,  99, 107,  70, 105, 108,
    116, 101, 114,  77,  97, 116,  99, 104,
    101, 115,  65, 110, 121,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,   0,   0,   0,   3,   0,   1,   0,
    144,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 105, 108, 116, 101, 114,  84, 121,
    112, 101,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 108, 111,  99, 107,  72,  97, 115,
    104,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 105, 108, 116, 101, 114,  83, 101,
    116,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dc86772749090338 = b_dc86772749090338.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_dc86772749090338[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_dc86772749090338[] = {2, 0, 3, 1};
static const uint16_t i_dc86772749090338[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_dc86772749090338 = {
  0xdc86772749090338, b_dc86772749090338.words, 87, d_dc86772749090338, m_dc86772749090338,
  1, 4, i_dc86772749090338, nullptr, nullptr, { &s_dc86772749090338, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_8cc90209ecd4f212 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     18, 242, 212, 236,   9,   2, 201, 140,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
     98, 108, 111,  99, 107,  70, 105, 108,
    116, 101, 114,  77,  97, 116,  99, 104,
    101, 115,  65, 110, 121,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,  97, 115,  82, 101, 115, 117, 108,
    116,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8cc90209ecd4f212 = b_8cc90209ecd4f212.words;
#if !CAPNP_LITE
static const uint16_t m_8cc90209ecd4f212[] = {1, 0};
static const uint16_t i_8cc90209ecd4f212[] = {0, 1};
const ::capnp::_::RawSchema s_8cc90209ecd4f212 = {
  0x8cc90209ecd4f212, b_8cc90209ecd4f212.words, 51, nullptr, m_8cc90209ecd4f212,
  0, 2, i_8cc90209ecd4f212, nullptr, nullptr, { &s_8cc90209ecd4f212, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<64> b_fc49f074b7134ce8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    232,  76,  19, 183, 116, 240,  73, 252,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    102, 105, 110, 100,  66, 108, 111,  99,
    107,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,  97, 115, 104,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 108, 111,  99, 107,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     42, 173,  60,  14, 244,  81, 222, 237,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fc49f074b7134ce8 = b_fc49f074b7134ce8.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fc49f074b7134ce8[] = {
  &s_9c44e6645d0b22c6,
  &s_edde51f40e3cad2a,
};
static const uint16_t m_fc49f074b7134ce8[] = {2, 0, 1};
static const uint16_t i_fc49f074b7134ce8[] = {0, 1, 2};
const ::capnp::_::RawSchema s_fc49f074b7134ce8 = {
  0xfc49f074b7134ce8, b_fc49f074b7134ce8.words, 64, d_fc49f074b7134ce8, m_fc49f074b7134ce8,
  2, 3, i_fc49f074b7134ce8, nullptr, nullptr, { &s_fc49f074b7134ce8, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_e634c98fac8648a9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    169,  72, 134, 172, 143, 201,  52, 230,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    102, 105, 110, 100,  66, 108, 111,  99,
    107,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     98, 108, 111,  99, 107,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    254,  48, 134, 143, 159, 109,  13, 152,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e634c98fac8648a9 = b_e634c98fac8648a9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e634c98fac8648a9[] = {
  &s_980d6d9f8f8630fe,
};
static const uint16_t m_e634c98fac8648a9[] = {0, 1};
static const uint16_t i_e634c98fac8648a9[] = {0, 1};
const ::capnp::_::RawSchema s_e634c98fac8648a9 = {
  0xe634c98fac8648a9, b_e634c98fac8648a9.words, 49, d_e634c98fac8648a9, m_e634c98fac8648a9,
  1, 2, i_e634c98fac8648a9, nullptr, nullptr, { &s_e634c98fac8648a9, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<82> b_bf69d7b72c465db2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    178,  93,  70,  44, 183, 215, 105, 191,
     24,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    102, 105, 110, 100,  70, 105, 114, 115,
    116,  66, 108, 111,  99, 107,  87, 105,
    116, 104,  84, 105, 109, 101,  65, 110,
    100,  72, 101, 105, 103, 104, 116,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 105, 110,  84, 105, 109, 101,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 105, 110,  72, 101, 105, 103, 104,
    116,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 108, 111,  99, 107,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     42, 173,  60,  14, 244,  81, 222, 237,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bf69d7b72c465db2 = b_bf69d7b72c465db2.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bf69d7b72c465db2[] = {
  &s_9c44e6645d0b22c6,
  &s_edde51f40e3cad2a,
};
static const uint16_t m_bf69d7b72c465db2[] = {3, 0, 2, 1};
static const uint16_t i_bf69d7b72c465db2[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_bf69d7b72c465db2 = {
  0xbf69d7b72c465db2, b_bf69d7b72c465db2.words, 82, d_bf69d7b72c465db2, m_bf69d7b72c465db2,
  2, 4, i_bf69d7b72c465db2, nullptr, nullptr, { &s_bf69d7b72c465db2, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_c35c727bf870d31e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     30, 211, 112, 248, 123, 114,  92, 195,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    102, 105, 110, 100,  70, 105, 114, 115,
    116,  66, 108, 111,  99, 107,  87, 105,
    116, 104,  84, 105, 109, 101,  65, 110,
    100,  72, 101, 105, 103, 104, 116,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     98, 108, 111,  99, 107,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    254,  48, 134, 143, 159, 109,  13, 152,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c35c727bf870d31e = b_c35c727bf870d31e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c35c727bf870d31e[] = {
  &s_980d6d9f8f8630fe,
};
static const uint16_t m_c35c727bf870d31e[] = {0, 1};
static const uint16_t i_c35c727bf870d31e[] = {0, 1};
const ::capnp::_::RawSchema s_c35c727bf870d31e = {
  0xc35c727bf870d31e, b_c35c727bf870d31e.words, 51, d_c35c727bf870d31e, m_c35c727bf870d31e,
  1, 2, i_c35c727bf870d31e, nullptr, nullptr, { &s_c35c727bf870d31e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<83> b_d4dee6041f96ffdc = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    220, 255, 150,  31,   4, 230, 222, 212,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    102, 105, 110, 100,  65, 110,  99, 101,
    115, 116, 111, 114,  66, 121,  72, 101,
    105, 103, 104, 116,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,   0,   0,   0,   3,   0,   1,   0,
    128,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 108, 111,  99, 107,  72,  97, 115,
    104,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 110,  99, 101, 115, 116, 111, 114,
     72, 101, 105, 103, 104, 116,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 110,  99, 101, 115, 116, 111, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     42, 173,  60,  14, 244,  81, 222, 237,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d4dee6041f96ffdc = b_d4dee6041f96ffdc.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d4dee6041f96ffdc[] = {
  &s_9c44e6645d0b22c6,
  &s_edde51f40e3cad2a,
};
static const uint16_t m_d4dee6041f96ffdc[] = {3, 2, 1, 0};
static const uint16_t i_d4dee6041f96ffdc[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_d4dee6041f96ffdc = {
  0xd4dee6041f96ffdc, b_d4dee6041f96ffdc.words, 83, d_d4dee6041f96ffdc, m_d4dee6041f96ffdc,
  2, 4, i_d4dee6041f96ffdc, nullptr, nullptr, { &s_d4dee6041f96ffdc, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_b7e8c3cec61cc2b6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    182, 194,  28, 198, 206, 195, 232, 183,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    102, 105, 110, 100,  65, 110,  99, 101,
    115, 116, 111, 114,  66, 121,  72, 101,
    105, 103, 104, 116,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
     97, 110,  99, 101, 115, 116, 111, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    254,  48, 134, 143, 159, 109,  13, 152,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b7e8c3cec61cc2b6 = b_b7e8c3cec61cc2b6.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b7e8c3cec61cc2b6[] = {
  &s_980d6d9f8f8630fe,
};
static const uint16_t m_b7e8c3cec61cc2b6[] = {0, 1};
static const uint16_t i_b7e8c3cec61cc2b6[] = {0, 1};
const ::capnp::_::RawSchema s_b7e8c3cec61cc2b6 = {
  0xb7e8c3cec61cc2b6, b_b7e8c3cec61cc2b6.words, 51, d_b7e8c3cec61cc2b6, m_b7e8c3cec61cc2b6,
  1, 2, i_b7e8c3cec61cc2b6, nullptr, nullptr, { &s_b7e8c3cec61cc2b6, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<83> b_e97ee1bacd429544 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     68, 149,  66, 205, 186, 225, 126, 233,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    102, 105, 110, 100,  65, 110,  99, 101,
    115, 116, 111, 114,  66, 121,  72,  97,
    115, 104,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,   0,   0,   0,   3,   0,   1,   0,
    128,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 108, 111,  99, 107,  72,  97, 115,
    104,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 110,  99, 101, 115, 116, 111, 114,
     72,  97, 115, 104,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 110,  99, 101, 115, 116, 111, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     42, 173,  60,  14, 244,  81, 222, 237,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e97ee1bacd429544 = b_e97ee1bacd429544.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e97ee1bacd429544[] = {
  &s_9c44e6645d0b22c6,
  &s_edde51f40e3cad2a,
};
static const uint16_t m_e97ee1bacd429544[] = {3, 2, 1, 0};
static const uint16_t i_e97ee1bacd429544[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_e97ee1bacd429544 = {
  0xe97ee1bacd429544, b_e97ee1bacd429544.words, 83, d_e97ee1bacd429544, m_e97ee1bacd429544,
  2, 4, i_e97ee1bacd429544, nullptr, nullptr, { &s_e97ee1bacd429544, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_b15f5b6fa1145db8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    184,  93,  20, 161, 111,  91,  95, 177,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    102, 105, 110, 100,  65, 110,  99, 101,
    115, 116, 111, 114,  66, 121,  72,  97,
    115, 104,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
     97, 110,  99, 101, 115, 116, 111, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    254,  48, 134, 143, 159, 109,  13, 152,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b15f5b6fa1145db8 = b_b15f5b6fa1145db8.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b15f5b6fa1145db8[] = {
  &s_980d6d9f8f8630fe,
};
static const uint16_t m_b15f5b6fa1145db8[] = {0, 1};
static const uint16_t i_b15f5b6fa1145db8[] = {0, 1};
const ::capnp::_::RawSchema s_b15f5b6fa1145db8 = {
  0xb15f5b6fa1145db8, b_b15f5b6fa1145db8.words, 51, d_b15f5b6fa1145db8, m_b15f5b6fa1145db8,
  1, 2, i_b15f5b6fa1145db8, nullptr, nullptr, { &s_b15f5b6fa1145db8, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<113> b_b1d1338ddf248fcf = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    207, 143,  36, 223, 141,  51, 209, 177,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  87,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    102, 105, 110, 100,  67, 111, 109, 109,
    111, 110,  65, 110,  99, 101, 115, 116,
    111, 114,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
     24,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    148,   0,   0,   0,   3,   0,   1,   0,
    160,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    157,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    156,   0,   0,   0,   3,   0,   1,   0,
    168,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    165,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    164,   0,   0,   0,   3,   0,   1,   0,
    176,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    173,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    172,   0,   0,   0,   3,   0,   1,   0,
    184,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    181,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    176,   0,   0,   0,   3,   0,   1,   0,
    188,   0,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,   5,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    185,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    180,   0,   0,   0,   3,   0,   1,   0,
    192,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 108, 111,  99, 107,  72,  97, 115,
    104,  49,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 108, 111,  99, 107,  72,  97, 115,
    104,  50,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 110,  99, 101, 115, 116, 111, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     42, 173,  60,  14, 244,  81, 222, 237,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 108, 111,  99, 107,  49,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     42, 173,  60,  14, 244,  81, 222, 237,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 108, 111,  99, 107,  50,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     42, 173,  60,  14, 244,  81, 222, 237,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b1d1338ddf248fcf = b_b1d1338ddf248fcf.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b1d1338ddf248fcf[] = {
  &s_9c44e6645d0b22c6,
  &s_edde51f40e3cad2a,
};
static const uint16_t m_b1d1338ddf248fcf[] = {3, 4, 5, 1, 2, 0};
static const uint16_t i_b1d1338ddf248fcf[] = {0, 1, 2, 3, 4, 5};
const ::capnp::_::RawSchema s_b1d1338ddf248fcf = {
  0xb1d1338ddf248fcf, b_b1d1338ddf248fcf.words, 113, d_b1d1338ddf248fcf, m_b1d1338ddf248fcf,
  2, 6, i_b1d1338ddf248fcf, nullptr, nullptr, { &s_b1d1338ddf248fcf, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<81> b_b53f818b95db3500 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      0,  53, 219, 149, 139, 129,  63, 181,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    102, 105, 110, 100,  67, 111, 109, 109,
    111, 110,  65, 110,  99, 101, 115, 116,
    111, 114,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
     97, 110,  99, 101, 115, 116, 111, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    254,  48, 134, 143, 159, 109,  13, 152,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 108, 111,  99, 107,  49,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    254,  48, 134, 143, 159, 109,  13, 152,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 108, 111,  99, 107,  50,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    254,  48, 134, 143, 159, 109,  13, 152,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b53f818b95db3500 = b_b53f818b95db3500.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b53f818b95db3500[] = {
  &s_980d6d9f8f8630fe,
};
static const uint16_t m_b53f818b95db3500[] = {0, 1, 2, 3};
static const uint16_t i_b53f818b95db3500[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_b53f818b95db3500 = {
  0xb53f818b95db3500, b_b53f818b95db3500.words, 81, d_b53f818b95db3500, m_b53f818b95db3500,
  1, 4, i_b53f818b95db3500, nullptr, nullptr, { &s_b53f818b95db3500, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<71> b_ba4d1ec0fd0fb191 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    145, 177,  15, 253, 192,  30,  77, 186,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    102, 105, 110, 100,  67, 111, 105, 110,
    115,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
    140,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 105, 110, 115,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     30, 167, 153,  65, 252, 246, 242, 142,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
     30, 167, 153,  65, 252, 246, 242, 142,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  39,   0,   0,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   1,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ba4d1ec0fd0fb191 = b_ba4d1ec0fd0fb191.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ba4d1ec0fd0fb191[] = {
  &s_8ef2f6fc4199a71e,
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_ba4d1ec0fd0fb191[] = {1, 0};
static const uint16_t i_ba4d1ec0fd0fb191[] = {0, 1};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_ba4d1ec0fd0fb191[] = {
  { 16777217,  ::ipc::capnp::messages::Pair< ::capnp::Data,  ::capnp::Data>::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_ba4d1ec0fd0fb191 = {
  0xba4d1ec0fd0fb191, b_ba4d1ec0fd0fb191.words, 71, d_ba4d1ec0fd0fb191, m_ba4d1ec0fd0fb191,
  2, 2, i_ba4d1ec0fd0fb191, nullptr, nullptr, { &s_ba4d1ec0fd0fb191, nullptr, bd_ba4d1ec0fd0fb191, 0, sizeof(bd_ba4d1ec0fd0fb191) / sizeof(bd_ba4d1ec0fd0fb191[0]), nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<56> b_ac27adb393dd972c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     44, 151, 221, 147, 179, 173,  39, 172,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    102, 105, 110, 100,  67, 111, 105, 110,
    115,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 105, 110, 115,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     30, 167, 153,  65, 252, 246, 242, 142,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
     30, 167, 153,  65, 252, 246, 242, 142,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  39,   0,   0,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   1,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ac27adb393dd972c = b_ac27adb393dd972c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ac27adb393dd972c[] = {
  &s_8ef2f6fc4199a71e,
};
static const uint16_t m_ac27adb393dd972c[] = {0};
static const uint16_t i_ac27adb393dd972c[] = {0};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_ac27adb393dd972c[] = {
  { 16777216,  ::ipc::capnp::messages::Pair< ::capnp::Data,  ::capnp::Data>::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_ac27adb393dd972c = {
  0xac27adb393dd972c, b_ac27adb393dd972c.words, 56, d_ac27adb393dd972c, m_ac27adb393dd972c,
  1, 1, i_ac27adb393dd972c, nullptr, nullptr, { &s_ac27adb393dd972c, nullptr, bd_ac27adb393dd972c, 0, sizeof(bd_ac27adb393dd972c) / sizeof(bd_ac27adb393dd972c[0]), nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_d13695b5c0e7f162 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     98, 241, 231, 192, 181, 149,  54, 209,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    103, 117, 101, 115, 115,  86, 101, 114,
    105, 102, 105,  99,  97, 116, 105, 111,
    110,  80, 114, 111, 103, 114, 101, 115,
    115,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 108, 111,  99, 107,  72,  97, 115,
    104,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d13695b5c0e7f162 = b_d13695b5c0e7f162.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d13695b5c0e7f162[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_d13695b5c0e7f162[] = {1, 0};
static const uint16_t i_d13695b5c0e7f162[] = {0, 1};
const ::capnp::_::RawSchema s_d13695b5c0e7f162 = {
  0xd13695b5c0e7f162, b_d13695b5c0e7f162.words, 52, d_d13695b5c0e7f162, m_d13695b5c0e7f162,
  1, 2, i_d13695b5c0e7f162, nullptr, nullptr, { &s_d13695b5c0e7f162, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_ad07cde451bb55da = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    218,  85, 187,  81, 228, 205,   7, 173,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    103, 117, 101, 115, 115,  86, 101, 114,
    105, 102, 105,  99,  97, 116, 105, 111,
    110,  80, 114, 111, 103, 114, 101, 115,
    115,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ad07cde451bb55da = b_ad07cde451bb55da.words;
#if !CAPNP_LITE
static const uint16_t m_ad07cde451bb55da[] = {0};
static const uint16_t i_ad07cde451bb55da[] = {0};
const ::capnp::_::RawSchema s_ad07cde451bb55da = {
  0xad07cde451bb55da, b_ad07cde451bb55da.words, 36, nullptr, m_ad07cde451bb55da,
  0, 1, i_ad07cde451bb55da, nullptr, nullptr, { &s_ad07cde451bb55da, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<98> b_b021795afb52a3be = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    190, 163,  82, 251,  90, 121,  33, 176,
     24,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    104,  97, 115,  66, 108, 111,  99, 107,
    115,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    128,   0,   0,   0,   3,   0,   1,   0,
    140,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    136,   0,   0,   0,   3,   0,   1,   0,
    148,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    145,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    144,   0,   0,   0,   3,   0,   1,   0,
    156,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,  64,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    152,   0,   0,   0,   3,   0,   1,   0,
    164,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 108, 111,  99, 107,  72,  97, 115,
    104,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 105, 110,  72, 101, 105, 103, 104,
    116,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 120,  72, 101, 105, 103, 104,
    116,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,  97, 115,  77,  97, 120,  72, 101,
    105, 103, 104, 116,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b021795afb52a3be = b_b021795afb52a3be.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b021795afb52a3be[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_b021795afb52a3be[] = {1, 0, 4, 3, 2};
static const uint16_t i_b021795afb52a3be[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_b021795afb52a3be = {
  0xb021795afb52a3be, b_b021795afb52a3be.words, 98, d_b021795afb52a3be, m_b021795afb52a3be,
  1, 5, i_b021795afb52a3be, nullptr, nullptr, { &s_b021795afb52a3be, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_a878eb2d9fd71672 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    114,  22, 215, 159,  45, 235, 120, 168,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    104,  97, 115,  66, 108, 111,  99, 107,
    115,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a878eb2d9fd71672 = b_a878eb2d9fd71672.words;
#if !CAPNP_LITE
static const uint16_t m_a878eb2d9fd71672[] = {0};
static const uint16_t i_a878eb2d9fd71672[] = {0};
const ::capnp::_::RawSchema s_a878eb2d9fd71672 = {
  0xa878eb2d9fd71672, b_a878eb2d9fd71672.words, 34, nullptr, m_a878eb2d9fd71672,
  0, 1, i_a878eb2d9fd71672, nullptr, nullptr, { &s_a878eb2d9fd71672, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_99157fbc6dea042e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     46,   4, 234, 109, 188, 127,  21, 153,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    105, 115,  82,  66,  70,  79, 112, 116,
     73, 110,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 120,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_99157fbc6dea042e = b_99157fbc6dea042e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_99157fbc6dea042e[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_99157fbc6dea042e[] = {0, 1};
static const uint16_t i_99157fbc6dea042e[] = {0, 1};
const ::capnp::_::RawSchema s_99157fbc6dea042e = {
  0x99157fbc6dea042e, b_99157fbc6dea042e.words, 49, d_99157fbc6dea042e, m_99157fbc6dea042e,
  1, 2, i_99157fbc6dea042e, nullptr, nullptr, { &s_99157fbc6dea042e, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_87cf3c829afea937 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     55, 169, 254, 154, 130,  60, 207, 135,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    105, 115,  82,  66,  70,  79, 112, 116,
     73, 110,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_87cf3c829afea937 = b_87cf3c829afea937.words;
#if !CAPNP_LITE
static const uint16_t m_87cf3c829afea937[] = {0};
static const uint16_t i_87cf3c829afea937[] = {0};
const ::capnp::_::RawSchema s_87cf3c829afea937 = {
  0x87cf3c829afea937, b_87cf3c829afea937.words, 34, nullptr, m_87cf3c829afea937,
  0, 1, i_87cf3c829afea937, nullptr, nullptr, { &s_87cf3c829afea937, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_8a740cd45d901432 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     50,  20, 144,  93, 212,  12, 116, 138,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    105, 115,  73, 110,  77, 101, 109, 112,
    111, 111, 108,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 120, 105, 100,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8a740cd45d901432 = b_8a740cd45d901432.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8a740cd45d901432[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_8a740cd45d901432[] = {0, 1};
static const uint16_t i_8a740cd45d901432[] = {0, 1};
const ::capnp::_::RawSchema s_8a740cd45d901432 = {
  0x8a740cd45d901432, b_8a740cd45d901432.words, 49, d_8a740cd45d901432, m_8a740cd45d901432,
  1, 2, i_8a740cd45d901432, nullptr, nullptr, { &s_8a740cd45d901432, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_fee41a0cdd4b6137 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     55,  97,  75, 221,  12,  26, 228, 254,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    105, 115,  73, 110,  77, 101, 109, 112,
    111, 111, 108,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fee41a0cdd4b6137 = b_fee41a0cdd4b6137.words;
#if !CAPNP_LITE
static const uint16_t m_fee41a0cdd4b6137[] = {0};
static const uint16_t i_fee41a0cdd4b6137[] = {0};
const ::capnp::_::RawSchema s_fee41a0cdd4b6137 = {
  0xfee41a0cdd4b6137, b_fee41a0cdd4b6137.words, 34, nullptr, m_fee41a0cdd4b6137,
  0, 1, i_fee41a0cdd4b6137, nullptr, nullptr, { &s_fee41a0cdd4b6137, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_8992d54b029fa059 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     89, 160, 159,   2,  75, 213, 146, 137,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    104,  97, 115,  68, 101, 115,  99, 101,
    110, 100,  97, 110, 116, 115,  73, 110,
     77, 101, 109, 112, 111, 111, 108,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 120, 105, 100,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8992d54b029fa059 = b_8992d54b029fa059.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8992d54b029fa059[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_8992d54b029fa059[] = {0, 1};
static const uint16_t i_8992d54b029fa059[] = {0, 1};
const ::capnp::_::RawSchema s_8992d54b029fa059 = {
  0x8992d54b029fa059, b_8992d54b029fa059.words, 50, d_8992d54b029fa059, m_8992d54b029fa059,
  1, 2, i_8992d54b029fa059, nullptr, nullptr, { &s_8992d54b029fa059, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_cd91e603a145b324 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     36, 179,  69, 161,   3, 230, 145, 205,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    104,  97, 115,  68, 101, 115,  99, 101,
    110, 100,  97, 110, 116, 115,  73, 110,
     77, 101, 109, 112, 111, 111, 108,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cd91e603a145b324 = b_cd91e603a145b324.words;
#if !CAPNP_LITE
static const uint16_t m_cd91e603a145b324[] = {0};
static const uint16_t i_cd91e603a145b324[] = {0};
const ::capnp::_::RawSchema s_cd91e603a145b324 = {
  0xcd91e603a145b324, b_cd91e603a145b324.words, 35, nullptr, m_cd91e603a145b324,
  0, 1, i_cd91e603a145b324, nullptr, nullptr, { &s_cd91e603a145b324, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<81> b_fd4e472b9e23248d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    141,  36,  35, 158,  43,  71,  78, 253,
     24,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
     98, 114, 111,  97, 100,  99,  97, 115,
    116,  84, 114,  97, 110, 115,  97,  99,
    116, 105, 111, 110,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,  64,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 120,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 120,  84, 120,  70, 101, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 108,  97, 121,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fd4e472b9e23248d = b_fd4e472b9e23248d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fd4e472b9e23248d[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_fd4e472b9e23248d[] = {0, 2, 3, 1};
static const uint16_t i_fd4e472b9e23248d[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_fd4e472b9e23248d = {
  0xfd4e472b9e23248d, b_fd4e472b9e23248d.words, 81, d_fd4e472b9e23248d, m_fd4e472b9e23248d,
  1, 4, i_fd4e472b9e23248d, nullptr, nullptr, { &s_fd4e472b9e23248d, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_adb1fd513ce0a43e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     62, 164, 224,  60,  81, 253, 177, 173,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
     98, 114, 111,  97, 100,  99,  97, 115,
    116,  84, 114,  97, 110, 115,  97,  99,
    116, 105, 111, 110,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    101, 114, 114, 111, 114,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_adb1fd513ce0a43e = b_adb1fd513ce0a43e.words;
#if !CAPNP_LITE
static const uint16_t m_adb1fd513ce0a43e[] = {0, 1};
static const uint16_t i_adb1fd513ce0a43e[] = {0, 1};
const ::capnp::_::RawSchema s_adb1fd513ce0a43e = {
  0xadb1fd513ce0a43e, b_adb1fd513ce0a43e.words, 50, nullptr, m_adb1fd513ce0a43e,
  0, 2, i_adb1fd513ce0a43e, nullptr, nullptr, { &s_adb1fd513ce0a43e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_cf65cdc10881f7a0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    160, 247, 129,   8, 193, 205, 101, 207,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    103, 101, 116,  84, 114,  97, 110, 115,
     97,  99, 116, 105, 111, 110,  65, 110,
     99, 101, 115, 116, 114, 121,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 120, 105, 100,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cf65cdc10881f7a0 = b_cf65cdc10881f7a0.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cf65cdc10881f7a0[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_cf65cdc10881f7a0[] = {0, 1};
static const uint16_t i_cf65cdc10881f7a0[] = {0, 1};
const ::capnp::_::RawSchema s_cf65cdc10881f7a0 = {
  0xcf65cdc10881f7a0, b_cf65cdc10881f7a0.words, 50, d_cf65cdc10881f7a0, m_cf65cdc10881f7a0,
  1, 2, i_cf65cdc10881f7a0, nullptr, nullptr, { &s_cf65cdc10881f7a0, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<84> b_fa2e3f4e5b9bc224 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     36, 194, 155,  91,  78,  63,  46, 250,
     24,   0,   0,   0,   1,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    103, 101, 116,  84, 114,  97, 110, 115,
     97,  99, 116, 105, 111, 110,  65, 110,
     99, 101, 115, 116, 114, 121,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,   0,   0,   0,   3,   0,   1,   0,
    124,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
     97, 110,  99, 101, 115, 116, 111, 114,
    115,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101, 115,  99, 101, 110, 100,  97,
    110, 116, 115,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 110,  99, 101, 115, 116, 111, 114,
    115, 105, 122, 101,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 110,  99, 101, 115, 116, 111, 114,
    102, 101, 101, 115,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fa2e3f4e5b9bc224 = b_fa2e3f4e5b9bc224.words;
#if !CAPNP_LITE
static const uint16_t m_fa2e3f4e5b9bc224[] = {3, 0, 2, 1};
static const uint16_t i_fa2e3f4e5b9bc224[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_fa2e3f4e5b9bc224 = {
  0xfa2e3f4e5b9bc224, b_fa2e3f4e5b9bc224.words, 84, nullptr, m_fa2e3f4e5b9bc224,
  0, 4, i_fa2e3f4e5b9bc224, nullptr, nullptr, { &s_fa2e3f4e5b9bc224, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<72> b_afae52ad19d26b84 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    132, 107, 210,  25, 173,  82, 174, 175,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
     99,  97, 108,  99, 117, 108,  97, 116,
    101,  73, 110, 100, 105, 118, 105, 100,
    117,  97, 108,  66, 117, 109, 112,  70,
    101, 101, 115,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
    100,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 117, 116, 112, 111, 105, 110, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,  97, 114, 103, 101, 116,  70, 101,
    101, 114,  97, 116, 101,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_afae52ad19d26b84 = b_afae52ad19d26b84.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_afae52ad19d26b84[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_afae52ad19d26b84[] = {0, 1, 2};
static const uint16_t i_afae52ad19d26b84[] = {0, 1, 2};
const ::capnp::_::RawSchema s_afae52ad19d26b84 = {
  0xafae52ad19d26b84, b_afae52ad19d26b84.words, 72, d_afae52ad19d26b84, m_afae52ad19d26b84,
  1, 3, i_afae52ad19d26b84, nullptr, nullptr, { &s_afae52ad19d26b84, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_f3217112077bcc43 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     67, 204, 123,   7,  18, 113,  33, 243,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
     99,  97, 108,  99, 117, 108,  97, 116,
    101,  73, 110, 100, 105, 118, 105, 100,
    117,  97, 108,  66, 117, 109, 112,  70,
    101, 101, 115,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     20, 163, 102, 123, 112,  31,   6, 182,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
     20, 163, 102, 123, 112,  31,   6, 182,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  23,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f3217112077bcc43 = b_f3217112077bcc43.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f3217112077bcc43[] = {
  &s_b6061f707b66a314,
};
static const uint16_t m_f3217112077bcc43[] = {0};
static const uint16_t i_f3217112077bcc43[] = {0};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_f3217112077bcc43[] = {
  { 16777216,  ::ipc::capnp::messages::PairInt64< ::capnp::Data>::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_f3217112077bcc43 = {
  0xf3217112077bcc43, b_f3217112077bcc43.words, 52, d_f3217112077bcc43, m_f3217112077bcc43,
  1, 1, i_f3217112077bcc43, nullptr, nullptr, { &s_f3217112077bcc43, nullptr, bd_f3217112077bcc43, 0, sizeof(bd_f3217112077bcc43) / sizeof(bd_f3217112077bcc43[0]), nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<71> b_81587a2e94140229 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     41,   2,  20, 148,  46, 122,  88, 129,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
     99,  97, 108,  99, 117, 108,  97, 116,
    101,  67, 111, 109,  98, 105, 110, 101,
    100,  66, 117, 109, 112,  70, 101, 101,
     36,  80,  97, 114,  97, 109, 115,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
    100,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 117, 116, 112, 111, 105, 110, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,  97, 114, 103, 101, 116,  70, 101,
    101, 114,  97, 116, 101,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_81587a2e94140229 = b_81587a2e94140229.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_81587a2e94140229[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_81587a2e94140229[] = {0, 1, 2};
static const uint16_t i_81587a2e94140229[] = {0, 1, 2};
const ::capnp::_::RawSchema s_81587a2e94140229 = {
  0x81587a2e94140229, b_81587a2e94140229.words, 71, d_81587a2e94140229, m_81587a2e94140229,
  1, 3, i_81587a2e94140229, nullptr, nullptr, { &s_81587a2e94140229, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_cfea2e86ed42ebe3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    227, 235,  66, 237, 134,  46, 234, 207,
     24,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
     99,  97, 108,  99, 117, 108,  97, 116,
    101,  67, 111, 109,  98, 105, 110, 101,
    100,  66, 117, 109, 112,  70, 101, 101,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,  64,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,  97, 115,  82, 101, 115, 117, 108,
    116,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cfea2e86ed42ebe3 = b_cfea2e86ed42ebe3.words;
#if !CAPNP_LITE
static const uint16_t m_cfea2e86ed42ebe3[] = {1, 0};
static const uint16_t i_cfea2e86ed42ebe3[] = {0, 1};
const ::capnp::_::RawSchema s_cfea2e86ed42ebe3 = {
  0xcfea2e86ed42ebe3, b_cfea2e86ed42ebe3.words, 52, nullptr, m_cfea2e86ed42ebe3,
  0, 2, i_cfea2e86ed42ebe3, nullptr, nullptr, { &s_cfea2e86ed42ebe3, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_d888b015c2fc0b1f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     31,  11, 252, 194,  21, 176, 136, 216,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    103, 101, 116,  80,  97,  99, 107,  97,
    103, 101,  76, 105, 109, 105, 116, 115,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d888b015c2fc0b1f = b_d888b015c2fc0b1f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d888b015c2fc0b1f[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_d888b015c2fc0b1f[] = {0};
static const uint16_t i_d888b015c2fc0b1f[] = {0};
const ::capnp::_::RawSchema s_d888b015c2fc0b1f = {
  0xd888b015c2fc0b1f, b_d888b015c2fc0b1f.words, 34, d_d888b015c2fc0b1f, m_d888b015c2fc0b1f,
  1, 1, i_d888b015c2fc0b1f, nullptr, nullptr, { &s_d888b015c2fc0b1f, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_bbd26e43c970f3ca = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    202, 243, 112, 201,  67, 110, 210, 187,
     24,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    103, 101, 116,  80,  97,  99, 107,  97,
    103, 101,  76, 105, 109, 105, 116, 115,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   0,   0,   0,   3,   0,   1,   0,
     60,   0,   0,   0,   2,   0,   1,   0,
     97, 110,  99, 101, 115, 116, 111, 114,
    115,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101, 115,  99, 101, 110, 100,  97,
    110, 116, 115,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bbd26e43c970f3ca = b_bbd26e43c970f3ca.words;
#if !CAPNP_LITE
static const uint16_t m_bbd26e43c970f3ca[] = {0, 1};
static const uint16_t i_bbd26e43c970f3ca[] = {0, 1};
const ::capnp::_::RawSchema s_bbd26e43c970f3ca = {
  0xbbd26e43c970f3ca, b_bbd26e43c970f3ca.words, 52, nullptr, m_bbd26e43c970f3ca,
  0, 2, i_bbd26e43c970f3ca, nullptr, nullptr, { &s_bbd26e43c970f3ca, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_903e01a761eb43e8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    232,  67, 235,  97, 167,   1,  62, 144,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
     99, 104, 101,  99, 107,  67, 104,  97,
    105, 110,  76, 105, 109, 105, 116, 115,
     36,  80,  97, 114,  97, 109, 115,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 120,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_903e01a761eb43e8 = b_903e01a761eb43e8.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_903e01a761eb43e8[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_903e01a761eb43e8[] = {0, 1};
static const uint16_t i_903e01a761eb43e8[] = {0, 1};
const ::capnp::_::RawSchema s_903e01a761eb43e8 = {
  0x903e01a761eb43e8, b_903e01a761eb43e8.words, 49, d_903e01a761eb43e8, m_903e01a761eb43e8,
  1, 2, i_903e01a761eb43e8, nullptr, nullptr, { &s_903e01a761eb43e8, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_94b212197c6f8400 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      0, 132, 111, 124,  25,  18, 178, 148,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
     99, 104, 101,  99, 107,  67, 104,  97,
    105, 110,  76, 105, 109, 105, 116, 115,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     12,  65, 244,  69, 169,  51,  90, 197,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_94b212197c6f8400 = b_94b212197c6f8400.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_94b212197c6f8400[] = {
  &s_c55a33a945f4410c,
};
static const uint16_t m_94b212197c6f8400[] = {0};
static const uint16_t i_94b212197c6f8400[] = {0};
const ::capnp::_::RawSchema s_94b212197c6f8400 = {
  0x94b212197c6f8400, b_94b212197c6f8400.words, 35, d_94b212197c6f8400, m_94b212197c6f8400,
  1, 1, i_94b212197c6f8400, nullptr, nullptr, { &s_94b212197c6f8400, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<82> b_99a850de2d74024c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     76,   2, 116,  45, 222,  80, 168, 153,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    101, 115, 116, 105, 109,  97, 116, 101,
     83, 109,  97, 114, 116,  70, 101, 101,
     36,  80,  97, 114,  97, 109, 115,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,  32,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,  33,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,   0,   0,   0,   3,   0,   1,   0,
    128,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 117, 109,  66, 108, 111,  99, 107,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 115, 101, 114, 118,  97,
    116, 105, 118, 101,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119,  97, 110, 116,  67,  97, 108,  99,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_99a850de2d74024c = b_99a850de2d74024c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_99a850de2d74024c[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_99a850de2d74024c[] = {2, 0, 1, 3};
static const uint16_t i_99a850de2d74024c[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_99a850de2d74024c = {
  0x99a850de2d74024c, b_99a850de2d74024c.words, 82, d_99a850de2d74024c, m_99a850de2d74024c,
  1, 4, i_99a850de2d74024c, nullptr, nullptr, { &s_99a850de2d74024c, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_a9e90a6c044e3fed = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    237,  63,  78,   4, 108,  10, 233, 169,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    101, 115, 116, 105, 109,  97, 116, 101,
     83, 109,  97, 114, 116,  70, 101, 101,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99,  97, 108,  99,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    143, 249,  99, 182, 149,  93,  87, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a9e90a6c044e3fed = b_a9e90a6c044e3fed.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a9e90a6c044e3fed[] = {
  &s_9c575d95b663f98f,
};
static const uint16_t m_a9e90a6c044e3fed[] = {0, 1};
static const uint16_t i_a9e90a6c044e3fed[] = {0, 1};
const ::capnp::_::RawSchema s_a9e90a6c044e3fed = {
  0xa9e90a6c044e3fed, b_a9e90a6c044e3fed.words, 50, d_a9e90a6c044e3fed, m_a9e90a6c044e3fed,
  1, 2, i_a9e90a6c044e3fed, nullptr, nullptr, { &s_a9e90a6c044e3fed, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_ecb09777f642a0fb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    251, 160,  66, 246, 119, 151, 176, 236,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    101, 115, 116, 105, 109,  97, 116, 101,
     77,  97, 120,  66, 108, 111,  99, 107,
    115,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ecb09777f642a0fb = b_ecb09777f642a0fb.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ecb09777f642a0fb[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_ecb09777f642a0fb[] = {0};
static const uint16_t i_ecb09777f642a0fb[] = {0};
const ::capnp::_::RawSchema s_ecb09777f642a0fb = {
  0xecb09777f642a0fb, b_ecb09777f642a0fb.words, 35, d_ecb09777f642a0fb, m_ecb09777f642a0fb,
  1, 1, i_ecb09777f642a0fb, nullptr, nullptr, { &s_ecb09777f642a0fb, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_e8598d179641a635 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     53, 166,  65, 150,  23, 141,  89, 232,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    101, 115, 116, 105, 109,  97, 116, 101,
     77,  97, 120,  66, 108, 111,  99, 107,
    115,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e8598d179641a635 = b_e8598d179641a635.words;
#if !CAPNP_LITE
static const uint16_t m_e8598d179641a635[] = {0};
static const uint16_t i_e8598d179641a635[] = {0};
const ::capnp::_::RawSchema s_e8598d179641a635 = {
  0xe8598d179641a635, b_e8598d179641a635.words, 35, nullptr, m_e8598d179641a635,
  0, 1, i_e8598d179641a635, nullptr, nullptr, { &s_e8598d179641a635, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_d57d2b05f815e833 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     51, 232,  21, 248,   5,  43, 125, 213,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    109, 101, 109, 112, 111, 111, 108,  77,
    105, 110,  70, 101, 101,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d57d2b05f815e833 = b_d57d2b05f815e833.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d57d2b05f815e833[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_d57d2b05f815e833[] = {0};
static const uint16_t i_d57d2b05f815e833[] = {0};
const ::capnp::_::RawSchema s_d57d2b05f815e833 = {
  0xd57d2b05f815e833, b_d57d2b05f815e833.words, 34, d_d57d2b05f815e833, m_d57d2b05f815e833,
  1, 1, i_d57d2b05f815e833, nullptr, nullptr, { &s_d57d2b05f815e833, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_a4169a4c771c080d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     13,   8,  28, 119,  76, 154,  22, 164,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    109, 101, 109, 112, 111, 111, 108,  77,
    105, 110,  70, 101, 101,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a4169a4c771c080d = b_a4169a4c771c080d.words;
#if !CAPNP_LITE
static const uint16_t m_a4169a4c771c080d[] = {0};
static const uint16_t i_a4169a4c771c080d[] = {0};
const ::capnp::_::RawSchema s_a4169a4c771c080d = {
  0xa4169a4c771c080d, b_a4169a4c771c080d.words, 34, nullptr, m_a4169a4c771c080d,
  0, 1, i_a4169a4c771c080d, nullptr, nullptr, { &s_a4169a4c771c080d, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_8d6c280c8a190a4a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     74,  10,  25, 138,  12,  40, 108, 141,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    114, 101, 108,  97, 121,  77, 105, 110,
     70, 101, 101,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8d6c280c8a190a4a = b_8d6c280c8a190a4a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8d6c280c8a190a4a[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_8d6c280c8a190a4a[] = {0};
static const uint16_t i_8d6c280c8a190a4a[] = {0};
const ::capnp::_::RawSchema s_8d6c280c8a190a4a = {
  0x8d6c280c8a190a4a, b_8d6c280c8a190a4a.words, 34, d_8d6c280c8a190a4a, m_8d6c280c8a190a4a,
  1, 1, i_8d6c280c8a190a4a, nullptr, nullptr, { &s_8d6c280c8a190a4a, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_cabc9d37f47be255 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     85, 226, 123, 244,  55, 157, 188, 202,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    114, 101, 108,  97, 121,  77, 105, 110,
     70, 101, 101,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cabc9d37f47be255 = b_cabc9d37f47be255.words;
#if !CAPNP_LITE
static const uint16_t m_cabc9d37f47be255[] = {0};
static const uint16_t i_cabc9d37f47be255[] = {0};
const ::capnp::_::RawSchema s_cabc9d37f47be255 = {
  0xcabc9d37f47be255, b_cabc9d37f47be255.words, 34, nullptr, m_cabc9d37f47be255,
  0, 1, i_cabc9d37f47be255, nullptr, nullptr, { &s_cabc9d37f47be255, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_ca4402cf19cd76a0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    160, 118, 205,  25, 207,   2,  68, 202,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    114, 101, 108,  97, 121,  73, 110,  99,
    114, 101, 109, 101, 110, 116,  97, 108,
     70, 101, 101,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ca4402cf19cd76a0 = b_ca4402cf19cd76a0.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ca4402cf19cd76a0[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_ca4402cf19cd76a0[] = {0};
static const uint16_t i_ca4402cf19cd76a0[] = {0};
const ::capnp::_::RawSchema s_ca4402cf19cd76a0 = {
  0xca4402cf19cd76a0, b_ca4402cf19cd76a0.words, 35, d_ca4402cf19cd76a0, m_ca4402cf19cd76a0,
  1, 1, i_ca4402cf19cd76a0, nullptr, nullptr, { &s_ca4402cf19cd76a0, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_c6c469852cbc148f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    143,  20, 188,  44, 133, 105, 196, 198,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    114, 101, 108,  97, 121,  73, 110,  99,
    114, 101, 109, 101, 110, 116,  97, 108,
     70, 101, 101,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c6c469852cbc148f = b_c6c469852cbc148f.words;
#if !CAPNP_LITE
static const uint16_t m_c6c469852cbc148f[] = {0};
static const uint16_t i_c6c469852cbc148f[] = {0};
const ::capnp::_::RawSchema s_c6c469852cbc148f = {
  0xc6c469852cbc148f, b_c6c469852cbc148f.words, 35, nullptr, m_c6c469852cbc148f,
  0, 1, i_c6c469852cbc148f, nullptr, nullptr, { &s_c6c469852cbc148f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_e2e96a91c6e0f853 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     83, 248, 224, 198, 145, 106, 233, 226,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    114, 101, 108,  97, 121,  68, 117, 115,
    116,  70, 101, 101,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e2e96a91c6e0f853 = b_e2e96a91c6e0f853.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e2e96a91c6e0f853[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_e2e96a91c6e0f853[] = {0};
static const uint16_t i_e2e96a91c6e0f853[] = {0};
const ::capnp::_::RawSchema s_e2e96a91c6e0f853 = {
  0xe2e96a91c6e0f853, b_e2e96a91c6e0f853.words, 34, d_e2e96a91c6e0f853, m_e2e96a91c6e0f853,
  1, 1, i_e2e96a91c6e0f853, nullptr, nullptr, { &s_e2e96a91c6e0f853, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_d114851be2a468c4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    196, 104, 164, 226,  27, 133,  20, 209,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    114, 101, 108,  97, 121,  68, 117, 115,
    116,  70, 101, 101,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d114851be2a468c4 = b_d114851be2a468c4.words;
#if !CAPNP_LITE
static const uint16_t m_d114851be2a468c4[] = {0};
static const uint16_t i_d114851be2a468c4[] = {0};
const ::capnp::_::RawSchema s_d114851be2a468c4 = {
  0xd114851be2a468c4, b_d114851be2a468c4.words, 34, nullptr, m_d114851be2a468c4,
  0, 1, i_d114851be2a468c4, nullptr, nullptr, { &s_d114851be2a468c4, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_a02d0d464eb9790f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     15, 121, 185,  78,  70,  13,  45, 160,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    104,  97, 118, 101,  80, 114, 117, 110,
    101, 100,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a02d0d464eb9790f = b_a02d0d464eb9790f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a02d0d464eb9790f[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_a02d0d464eb9790f[] = {0};
static const uint16_t i_a02d0d464eb9790f[] = {0};
const ::capnp::_::RawSchema s_a02d0d464eb9790f = {
  0xa02d0d464eb9790f, b_a02d0d464eb9790f.words, 34, d_a02d0d464eb9790f, m_a02d0d464eb9790f,
  1, 1, i_a02d0d464eb9790f, nullptr, nullptr, { &s_a02d0d464eb9790f, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_bcc779d9f1a3be56 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     86, 190, 163, 241, 217, 121, 199, 188,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    104,  97, 118, 101,  80, 114, 117, 110,
    101, 100,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bcc779d9f1a3be56 = b_bcc779d9f1a3be56.words;
#if !CAPNP_LITE
static const uint16_t m_bcc779d9f1a3be56[] = {0};
static const uint16_t i_bcc779d9f1a3be56[] = {0};
const ::capnp::_::RawSchema s_bcc779d9f1a3be56 = {
  0xbcc779d9f1a3be56, b_bcc779d9f1a3be56.words, 34, nullptr, m_bcc779d9f1a3be56,
  0, 1, i_bcc779d9f1a3be56, nullptr, nullptr, { &s_bcc779d9f1a3be56, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_8f0563e4e96da276 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    118, 162, 109, 233, 228,  99,   5, 143,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    103, 101, 116,  80, 114, 117, 110, 101,
     72, 101, 105, 103, 104, 116,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8f0563e4e96da276 = b_8f0563e4e96da276.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8f0563e4e96da276[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_8f0563e4e96da276[] = {0};
static const uint16_t i_8f0563e4e96da276[] = {0};
const ::capnp::_::RawSchema s_8f0563e4e96da276 = {
  0x8f0563e4e96da276, b_8f0563e4e96da276.words, 34, d_8f0563e4e96da276, m_8f0563e4e96da276,
  1, 1, i_8f0563e4e96da276, nullptr, nullptr, { &s_8f0563e4e96da276, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_cc3025ced81bec22 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     34, 236,  27, 216, 206,  37,  48, 204,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    103, 101, 116,  80, 114, 117, 110, 101,
     72, 101, 105, 103, 104, 116,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,  32,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,  97, 115,  82, 101, 115, 117, 108,
    116,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cc3025ced81bec22 = b_cc3025ced81bec22.words;
#if !CAPNP_LITE
static const uint16_t m_cc3025ced81bec22[] = {1, 0};
static const uint16_t i_cc3025ced81bec22[] = {0, 1};
const ::capnp::_::RawSchema s_cc3025ced81bec22 = {
  0xcc3025ced81bec22, b_cc3025ced81bec22.words, 50, nullptr, m_cc3025ced81bec22,
  0, 2, i_cc3025ced81bec22, nullptr, nullptr, { &s_cc3025ced81bec22, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_b87b455494bb15e3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    227,  21, 187, 148,  84,  69, 123, 184,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    105, 115,  82, 101,  97, 100, 121,  84,
    111,  66, 114, 111,  97, 100,  99,  97,
    115, 116,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b87b455494bb15e3 = b_b87b455494bb15e3.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b87b455494bb15e3[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_b87b455494bb15e3[] = {0};
static const uint16_t i_b87b455494bb15e3[] = {0};
const ::capnp::_::RawSchema s_b87b455494bb15e3 = {
  0xb87b455494bb15e3, b_b87b455494bb15e3.words, 35, d_b87b455494bb15e3, m_b87b455494bb15e3,
  1, 1, i_b87b455494bb15e3, nullptr, nullptr, { &s_b87b455494bb15e3, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_e3862c447c3467c8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    200, 103,  52, 124,  68,  44, 134, 227,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    105, 115,  82, 101,  97, 100, 121,  84,
    111,  66, 114, 111,  97, 100,  99,  97,
    115, 116,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e3862c447c3467c8 = b_e3862c447c3467c8.words;
#if !CAPNP_LITE
static const uint16_t m_e3862c447c3467c8[] = {0};
static const uint16_t i_e3862c447c3467c8[] = {0};
const ::capnp::_::RawSchema s_e3862c447c3467c8 = {
  0xe3862c447c3467c8, b_e3862c447c3467c8.words, 35, nullptr, m_e3862c447c3467c8,
  0, 1, i_e3862c447c3467c8, nullptr, nullptr, { &s_e3862c447c3467c8, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_9a55784320a8b4ad = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    173, 180, 168,  32,  67, 120,  85, 154,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    105, 115,  73, 110, 105, 116, 105,  97,
    108,  66, 108, 111,  99, 107,  68, 111,
    119, 110, 108, 111,  97, 100,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9a55784320a8b4ad = b_9a55784320a8b4ad.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9a55784320a8b4ad[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_9a55784320a8b4ad[] = {0};
static const uint16_t i_9a55784320a8b4ad[] = {0};
const ::capnp::_::RawSchema s_9a55784320a8b4ad = {
  0x9a55784320a8b4ad, b_9a55784320a8b4ad.words, 35, d_9a55784320a8b4ad, m_9a55784320a8b4ad,
  1, 1, i_9a55784320a8b4ad, nullptr, nullptr, { &s_9a55784320a8b4ad, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_ef6664aea6ea9dd2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    210, 157, 234, 166, 174, 100, 102, 239,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    105, 115,  73, 110, 105, 116, 105,  97,
    108,  66, 108, 111,  99, 107,  68, 111,
    119, 110, 108, 111,  97, 100,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ef6664aea6ea9dd2 = b_ef6664aea6ea9dd2.words;
#if !CAPNP_LITE
static const uint16_t m_ef6664aea6ea9dd2[] = {0};
static const uint16_t i_ef6664aea6ea9dd2[] = {0};
const ::capnp::_::RawSchema s_ef6664aea6ea9dd2 = {
  0xef6664aea6ea9dd2, b_ef6664aea6ea9dd2.words, 35, nullptr, m_ef6664aea6ea9dd2,
  0, 1, i_ef6664aea6ea9dd2, nullptr, nullptr, { &s_ef6664aea6ea9dd2, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_8639d472fa766702 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      2, 103, 118, 250, 114, 212,  57, 134,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    115, 104, 117, 116, 100, 111, 119, 110,
     82, 101, 113, 117, 101, 115, 116, 101,
    100,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8639d472fa766702 = b_8639d472fa766702.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8639d472fa766702[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_8639d472fa766702[] = {0};
static const uint16_t i_8639d472fa766702[] = {0};
const ::capnp::_::RawSchema s_8639d472fa766702 = {
  0x8639d472fa766702, b_8639d472fa766702.words, 35, d_8639d472fa766702, m_8639d472fa766702,
  1, 1, i_8639d472fa766702, nullptr, nullptr, { &s_8639d472fa766702, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_8631e66b88321dbd = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    189,  29,  50, 136, 107, 230,  49, 134,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    115, 104, 117, 116, 100, 111, 119, 110,
     82, 101, 113, 117, 101, 115, 116, 101,
    100,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8631e66b88321dbd = b_8631e66b88321dbd.words;
#if !CAPNP_LITE
static const uint16_t m_8631e66b88321dbd[] = {0};
static const uint16_t i_8631e66b88321dbd[] = {0};
const ::capnp::_::RawSchema s_8631e66b88321dbd = {
  0x8631e66b88321dbd, b_8631e66b88321dbd.words, 35, nullptr, m_8631e66b88321dbd,
  0, 1, i_8631e66b88321dbd, nullptr, nullptr, { &s_8631e66b88321dbd, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_9be2b99e6805ed93 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    147, 237,   5, 104, 158, 185, 226, 155,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    105, 110, 105, 116,  77, 101, 115, 115,
     97, 103, 101,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 101, 115, 115,  97, 103, 101,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9be2b99e6805ed93 = b_9be2b99e6805ed93.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9be2b99e6805ed93[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_9be2b99e6805ed93[] = {0, 1};
static const uint16_t i_9be2b99e6805ed93[] = {0, 1};
const ::capnp::_::RawSchema s_9be2b99e6805ed93 = {
  0x9be2b99e6805ed93, b_9be2b99e6805ed93.words, 49, d_9be2b99e6805ed93, m_9be2b99e6805ed93,
  1, 2, i_9be2b99e6805ed93, nullptr, nullptr, { &s_9be2b99e6805ed93, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_a41100dace8f6862 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     98, 104, 143, 206, 218,   0,  17, 164,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    105, 110, 105, 116,  77, 101, 115, 115,
     97, 103, 101,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a41100dace8f6862 = b_a41100dace8f6862.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_a41100dace8f6862 = {
  0xa41100dace8f6862, b_a41100dace8f6862.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_a41100dace8f6862, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_fb20e81fad00db17 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     23, 219,   0, 173,  31, 232,  32, 251,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    105, 110, 105, 116,  87,  97, 114, 110,
    105, 110, 103,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 101, 115, 115,  97, 103, 101,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    184, 230, 192, 185,  48, 189, 181, 138,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fb20e81fad00db17 = b_fb20e81fad00db17.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fb20e81fad00db17[] = {
  &s_8ab5bd30b9c0e6b8,
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_fb20e81fad00db17[] = {0, 1};
static const uint16_t i_fb20e81fad00db17[] = {0, 1};
const ::capnp::_::RawSchema s_fb20e81fad00db17 = {
  0xfb20e81fad00db17, b_fb20e81fad00db17.words, 49, d_fb20e81fad00db17, m_fb20e81fad00db17,
  2, 2, i_fb20e81fad00db17, nullptr, nullptr, { &s_fb20e81fad00db17, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_a2fc06de1146ab56 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     86, 171,  70,  17, 222,   6, 252, 162,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    105, 110, 105, 116,  87,  97, 114, 110,
    105, 110, 103,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a2fc06de1146ab56 = b_a2fc06de1146ab56.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_a2fc06de1146ab56 = {
  0xa2fc06de1146ab56, b_a2fc06de1146ab56.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_a2fc06de1146ab56, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_a2255cdd442070dc = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    220, 112,  32,  68, 221,  92,  37, 162,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    105, 110, 105, 116,  69, 114, 114, 111,
    114,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 101, 115, 115,  97, 103, 101,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    184, 230, 192, 185,  48, 189, 181, 138,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a2255cdd442070dc = b_a2255cdd442070dc.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a2255cdd442070dc[] = {
  &s_8ab5bd30b9c0e6b8,
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_a2255cdd442070dc[] = {0, 1};
static const uint16_t i_a2255cdd442070dc[] = {0, 1};
const ::capnp::_::RawSchema s_a2255cdd442070dc = {
  0xa2255cdd442070dc, b_a2255cdd442070dc.words, 49, d_a2255cdd442070dc, m_a2255cdd442070dc,
  2, 2, i_a2255cdd442070dc, nullptr, nullptr, { &s_a2255cdd442070dc, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_806121fc88fc0ffa = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    250,  15, 252, 136, 252,  33,  97, 128,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    105, 110, 105, 116,  69, 114, 114, 111,
    114,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_806121fc88fc0ffa = b_806121fc88fc0ffa.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_806121fc88fc0ffa = {
  0x806121fc88fc0ffa, b_806121fc88fc0ffa.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_806121fc88fc0ffa, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<81> b_b9fd6e0c0b821bcc = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    204,  27, 130,  11,  12, 110, 253, 185,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    115, 104, 111, 119,  80, 114, 111, 103,
    114, 101, 115, 115,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,  32,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,   0,   0,   0,   3,   0,   1,   0,
    124,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 105, 116, 108, 101,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 111, 103, 114, 101, 115, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 115, 117, 109, 101,  80, 111,
    115, 115, 105,  98, 108, 101,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b9fd6e0c0b821bcc = b_b9fd6e0c0b821bcc.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b9fd6e0c0b821bcc[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_b9fd6e0c0b821bcc[] = {0, 2, 3, 1};
static const uint16_t i_b9fd6e0c0b821bcc[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_b9fd6e0c0b821bcc = {
  0xb9fd6e0c0b821bcc, b_b9fd6e0c0b821bcc.words, 81, d_b9fd6e0c0b821bcc, m_b9fd6e0c0b821bcc,
  1, 4, i_b9fd6e0c0b821bcc, nullptr, nullptr, { &s_b9fd6e0c0b821bcc, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_d14ecbdbc7a11b28 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     40,  27, 161, 199, 219, 203,  78, 209,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    115, 104, 111, 119,  80, 114, 111, 103,
    114, 101, 115, 115,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d14ecbdbc7a11b28 = b_d14ecbdbc7a11b28.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d14ecbdbc7a11b28 = {
  0xd14ecbdbc7a11b28, b_d14ecbdbc7a11b28.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d14ecbdbc7a11b28, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_871e82b6ddcad596 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    150, 213, 202, 221, 182, 130,  30, 135,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    104,  97, 110, 100, 108, 101,  78, 111,
    116, 105, 102, 105,  99,  97, 116, 105,
    111, 110, 115,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 111, 116, 105, 102, 105,  99,  97,
    116, 105, 111, 110, 115,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     57, 144,  33, 186,  72, 219, 201, 154,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_871e82b6ddcad596 = b_871e82b6ddcad596.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_871e82b6ddcad596[] = {
  &s_9ac9db48ba219039,
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_871e82b6ddcad596[] = {0, 1};
static const uint16_t i_871e82b6ddcad596[] = {0, 1};
const ::capnp::_::RawSchema s_871e82b6ddcad596 = {
  0x871e82b6ddcad596, b_871e82b6ddcad596.words, 51, d_871e82b6ddcad596, m_871e82b6ddcad596,
  2, 2, i_871e82b6ddcad596, nullptr, nullptr, { &s_871e82b6ddcad596, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_a8ea11695815410e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     14,  65,  21,  88, 105,  17, 234, 168,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    104,  97, 110, 100, 108, 101,  78, 111,
    116, 105, 102, 105,  99,  97, 116, 105,
    111, 110, 115,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     85,  63,  38,  52, 141, 114,   8, 234,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a8ea11695815410e = b_a8ea11695815410e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a8ea11695815410e[] = {
  &s_ea08728d34263f55,
};
static const uint16_t m_a8ea11695815410e[] = {0};
static const uint16_t i_a8ea11695815410e[] = {0};
const ::capnp::_::RawSchema s_a8ea11695815410e = {
  0xa8ea11695815410e, b_a8ea11695815410e.words, 35, d_a8ea11695815410e, m_a8ea11695815410e,
  1, 1, i_a8ea11695815410e, nullptr, nullptr, { &s_a8ea11695815410e, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_e9330ca0a091134e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     78,  19, 145, 160, 160,  12,  51, 233,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    119,  97, 105, 116,  70, 111, 114,  78,
    111, 116, 105, 102, 105,  99,  97, 116,
    105, 111, 110, 115,  73, 102,  84, 105,
    112,  67, 104,  97, 110, 103, 101, 100,
     36,  80,  97, 114,  97, 109, 115,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 108, 100,  84, 105, 112,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e9330ca0a091134e = b_e9330ca0a091134e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e9330ca0a091134e[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_e9330ca0a091134e[] = {0, 1};
static const uint16_t i_e9330ca0a091134e[] = {0, 1};
const ::capnp::_::RawSchema s_e9330ca0a091134e = {
  0xe9330ca0a091134e, b_e9330ca0a091134e.words, 51, d_e9330ca0a091134e, m_e9330ca0a091134e,
  1, 2, i_e9330ca0a091134e, nullptr, nullptr, { &s_e9330ca0a091134e, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_e1e38afc108e6e9e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    158, 110, 142,  16, 252, 138, 227, 225,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    119,  97, 105, 116,  70, 111, 114,  78,
    111, 116, 105, 102, 105,  99,  97, 116,
    105, 111, 110, 115,  73, 102,  84, 105,
    112,  67, 104,  97, 110, 103, 101, 100,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e1e38afc108e6e9e = b_e1e38afc108e6e9e.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e1e38afc108e6e9e = {
  0xe1e38afc108e6e9e, b_e1e38afc108e6e9e.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e1e38afc108e6e9e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_9f5d40ca3c7aa8ce = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    206, 168, 122,  60, 202,  64,  93, 159,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    104,  97, 110, 100, 108, 101,  82, 112,
     99,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109,  97, 110, 100,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    154, 133, 162,  13,  16, 127,  68, 207,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9f5d40ca3c7aa8ce = b_9f5d40ca3c7aa8ce.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9f5d40ca3c7aa8ce[] = {
  &s_9c44e6645d0b22c6,
  &s_cf447f100da2859a,
};
static const uint16_t m_9f5d40ca3c7aa8ce[] = {1, 0};
static const uint16_t i_9f5d40ca3c7aa8ce[] = {0, 1};
const ::capnp::_::RawSchema s_9f5d40ca3c7aa8ce = {
  0x9f5d40ca3c7aa8ce, b_9f5d40ca3c7aa8ce.words, 49, d_9f5d40ca3c7aa8ce, m_9f5d40ca3c7aa8ce,
  2, 2, i_9f5d40ca3c7aa8ce, nullptr, nullptr, { &s_9f5d40ca3c7aa8ce, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_ca9b4173d6555a3a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     58,  90,  85, 214, 115,  65, 155, 202,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    104,  97, 110, 100, 108, 101,  82, 112,
     99,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     85,  63,  38,  52, 141, 114,   8, 234,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ca9b4173d6555a3a = b_ca9b4173d6555a3a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ca9b4173d6555a3a[] = {
  &s_ea08728d34263f55,
};
static const uint16_t m_ca9b4173d6555a3a[] = {0};
static const uint16_t i_ca9b4173d6555a3a[] = {0};
const ::capnp::_::RawSchema s_ca9b4173d6555a3a = {
  0xca9b4173d6555a3a, b_ca9b4173d6555a3a.words, 34, d_ca9b4173d6555a3a, m_ca9b4173d6555a3a,
  1, 1, i_ca9b4173d6555a3a, nullptr, nullptr, { &s_ca9b4173d6555a3a, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_8a7cb38770ea1dc7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    199,  29, 234, 112, 135, 179, 124, 138,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    114, 112,  99,  69, 110,  97,  98, 108,
    101,  68, 101, 112, 114, 101,  99,  97,
    116, 101, 100,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 101, 116, 104, 111, 100,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8a7cb38770ea1dc7 = b_8a7cb38770ea1dc7.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8a7cb38770ea1dc7[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_8a7cb38770ea1dc7[] = {0, 1};
static const uint16_t i_8a7cb38770ea1dc7[] = {0, 1};
const ::capnp::_::RawSchema s_8a7cb38770ea1dc7 = {
  0x8a7cb38770ea1dc7, b_8a7cb38770ea1dc7.words, 50, d_8a7cb38770ea1dc7, m_8a7cb38770ea1dc7,
  1, 2, i_8a7cb38770ea1dc7, nullptr, nullptr, { &s_8a7cb38770ea1dc7, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_cb2d74a781da45fb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    251,  69, 218, 129, 167, 116,  45, 203,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    114, 112,  99,  69, 110,  97,  98, 108,
    101,  68, 101, 112, 114, 101,  99,  97,
    116, 101, 100,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cb2d74a781da45fb = b_cb2d74a781da45fb.words;
#if !CAPNP_LITE
static const uint16_t m_cb2d74a781da45fb[] = {0};
static const uint16_t i_cb2d74a781da45fb[] = {0};
const ::capnp::_::RawSchema s_cb2d74a781da45fb = {
  0xcb2d74a781da45fb, b_cb2d74a781da45fb.words, 35, nullptr, m_cb2d74a781da45fb,
  0, 1, i_cb2d74a781da45fb, nullptr, nullptr, { &s_cb2d74a781da45fb, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<79> b_d6c79a2b011687a4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    164, 135,  22,   1,  43, 154, 199, 214,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    114, 112,  99,  82, 117, 110,  76,  97,
    116, 101, 114,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 110,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    232, 188,  64,  29, 105,  50,  13, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101,  99, 111, 110, 100, 115,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d6c79a2b011687a4 = b_d6c79a2b011687a4.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d6c79a2b011687a4[] = {
  &s_9c44e6645d0b22c6,
  &s_b90d32691d40bce8,
};
static const uint16_t m_d6c79a2b011687a4[] = {0, 2, 1, 3};
static const uint16_t i_d6c79a2b011687a4[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_d6c79a2b011687a4 = {
  0xd6c79a2b011687a4, b_d6c79a2b011687a4.words, 79, d_d6c79a2b011687a4, m_d6c79a2b011687a4,
  2, 4, i_d6c79a2b011687a4, nullptr, nullptr, { &s_d6c79a2b011687a4, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_f4df0de0d5fcfa9f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    159, 250, 252, 213, 224,  13, 223, 244,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    114, 112,  99,  82, 117, 110,  76,  97,
    116, 101, 114,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f4df0de0d5fcfa9f = b_f4df0de0d5fcfa9f.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f4df0de0d5fcfa9f = {
  0xf4df0de0d5fcfa9f, b_f4df0de0d5fcfa9f.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f4df0de0d5fcfa9f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_9cab47bb6fb688ed = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    237, 136, 182, 111, 187,  71, 171, 156,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    103, 101, 116,  83, 101, 116, 116, 105,
    110, 103,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9cab47bb6fb688ed = b_9cab47bb6fb688ed.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9cab47bb6fb688ed[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_9cab47bb6fb688ed[] = {0, 1};
static const uint16_t i_9cab47bb6fb688ed[] = {0, 1};
const ::capnp::_::RawSchema s_9cab47bb6fb688ed = {
  0x9cab47bb6fb688ed, b_9cab47bb6fb688ed.words, 49, d_9cab47bb6fb688ed, m_9cab47bb6fb688ed,
  1, 2, i_9cab47bb6fb688ed, nullptr, nullptr, { &s_9cab47bb6fb688ed, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_f46b18464e6581b4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    180, 129, 101,  78,  70,  24, 107, 244,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    103, 101, 116,  83, 101, 116, 116, 105,
    110, 103,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f46b18464e6581b4 = b_f46b18464e6581b4.words;
#if !CAPNP_LITE
static const uint16_t m_f46b18464e6581b4[] = {0};
static const uint16_t i_f46b18464e6581b4[] = {0};
const ::capnp::_::RawSchema s_f46b18464e6581b4 = {
  0xf46b18464e6581b4, b_f46b18464e6581b4.words, 34, nullptr, m_f46b18464e6581b4,
  0, 1, i_f46b18464e6581b4, nullptr, nullptr, { &s_f46b18464e6581b4, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_edc5de233d78be56 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     86, 190, 120,  61,  35, 222, 197, 237,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    103, 101, 116,  83, 101, 116, 116, 105,
    110, 103, 115,  76, 105, 115, 116,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_edc5de233d78be56 = b_edc5de233d78be56.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_edc5de233d78be56[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_edc5de233d78be56[] = {0, 1};
static const uint16_t i_edc5de233d78be56[] = {0, 1};
const ::capnp::_::RawSchema s_edc5de233d78be56 = {
  0xedc5de233d78be56, b_edc5de233d78be56.words, 49, d_edc5de233d78be56, m_edc5de233d78be56,
  1, 2, i_edc5de233d78be56, nullptr, nullptr, { &s_edc5de233d78be56, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_e433806291673abc = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    188,  58, 103, 145,  98, 128,  51, 228,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    103, 101, 116,  83, 101, 116, 116, 105,
    110, 103, 115,  76, 105, 115, 116,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e433806291673abc = b_e433806291673abc.words;
#if !CAPNP_LITE
static const uint16_t m_e433806291673abc[] = {0};
static const uint16_t i_e433806291673abc[] = {0};
const ::capnp::_::RawSchema s_e433806291673abc = {
  0xe433806291673abc, b_e433806291673abc.words, 38, nullptr, m_e433806291673abc,
  0, 1, i_e433806291673abc, nullptr, nullptr, { &s_e433806291673abc, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_b0739496216e3f0a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     10,  63, 110,  33, 150, 148, 115, 176,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    103, 101, 116,  82, 119,  83, 101, 116,
    116, 105, 110, 103,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b0739496216e3f0a = b_b0739496216e3f0a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b0739496216e3f0a[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_b0739496216e3f0a[] = {0, 1};
static const uint16_t i_b0739496216e3f0a[] = {0, 1};
const ::capnp::_::RawSchema s_b0739496216e3f0a = {
  0xb0739496216e3f0a, b_b0739496216e3f0a.words, 49, d_b0739496216e3f0a, m_b0739496216e3f0a,
  1, 2, i_b0739496216e3f0a, nullptr, nullptr, { &s_b0739496216e3f0a, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_c3290a8c65fc071a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     26,   7, 252, 101, 140,  10,  41, 195,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    103, 101, 116,  82, 119,  83, 101, 116,
    116, 105, 110, 103,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c3290a8c65fc071a = b_c3290a8c65fc071a.words;
#if !CAPNP_LITE
static const uint16_t m_c3290a8c65fc071a[] = {0};
static const uint16_t i_c3290a8c65fc071a[] = {0};
const ::capnp::_::RawSchema s_c3290a8c65fc071a = {
  0xc3290a8c65fc071a, b_c3290a8c65fc071a.words, 34, nullptr, m_c3290a8c65fc071a,
  0, 1, i_c3290a8c65fc071a, nullptr, nullptr, { &s_c3290a8c65fc071a, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<64> b_991e051a66900948 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     72,   9, 144, 102,  26,   5,  30, 153,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    117, 112, 100,  97, 116, 101,  82, 119,
     83, 101, 116, 116, 105, 110, 103,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 112, 100,  97, 116, 101,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    197, 190,  68, 251, 100, 123,  94, 153,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_991e051a66900948 = b_991e051a66900948.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_991e051a66900948[] = {
  &s_995e7b64fb44bec5,
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_991e051a66900948[] = {0, 1, 2};
static const uint16_t i_991e051a66900948[] = {0, 1, 2};
const ::capnp::_::RawSchema s_991e051a66900948 = {
  0x991e051a66900948, b_991e051a66900948.words, 64, d_991e051a66900948, m_991e051a66900948,
  2, 3, i_991e051a66900948, nullptr, nullptr, { &s_991e051a66900948, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_b84228226750d1ae = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    174, 209,  80, 103,  34,  40,  66, 184,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    117, 112, 100,  97, 116, 101,  82, 119,
     83, 101, 116, 116, 105, 110, 103,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b84228226750d1ae = b_b84228226750d1ae.words;
#if !CAPNP_LITE
static const uint16_t m_b84228226750d1ae[] = {0};
static const uint16_t i_b84228226750d1ae[] = {0};
const ::capnp::_::RawSchema s_b84228226750d1ae = {
  0xb84228226750d1ae, b_b84228226750d1ae.words, 34, nullptr, m_b84228226750d1ae,
  0, 1, i_b84228226750d1ae, nullptr, nullptr, { &s_b84228226750d1ae, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<80> b_abbfa71ec513d736 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     54, 215,  19, 197,  30, 167, 191, 171,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    111, 118, 101, 114, 119, 114, 105, 116,
    101,  82, 119,  83, 101, 116, 116, 105,
    110, 103,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  99, 116, 105, 111, 110,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_abbfa71ec513d736 = b_abbfa71ec513d736.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_abbfa71ec513d736[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_abbfa71ec513d736[] = {3, 0, 1, 2};
static const uint16_t i_abbfa71ec513d736[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_abbfa71ec513d736 = {
  0xabbfa71ec513d736, b_abbfa71ec513d736.words, 80, d_abbfa71ec513d736, m_abbfa71ec513d736,
  1, 4, i_abbfa71ec513d736, nullptr, nullptr, { &s_abbfa71ec513d736, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_f43104fc2dce8958 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     88, 137, 206,  45, 252,   4,  49, 244,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    111, 118, 101, 114, 119, 114, 105, 116,
    101,  82, 119,  83, 101, 116, 116, 105,
    110, 103,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f43104fc2dce8958 = b_f43104fc2dce8958.words;
#if !CAPNP_LITE
static const uint16_t m_f43104fc2dce8958[] = {0};
static const uint16_t i_f43104fc2dce8958[] = {0};
const ::capnp::_::RawSchema s_f43104fc2dce8958 = {
  0xf43104fc2dce8958, b_f43104fc2dce8958.words, 35, nullptr, m_f43104fc2dce8958,
  0, 1, i_f43104fc2dce8958, nullptr, nullptr, { &s_f43104fc2dce8958, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<64> b_9a96c8b9d2494f8e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    142,  79,  73, 210, 185, 200, 150, 154,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    100, 101, 108, 101, 116, 101,  82, 119,
     83, 101, 116, 116, 105, 110, 103, 115,
     36,  80,  97, 114,  97, 109, 115,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  99, 116, 105, 111, 110,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9a96c8b9d2494f8e = b_9a96c8b9d2494f8e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9a96c8b9d2494f8e[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_9a96c8b9d2494f8e[] = {2, 0, 1};
static const uint16_t i_9a96c8b9d2494f8e[] = {0, 1, 2};
const ::capnp::_::RawSchema s_9a96c8b9d2494f8e = {
  0x9a96c8b9d2494f8e, b_9a96c8b9d2494f8e.words, 64, d_9a96c8b9d2494f8e, m_9a96c8b9d2494f8e,
  1, 3, i_9a96c8b9d2494f8e, nullptr, nullptr, { &s_9a96c8b9d2494f8e, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_dd00f6ed4c209748 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     72, 151,  32,  76, 237, 246,   0, 221,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    100, 101, 108, 101, 116, 101,  82, 119,
     83, 101, 116, 116, 105, 110, 103, 115,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dd00f6ed4c209748 = b_dd00f6ed4c209748.words;
#if !CAPNP_LITE
static const uint16_t m_dd00f6ed4c209748[] = {0};
static const uint16_t i_dd00f6ed4c209748[] = {0};
const ::capnp::_::RawSchema s_dd00f6ed4c209748 = {
  0xdd00f6ed4c209748, b_dd00f6ed4c209748.words, 35, nullptr, m_dd00f6ed4c209748,
  0, 1, i_dd00f6ed4c209748, nullptr, nullptr, { &s_dd00f6ed4c209748, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_b6fa4c3027bfc6e9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    233, 198, 191,  39,  48,  76, 250, 182,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    114, 101, 113, 117, 101, 115, 116,  77,
    101, 109, 112, 111, 111, 108,  84, 114,
     97, 110, 115,  97,  99, 116, 105, 111,
    110, 115,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 111, 116, 105, 102, 105,  99,  97,
    116, 105, 111, 110, 115,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     57, 144,  33, 186,  72, 219, 201, 154,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b6fa4c3027bfc6e9 = b_b6fa4c3027bfc6e9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b6fa4c3027bfc6e9[] = {
  &s_9ac9db48ba219039,
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_b6fa4c3027bfc6e9[] = {0, 1};
static const uint16_t i_b6fa4c3027bfc6e9[] = {0, 1};
const ::capnp::_::RawSchema s_b6fa4c3027bfc6e9 = {
  0xb6fa4c3027bfc6e9, b_b6fa4c3027bfc6e9.words, 52, d_b6fa4c3027bfc6e9, m_b6fa4c3027bfc6e9,
  2, 2, i_b6fa4c3027bfc6e9, nullptr, nullptr, { &s_b6fa4c3027bfc6e9, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_c1fbd52dae69b747 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     71, 183, 105, 174,  45, 213, 251, 193,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    114, 101, 113, 117, 101, 115, 116,  77,
    101, 109, 112, 111, 111, 108,  84, 114,
     97, 110, 115,  97,  99, 116, 105, 111,
    110, 115,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c1fbd52dae69b747 = b_c1fbd52dae69b747.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_c1fbd52dae69b747 = {
  0xc1fbd52dae69b747, b_c1fbd52dae69b747.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_c1fbd52dae69b747, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_abb6f32342180bb2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    178,  11,  24,  66,  35, 243, 182, 171,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    104,  97, 115,  65, 115, 115, 117, 109,
    101, 100,  86,  97, 108, 105, 100,  67,
    104,  97, 105, 110,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_abb6f32342180bb2 = b_abb6f32342180bb2.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_abb6f32342180bb2[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_abb6f32342180bb2[] = {0};
static const uint16_t i_abb6f32342180bb2[] = {0};
const ::capnp::_::RawSchema s_abb6f32342180bb2 = {
  0xabb6f32342180bb2, b_abb6f32342180bb2.words, 35, d_abb6f32342180bb2, m_abb6f32342180bb2,
  1, 1, i_abb6f32342180bb2, nullptr, nullptr, { &s_abb6f32342180bb2, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_e1a07796aec1df8e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    142, 223, 193, 174, 150, 119, 160, 225,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  46,
    104,  97, 115,  65, 115, 115, 117, 109,
    101, 100,  86,  97, 108, 105, 100,  67,
    104,  97, 105, 110,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e1a07796aec1df8e = b_e1a07796aec1df8e.words;
#if !CAPNP_LITE
static const uint16_t m_e1a07796aec1df8e[] = {0};
static const uint16_t i_e1a07796aec1df8e[] = {0};
const ::capnp::_::RawSchema s_e1a07796aec1df8e = {
  0xe1a07796aec1df8e, b_e1a07796aec1df8e.words, 35, nullptr, m_e1a07796aec1df8e,
  0, 1, i_e1a07796aec1df8e, nullptr, nullptr, { &s_e1a07796aec1df8e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<115> b_9ac9db48ba219039 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     57, 144,  33, 186,  72, 219, 201, 154,
     18,   0,   0,   0,   3,   0,   0,   0,
    101,  44, 189, 100,  72,  26, 242, 148,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
     37,   0,   0,   0,  31,   0,   0,   0,
     85,   0,   0,   0, 199,   1,   0,   0,
    157,   1,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  78,
    111, 116, 105, 102, 105,  99,  97, 116,
    105, 111, 110, 115,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
     94,  64, 177, 183, 121,  96, 244, 230,
      4,   0,   0,   0,   2,   0,   1,   0,
     32,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  10,   1,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101, 115,  58,  58,  67, 104,  97, 105,
    110,  58,  58,  78, 111, 116, 105, 102,
    105,  99,  97, 116, 105, 111, 110, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     28,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    247,  97,  51, 245, 148, 209,   9, 228,
    124, 129, 138, 143,  76,  25,  45, 216,
    209,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    197,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    236,  86, 142, 219, 156, 132,  91, 165,
    158, 193,  67, 103, 169,  71, 200, 172,
    185,   0,   0,   0, 210,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    185,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    112,  87,  92, 197, 247, 241, 226, 250,
     65, 192,  85, 157, 144,  12, 215, 203,
    173,   0,   0,   0, 242,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    173,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    152, 219,  52,  76,   5, 184,  15, 187,
      5, 122, 138, 250,  64, 151, 141, 179,
    161,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   0,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    106, 157, 161, 212, 146,  50, 145, 223,
    101,  57,  97,  38, 113, 171,  24, 137,
    141,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,   7,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
     98,  64,  16, 139, 179,  40,  20, 142,
    168, 201, 253, 211, 125,  16,  84, 158,
    125,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0,   7,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
     63,  51, 236, 251, 138,  47, 202, 228,
    172, 204,  75,  49, 110, 200,  37, 152,
    105,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,   7,   0,   0,   0,
    100, 101, 115, 116, 114, 111, 121,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    116, 114,  97, 110, 115,  97,  99, 116,
    105, 111, 110,  65, 100, 100, 101, 100,
     84, 111,  77, 101, 109, 112, 111, 111,
    108,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    116, 114,  97, 110, 115,  97,  99, 116,
    105, 111, 110,  82, 101, 109, 111, 118,
    101, 100,  70, 114, 111, 109,  77, 101,
    109, 112, 111, 111, 108,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     98, 108, 111,  99, 107,  67, 111, 110,
    110, 101,  99, 116, 101, 100,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     98, 108, 111,  99, 107,  68, 105, 115,
     99, 111, 110, 110, 101,  99, 116, 101,
    100,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    117, 112, 100,  97, 116, 101, 100,  66,
    108, 111,  99, 107,  84, 105, 112,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 104,  97, 105, 110,  83, 116,  97,
    116, 101,  70, 108, 117, 115, 104, 101,
    100,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_9ac9db48ba219039 = b_9ac9db48ba219039.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9ac9db48ba219039[] = {
  &s_8918ab7126613965,
  &s_8e1428b38b104062,
  &s_9825c86e314bccac,
  &s_9e54107dd3fdc9a8,
  &s_a55b849cdb8e56ec,
  &s_acc847a96743c19e,
  &s_b38d9740fa8a7a05,
  &s_bb0fb8054c34db98,
  &s_cbd70c909d55c041,
  &s_d82d194c8f8a817c,
  &s_df913292d4a19d6a,
  &s_e409d194f53361f7,
  &s_e4ca2f8afbec333f,
  &s_fae2f1f7c55c5770,
};
static const uint16_t m_9ac9db48ba219039[] = {3, 4, 6, 0, 1, 2, 5};
const ::capnp::_::RawSchema s_9ac9db48ba219039 = {
  0x9ac9db48ba219039, b_9ac9db48ba219039.words, 115, d_9ac9db48ba219039, m_9ac9db48ba219039,
  14, 7, nullptr, nullptr, nullptr, { &s_9ac9db48ba219039, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_e409d194f53361f7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    247,  97,  51, 245, 148, 209,   9, 228,
     37,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  78,
    111, 116, 105, 102, 105,  99,  97, 116,
    105, 111, 110, 115,  46, 100, 101, 115,
    116, 114, 111, 121,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e409d194f53361f7 = b_e409d194f53361f7.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e409d194f53361f7[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_e409d194f53361f7[] = {0};
static const uint16_t i_e409d194f53361f7[] = {0};
const ::capnp::_::RawSchema s_e409d194f53361f7 = {
  0xe409d194f53361f7, b_e409d194f53361f7.words, 35, d_e409d194f53361f7, m_e409d194f53361f7,
  1, 1, i_e409d194f53361f7, nullptr, nullptr, { &s_e409d194f53361f7, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_d82d194c8f8a817c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    124, 129, 138, 143,  76,  25,  45, 216,
     37,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  78,
    111, 116, 105, 102, 105,  99,  97, 116,
    105, 111, 110, 115,  46, 100, 101, 115,
    116, 114, 111, 121,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d82d194c8f8a817c = b_d82d194c8f8a817c.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d82d194c8f8a817c = {
  0xd82d194c8f8a817c, b_d82d194c8f8a817c.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d82d194c8f8a817c, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_a55b849cdb8e56ec = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    236,  86, 142, 219, 156, 132,  91, 165,
     37,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  78,
    111, 116, 105, 102, 105,  99,  97, 116,
    105, 111, 110, 115,  46, 116, 114,  97,
    110, 115,  97,  99, 116, 105, 111, 110,
     65, 100, 100, 101, 100,  84, 111,  77,
    101, 109, 112, 111, 111, 108,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 120,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a55b849cdb8e56ec = b_a55b849cdb8e56ec.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a55b849cdb8e56ec[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_a55b849cdb8e56ec[] = {0, 1};
static const uint16_t i_a55b849cdb8e56ec[] = {0, 1};
const ::capnp::_::RawSchema s_a55b849cdb8e56ec = {
  0xa55b849cdb8e56ec, b_a55b849cdb8e56ec.words, 52, d_a55b849cdb8e56ec, m_a55b849cdb8e56ec,
  1, 2, i_a55b849cdb8e56ec, nullptr, nullptr, { &s_a55b849cdb8e56ec, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_acc847a96743c19e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    158, 193,  67, 103, 169,  71, 200, 172,
     37,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  78,
    111, 116, 105, 102, 105,  99,  97, 116,
    105, 111, 110, 115,  46, 116, 114,  97,
    110, 115,  97,  99, 116, 105, 111, 110,
     65, 100, 100, 101, 100,  84, 111,  77,
    101, 109, 112, 111, 111, 108,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0, }
};
::capnp::word const* const bp_acc847a96743c19e = b_acc847a96743c19e.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_acc847a96743c19e = {
  0xacc847a96743c19e, b_acc847a96743c19e.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_acc847a96743c19e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<68> b_fae2f1f7c55c5770 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    112,  87,  92, 197, 247, 241, 226, 250,
     37,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  78,
    111, 116, 105, 102, 105,  99,  97, 116,
    105, 111, 110, 115,  46, 116, 114,  97,
    110, 115,  97,  99, 116, 105, 111, 110,
     82, 101, 109, 111, 118, 101, 100,  70,
    114, 111, 109,  77, 101, 109, 112, 111,
    111, 108,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 120,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101,  97, 115, 111, 110,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fae2f1f7c55c5770 = b_fae2f1f7c55c5770.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fae2f1f7c55c5770[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_fae2f1f7c55c5770[] = {0, 2, 1};
static const uint16_t i_fae2f1f7c55c5770[] = {0, 1, 2};
const ::capnp::_::RawSchema s_fae2f1f7c55c5770 = {
  0xfae2f1f7c55c5770, b_fae2f1f7c55c5770.words, 68, d_fae2f1f7c55c5770, m_fae2f1f7c55c5770,
  1, 3, i_fae2f1f7c55c5770, nullptr, nullptr, { &s_fae2f1f7c55c5770, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<22> b_cbd70c909d55c041 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     65, 192,  85, 157, 144,  12, 215, 203,
     37,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  78,
    111, 116, 105, 102, 105,  99,  97, 116,
    105, 111, 110, 115,  46, 116, 114,  97,
    110, 115,  97,  99, 116, 105, 111, 110,
     82, 101, 109, 111, 118, 101, 100,  70,
    114, 111, 109,  77, 101, 109, 112, 111,
    111, 108,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cbd70c909d55c041 = b_cbd70c909d55c041.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_cbd70c909d55c041 = {
  0xcbd70c909d55c041, b_cbd70c909d55c041.words, 22, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_cbd70c909d55c041, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<66> b_bb0fb8054c34db98 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    152, 219,  52,  76,   5, 184,  15, 187,
     37,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  78,
    111, 116, 105, 102, 105,  99,  97, 116,
    105, 111, 110, 115,  46,  98, 108, 111,
     99, 107,  67, 111, 110, 110, 101,  99,
    116, 101, 100,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 111, 108, 101,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 108, 111,  99, 107,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    128, 120,  69,  59, 243, 202,  21, 149,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bb0fb8054c34db98 = b_bb0fb8054c34db98.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bb0fb8054c34db98[] = {
  &s_9515caf33b457880,
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_bb0fb8054c34db98[] = {2, 0, 1};
static const uint16_t i_bb0fb8054c34db98[] = {0, 1, 2};
const ::capnp::_::RawSchema s_bb0fb8054c34db98 = {
  0xbb0fb8054c34db98, b_bb0fb8054c34db98.words, 66, d_bb0fb8054c34db98, m_bb0fb8054c34db98,
  2, 3, i_bb0fb8054c34db98, nullptr, nullptr, { &s_bb0fb8054c34db98, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_b38d9740fa8a7a05 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      5, 122, 138, 250,  64, 151, 141, 179,
     37,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  78,
    111, 116, 105, 102, 105,  99,  97, 116,
    105, 111, 110, 115,  46,  98, 108, 111,
     99, 107,  67, 111, 110, 110, 101,  99,
    116, 101, 100,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b38d9740fa8a7a05 = b_b38d9740fa8a7a05.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_b38d9740fa8a7a05 = {
  0xb38d9740fa8a7a05, b_b38d9740fa8a7a05.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_b38d9740fa8a7a05, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_df913292d4a19d6a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    106, 157, 161, 212, 146,  50, 145, 223,
     37,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  78,
    111, 116, 105, 102, 105,  99,  97, 116,
    105, 111, 110, 115,  46,  98, 108, 111,
     99, 107,  68, 105, 115,  99, 111, 110,
    110, 101,  99, 116, 101, 100,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 108, 111,  99, 107,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    128, 120,  69,  59, 243, 202,  21, 149,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_df913292d4a19d6a = b_df913292d4a19d6a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_df913292d4a19d6a[] = {
  &s_9515caf33b457880,
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_df913292d4a19d6a[] = {1, 0};
static const uint16_t i_df913292d4a19d6a[] = {0, 1};
const ::capnp::_::RawSchema s_df913292d4a19d6a = {
  0xdf913292d4a19d6a, b_df913292d4a19d6a.words, 51, d_df913292d4a19d6a, m_df913292d4a19d6a,
  2, 2, i_df913292d4a19d6a, nullptr, nullptr, { &s_df913292d4a19d6a, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_8918ab7126613965 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    101,  57,  97,  38, 113, 171,  24, 137,
     37,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  78,
    111, 116, 105, 102, 105,  99,  97, 116,
    105, 111, 110, 115,  46,  98, 108, 111,
     99, 107,  68, 105, 115,  99, 111, 110,
    110, 101,  99, 116, 101, 100,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0, }
};
::capnp::word const* const bp_8918ab7126613965 = b_8918ab7126613965.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_8918ab7126613965 = {
  0x8918ab7126613965, b_8918ab7126613965.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_8918ab7126613965, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_8e1428b38b104062 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     98,  64,  16, 139, 179,  40,  20, 142,
     37,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  78,
    111, 116, 105, 102, 105,  99,  97, 116,
    105, 111, 110, 115,  46, 117, 112, 100,
     97, 116, 101, 100,  66, 108, 111,  99,
    107,  84, 105, 112,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8e1428b38b104062 = b_8e1428b38b104062.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8e1428b38b104062[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_8e1428b38b104062[] = {0};
static const uint16_t i_8e1428b38b104062[] = {0};
const ::capnp::_::RawSchema s_8e1428b38b104062 = {
  0x8e1428b38b104062, b_8e1428b38b104062.words, 36, d_8e1428b38b104062, m_8e1428b38b104062,
  1, 1, i_8e1428b38b104062, nullptr, nullptr, { &s_8e1428b38b104062, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_9e54107dd3fdc9a8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    168, 201, 253, 211, 125,  16,  84, 158,
     37,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  78,
    111, 116, 105, 102, 105,  99,  97, 116,
    105, 111, 110, 115,  46, 117, 112, 100,
     97, 116, 101, 100,  66, 108, 111,  99,
    107,  84, 105, 112,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9e54107dd3fdc9a8 = b_9e54107dd3fdc9a8.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_9e54107dd3fdc9a8 = {
  0x9e54107dd3fdc9a8, b_9e54107dd3fdc9a8.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_9e54107dd3fdc9a8, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<66> b_e4ca2f8afbec333f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     63,  51, 236, 251, 138,  47, 202, 228,
     37,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  78,
    111, 116, 105, 102, 105,  99,  97, 116,
    105, 111, 110, 115,  46,  99, 104,  97,
    105, 110,  83, 116,  97, 116, 101,  70,
    108, 117, 115, 104, 101, 100,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 111, 108, 101,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108, 111,  99,  97, 116, 111, 114,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e4ca2f8afbec333f = b_e4ca2f8afbec333f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e4ca2f8afbec333f[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_e4ca2f8afbec333f[] = {0, 2, 1};
static const uint16_t i_e4ca2f8afbec333f[] = {0, 1, 2};
const ::capnp::_::RawSchema s_e4ca2f8afbec333f = {
  0xe4ca2f8afbec333f, b_e4ca2f8afbec333f.words, 66, d_e4ca2f8afbec333f, m_e4ca2f8afbec333f,
  1, 3, i_e4ca2f8afbec333f, nullptr, nullptr, { &s_e4ca2f8afbec333f, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_9825c86e314bccac = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    172, 204,  75,  49, 110, 200,  37, 152,
     37,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  78,
    111, 116, 105, 102, 105,  99,  97, 116,
    105, 111, 110, 115,  46,  99, 104,  97,
    105, 110,  83, 116,  97, 116, 101,  70,
    108, 117, 115, 104, 101, 100,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0, }
};
::capnp::word const* const bp_9825c86e314bccac = b_9825c86e314bccac.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_9825c86e314bccac = {
  0x9825c86e314bccac, b_9825c86e314bccac.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_9825c86e314bccac, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<124> b_e12e54f4b0c4b578 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    120, 181, 196, 176, 244,  84,  46, 225,
     18,   0,   0,   0,   3,   0,   0,   0,
    101,  44, 189, 100,  72,  26, 242, 148,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
     33,   0,   0,   0,  31,   0,   0,   0,
     73,   0,   0,   0,  71,   2,   0,   0,
    193,   1,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  67,
    108, 105, 101, 110, 116,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
     94,  64, 177, 183, 121,  96, 244, 230,
      4,   0,   0,   0,   2,   0,   1,   0,
     24,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 194,   0,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101, 115,  58,  58,  67, 104,  97, 105,
    110,  67, 108, 105, 101, 110, 116,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    193,  95, 233,  39, 191, 248, 249, 232,
     78,  86,  12, 121, 158,  58, 197, 249,
     17,   1,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   1,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    100, 177,  13, 231,  82, 110,  79, 211,
     76,  71, 152, 112, 223,  21,  75, 143,
    249,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    241,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     14, 167, 207, 191, 193,  37,  62, 191,
     49, 176,  58,  22, 110, 245,  87, 237,
    229,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    217,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    194, 100, 178,  15,  20, 222,  46, 180,
    165, 112,   9, 142,  76,   0, 191, 136,
    205,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    193,   0,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    124,  19,  91, 101, 146, 232, 168, 243,
    207,  94, 162, 192, 122, 171,  55, 132,
    181,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    169,   0,   0,   0,   7,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
     32, 101,  43, 120, 211, 163, 102, 132,
      4,  81, 236, 102,  14,  41,  35, 194,
    157,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    145,   0,   0,   0,   7,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
    236, 221, 209, 166,  59, 239, 138, 216,
    133, 244, 252, 106, 119,  81,  23, 162,
    133,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,   7,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
    198, 177, 165,  62, 242, 133, 179, 188,
    213, 127,  96, 122, 121,  76, 245, 234,
    109,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,   7,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
     81, 218,  74,  59, 234,  47, 189, 202,
    135,  60,  55, 108,  94, 152, 199, 132,
     89,   0,   0,   0, 170,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     85,   0,   0,   0,   7,   0,   0,   0,
    100, 101, 115, 116, 114, 111, 121,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 103, 105, 115, 116, 101, 114,
     82, 112,  99, 115,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    118, 101, 114, 105, 102, 121,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    108, 111,  97, 100,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 116,  97, 114, 116,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    102, 108, 117, 115, 104,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 116, 111, 112,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  77, 111,  99, 107,  84,
    105, 109, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115,  99, 104, 101, 100, 117, 108, 101,
    114,  77, 111,  99, 107,  70, 111, 114,
    119,  97, 114, 100,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_e12e54f4b0c4b578 = b_e12e54f4b0c4b578.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e12e54f4b0c4b578[] = {
  &s_8437ab7ac0a25ecf,
  &s_8466a3d3782b6520,
  &s_84c7985e6c373c87,
  &s_88bf004c8e0970a5,
  &s_8f4b15df7098474c,
  &s_a21751776afcf485,
  &s_b42ede140fb264c2,
  &s_bcb385f23ea5b1c6,
  &s_bf3e25c1bfcfa70e,
  &s_c223290e66ec5104,
  &s_cabd2fea3b4ada51,
  &s_d34f6e52e70db164,
  &s_d88aef3ba6d1ddec,
  &s_e8f9f8bf27e95fc1,
  &s_eaf54c797a607fd5,
  &s_ed57f56e163ab031,
  &s_f3a8e892655b137c,
  &s_f9c53a9e790c564e,
};
static const uint16_t m_e12e54f4b0c4b578[] = {0, 5, 3, 1, 8, 7, 4, 6, 2};
const ::capnp::_::RawSchema s_e12e54f4b0c4b578 = {
  0xe12e54f4b0c4b578, b_e12e54f4b0c4b578.words, 124, d_e12e54f4b0c4b578, m_e12e54f4b0c4b578,
  18, 9, nullptr, nullptr, nullptr, { &s_e12e54f4b0c4b578, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_e8f9f8bf27e95fc1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    193,  95, 233,  39, 191, 248, 249, 232,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  67,
    108, 105, 101, 110, 116,  46, 100, 101,
    115, 116, 114, 111, 121,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e8f9f8bf27e95fc1 = b_e8f9f8bf27e95fc1.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e8f9f8bf27e95fc1[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_e8f9f8bf27e95fc1[] = {0};
static const uint16_t i_e8f9f8bf27e95fc1[] = {0};
const ::capnp::_::RawSchema s_e8f9f8bf27e95fc1 = {
  0xe8f9f8bf27e95fc1, b_e8f9f8bf27e95fc1.words, 34, d_e8f9f8bf27e95fc1, m_e8f9f8bf27e95fc1,
  1, 1, i_e8f9f8bf27e95fc1, nullptr, nullptr, { &s_e8f9f8bf27e95fc1, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_f9c53a9e790c564e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     78,  86,  12, 121, 158,  58, 197, 249,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  67,
    108, 105, 101, 110, 116,  46, 100, 101,
    115, 116, 114, 111, 121,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_f9c53a9e790c564e = b_f9c53a9e790c564e.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f9c53a9e790c564e = {
  0xf9c53a9e790c564e, b_f9c53a9e790c564e.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f9c53a9e790c564e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_d34f6e52e70db164 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    100, 177,  13, 231,  82, 110,  79, 211,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  67,
    108, 105, 101, 110, 116,  46, 114, 101,
    103, 105, 115, 116, 101, 114,  82, 112,
     99, 115,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d34f6e52e70db164 = b_d34f6e52e70db164.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d34f6e52e70db164[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_d34f6e52e70db164[] = {0};
static const uint16_t i_d34f6e52e70db164[] = {0};
const ::capnp::_::RawSchema s_d34f6e52e70db164 = {
  0xd34f6e52e70db164, b_d34f6e52e70db164.words, 35, d_d34f6e52e70db164, m_d34f6e52e70db164,
  1, 1, i_d34f6e52e70db164, nullptr, nullptr, { &s_d34f6e52e70db164, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_8f4b15df7098474c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     76,  71, 152, 112, 223,  21,  75, 143,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  67,
    108, 105, 101, 110, 116,  46, 114, 101,
    103, 105, 115, 116, 101, 114,  82, 112,
     99, 115,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8f4b15df7098474c = b_8f4b15df7098474c.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_8f4b15df7098474c = {
  0x8f4b15df7098474c, b_8f4b15df7098474c.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_8f4b15df7098474c, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_bf3e25c1bfcfa70e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     14, 167, 207, 191, 193,  37,  62, 191,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  67,
    108, 105, 101, 110, 116,  46, 118, 101,
    114, 105, 102, 121,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bf3e25c1bfcfa70e = b_bf3e25c1bfcfa70e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bf3e25c1bfcfa70e[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_bf3e25c1bfcfa70e[] = {0};
static const uint16_t i_bf3e25c1bfcfa70e[] = {0};
const ::capnp::_::RawSchema s_bf3e25c1bfcfa70e = {
  0xbf3e25c1bfcfa70e, b_bf3e25c1bfcfa70e.words, 34, d_bf3e25c1bfcfa70e, m_bf3e25c1bfcfa70e,
  1, 1, i_bf3e25c1bfcfa70e, nullptr, nullptr, { &s_bf3e25c1bfcfa70e, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_ed57f56e163ab031 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     49, 176,  58,  22, 110, 245,  87, 237,
     30,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  67,
    108, 105, 101, 110, 116,  46, 118, 101,
    114, 105, 102, 121,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ed57f56e163ab031 = b_ed57f56e163ab031.words;
#if !CAPNP_LITE
static const uint16_t m_ed57f56e163ab031[] = {0};
static const uint16_t i_ed57f56e163ab031[] = {0};
const ::capnp::_::RawSchema s_ed57f56e163ab031 = {
  0xed57f56e163ab031, b_ed57f56e163ab031.words, 34, nullptr, m_ed57f56e163ab031,
  0, 1, i_ed57f56e163ab031, nullptr, nullptr, { &s_ed57f56e163ab031, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_b42ede140fb264c2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    194, 100, 178,  15,  20, 222,  46, 180,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  67,
    108, 105, 101, 110, 116,  46, 108, 111,
     97, 100,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b42ede140fb264c2 = b_b42ede140fb264c2.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b42ede140fb264c2[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_b42ede140fb264c2[] = {0};
static const uint16_t i_b42ede140fb264c2[] = {0};
const ::capnp::_::RawSchema s_b42ede140fb264c2 = {
  0xb42ede140fb264c2, b_b42ede140fb264c2.words, 34, d_b42ede140fb264c2, m_b42ede140fb264c2,
  1, 1, i_b42ede140fb264c2, nullptr, nullptr, { &s_b42ede140fb264c2, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_88bf004c8e0970a5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    165, 112,   9, 142,  76,   0, 191, 136,
     30,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  67,
    108, 105, 101, 110, 116,  46, 108, 111,
     97, 100,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_88bf004c8e0970a5 = b_88bf004c8e0970a5.words;
#if !CAPNP_LITE
static const uint16_t m_88bf004c8e0970a5[] = {0};
static const uint16_t i_88bf004c8e0970a5[] = {0};
const ::capnp::_::RawSchema s_88bf004c8e0970a5 = {
  0x88bf004c8e0970a5, b_88bf004c8e0970a5.words, 34, nullptr, m_88bf004c8e0970a5,
  0, 1, i_88bf004c8e0970a5, nullptr, nullptr, { &s_88bf004c8e0970a5, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_f3a8e892655b137c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    124,  19,  91, 101, 146, 232, 168, 243,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  67,
    108, 105, 101, 110, 116,  46, 115, 116,
     97, 114, 116,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  99, 104, 101, 100, 117, 108, 101,
    114,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f3a8e892655b137c = b_f3a8e892655b137c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f3a8e892655b137c[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_f3a8e892655b137c[] = {0, 1};
static const uint16_t i_f3a8e892655b137c[] = {0, 1};
const ::capnp::_::RawSchema s_f3a8e892655b137c = {
  0xf3a8e892655b137c, b_f3a8e892655b137c.words, 50, d_f3a8e892655b137c, m_f3a8e892655b137c,
  1, 2, i_f3a8e892655b137c, nullptr, nullptr, { &s_f3a8e892655b137c, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_8437ab7ac0a25ecf = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    207,  94, 162, 192, 122, 171,  55, 132,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  67,
    108, 105, 101, 110, 116,  46, 115, 116,
     97, 114, 116,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8437ab7ac0a25ecf = b_8437ab7ac0a25ecf.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_8437ab7ac0a25ecf = {
  0x8437ab7ac0a25ecf, b_8437ab7ac0a25ecf.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_8437ab7ac0a25ecf, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_8466a3d3782b6520 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     32, 101,  43, 120, 211, 163, 102, 132,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  67,
    108, 105, 101, 110, 116,  46, 102, 108,
    117, 115, 104,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8466a3d3782b6520 = b_8466a3d3782b6520.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8466a3d3782b6520[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_8466a3d3782b6520[] = {0};
static const uint16_t i_8466a3d3782b6520[] = {0};
const ::capnp::_::RawSchema s_8466a3d3782b6520 = {
  0x8466a3d3782b6520, b_8466a3d3782b6520.words, 34, d_8466a3d3782b6520, m_8466a3d3782b6520,
  1, 1, i_8466a3d3782b6520, nullptr, nullptr, { &s_8466a3d3782b6520, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_c223290e66ec5104 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      4,  81, 236, 102,  14,  41,  35, 194,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  67,
    108, 105, 101, 110, 116,  46, 102, 108,
    117, 115, 104,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c223290e66ec5104 = b_c223290e66ec5104.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_c223290e66ec5104 = {
  0xc223290e66ec5104, b_c223290e66ec5104.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_c223290e66ec5104, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_d88aef3ba6d1ddec = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    236, 221, 209, 166,  59, 239, 138, 216,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  67,
    108, 105, 101, 110, 116,  46, 115, 116,
    111, 112,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d88aef3ba6d1ddec = b_d88aef3ba6d1ddec.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d88aef3ba6d1ddec[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_d88aef3ba6d1ddec[] = {0};
static const uint16_t i_d88aef3ba6d1ddec[] = {0};
const ::capnp::_::RawSchema s_d88aef3ba6d1ddec = {
  0xd88aef3ba6d1ddec, b_d88aef3ba6d1ddec.words, 34, d_d88aef3ba6d1ddec, m_d88aef3ba6d1ddec,
  1, 1, i_d88aef3ba6d1ddec, nullptr, nullptr, { &s_d88aef3ba6d1ddec, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_a21751776afcf485 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    133, 244, 252, 106, 119,  81,  23, 162,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  67,
    108, 105, 101, 110, 116,  46, 115, 116,
    111, 112,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a21751776afcf485 = b_a21751776afcf485.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_a21751776afcf485 = {
  0xa21751776afcf485, b_a21751776afcf485.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_a21751776afcf485, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_bcb385f23ea5b1c6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    198, 177, 165,  62, 242, 133, 179, 188,
     30,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  67,
    108, 105, 101, 110, 116,  46, 115, 101,
    116,  77, 111,  99, 107,  84, 105, 109,
    101,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 105, 109, 101,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bcb385f23ea5b1c6 = b_bcb385f23ea5b1c6.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bcb385f23ea5b1c6[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_bcb385f23ea5b1c6[] = {0, 1};
static const uint16_t i_bcb385f23ea5b1c6[] = {0, 1};
const ::capnp::_::RawSchema s_bcb385f23ea5b1c6 = {
  0xbcb385f23ea5b1c6, b_bcb385f23ea5b1c6.words, 50, d_bcb385f23ea5b1c6, m_bcb385f23ea5b1c6,
  1, 2, i_bcb385f23ea5b1c6, nullptr, nullptr, { &s_bcb385f23ea5b1c6, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_eaf54c797a607fd5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    213, 127,  96, 122, 121,  76, 245, 234,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  67,
    108, 105, 101, 110, 116,  46, 115, 101,
    116,  77, 111,  99, 107,  84, 105, 109,
    101,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_eaf54c797a607fd5 = b_eaf54c797a607fd5.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_eaf54c797a607fd5 = {
  0xeaf54c797a607fd5, b_eaf54c797a607fd5.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_eaf54c797a607fd5, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_cabd2fea3b4ada51 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     81, 218,  74,  59, 234,  47, 189, 202,
     30,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  67,
    108, 105, 101, 110, 116,  46, 115,  99,
    104, 101, 100, 117, 108, 101, 114,  77,
    111,  99, 107,  70, 111, 114, 119,  97,
    114, 100,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 105, 109, 101,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cabd2fea3b4ada51 = b_cabd2fea3b4ada51.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cabd2fea3b4ada51[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_cabd2fea3b4ada51[] = {0, 1};
static const uint16_t i_cabd2fea3b4ada51[] = {0, 1};
const ::capnp::_::RawSchema s_cabd2fea3b4ada51 = {
  0xcabd2fea3b4ada51, b_cabd2fea3b4ada51.words, 51, d_cabd2fea3b4ada51, m_cabd2fea3b4ada51,
  1, 2, i_cabd2fea3b4ada51, nullptr, nullptr, { &s_cabd2fea3b4ada51, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_84c7985e6c373c87 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    135,  60,  55, 108,  94, 152, 199, 132,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  67, 104,  97, 105, 110,  67,
    108, 105, 101, 110, 116,  46, 115,  99,
    104, 101, 100, 117, 108, 101, 114,  77,
    111,  99, 107,  70, 111, 114, 119,  97,
    114, 100,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_84c7985e6c373c87 = b_84c7985e6c373c87.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_84c7985e6c373c87 = {
  0x84c7985e6c373c87, b_84c7985e6c373c87.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_84c7985e6c373c87, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<91> b_9c575d95b663f98f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    143, 249,  99, 182, 149,  93,  87, 156,
     18,   0,   0,   0,   1,   0,   2,   0,
    101,  44, 189, 100,  72,  26, 242, 148,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
     37,   0,   0,   0,  31,   0,   0,   0,
     73,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  70, 101, 101,  67,  97, 108,
     99, 117, 108,  97, 116, 105, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
     94,  64, 177, 183, 121,  96, 244, 230,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 122,   0,   0,   0,
     70, 101, 101,  67,  97, 108,  99, 117,
    108,  97, 116, 105, 111, 110,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,   0,   0,   0,   3,   0,   1,   0,
    124,   0,   0,   0,   2,   0,   1,   0,
    101, 115, 116,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    119, 176, 250, 206, 238,  61,  75, 202,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101,  97, 115, 111, 110,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101, 115, 105, 114, 101, 100,  84,
     97, 114, 103, 101, 116,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 116, 117, 114, 110, 101, 100,
     84,  97, 114, 103, 101, 116,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9c575d95b663f98f = b_9c575d95b663f98f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9c575d95b663f98f[] = {
  &s_ca4b3deecefab077,
};
static const uint16_t m_9c575d95b663f98f[] = {2, 0, 1, 3};
static const uint16_t i_9c575d95b663f98f[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_9c575d95b663f98f = {
  0x9c575d95b663f98f, b_9c575d95b663f98f.words, 91, d_9c575d95b663f98f, m_9c575d95b663f98f,
  1, 4, i_9c575d95b663f98f, nullptr, nullptr, { &s_9c575d95b663f98f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<90> b_ca4b3deecefab077 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    119, 176, 250, 206, 238,  61,  75, 202,
     18,   0,   0,   0,   1,   0,   2,   0,
    101,  44, 189, 100,  72,  26, 242, 148,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
     37,   0,   0,   0,  31,   0,   0,   0,
     77,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  69, 115, 116, 105, 109,  97,
    116, 105, 111, 110,  82, 101, 115, 117,
    108, 116,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
     94,  64, 177, 183, 121,  96, 244, 230,
      4,   0,   0,   0,   2,   0,   1,   0,
     24,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 138,   0,   0,   0,
     69, 115, 116, 105, 109,  97, 116, 105,
    111, 110,  82, 101, 115, 117, 108, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 115, 115,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     14,  54,  45,   1, 174,  91, 208, 214,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  97, 105, 108,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     14,  54,  45,   1, 174,  91, 208, 214,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101,  99,  97, 121,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  99,  97, 108, 101,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ca4b3deecefab077 = b_ca4b3deecefab077.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ca4b3deecefab077[] = {
  &s_d6d05bae012d360e,
};
static const uint16_t m_ca4b3deecefab077[] = {2, 1, 0, 3};
static const uint16_t i_ca4b3deecefab077[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_ca4b3deecefab077 = {
  0xca4b3deecefab077, b_ca4b3deecefab077.words, 90, d_ca4b3deecefab077, m_ca4b3deecefab077,
  1, 4, i_ca4b3deecefab077, nullptr, nullptr, { &s_ca4b3deecefab077, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<123> b_d6d05bae012d360e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     14,  54,  45,   1, 174,  91, 208, 214,
     18,   0,   0,   0,   1,   0,   6,   0,
    101,  44, 189, 100,  72,  26, 242, 148,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
     37,   0,   0,   0,  31,   0,   0,   0,
     73,   0,   0,   0,  87,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  69, 115, 116, 105, 109,  97,
    116, 111, 114,  66, 117,  99, 107, 101,
    116,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
     94,  64, 177, 183, 121,  96, 244, 230,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 130,   0,   0,   0,
     69, 115, 116, 105, 109,  97, 116, 111,
    114,  66, 117,  99, 107, 101, 116,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     24,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    148,   0,   0,   0,   3,   0,   1,   0,
    160,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    157,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    152,   0,   0,   0,   3,   0,   1,   0,
    164,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    161,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    160,   0,   0,   0,   3,   0,   1,   0,
    172,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    169,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    168,   0,   0,   0,   3,   0,   1,   0,
    180,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    177,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    176,   0,   0,   0,   3,   0,   1,   0,
    188,   0,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,   5,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    185,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    184,   0,   0,   0,   3,   0,   1,   0,
    196,   0,   0,   0,   2,   0,   1,   0,
    115, 116,  97, 114, 116,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 110, 100,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119, 105, 116, 104, 105, 110,  84,  97,
    114, 103, 101, 116,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 111, 116,  97, 108,  67, 111, 110,
    102, 105, 114, 109, 101, 100,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110,  77, 101, 109, 112, 111, 111,
    108,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108, 101, 102, 116,  77, 101, 109, 112,
    111, 111, 108,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d6d05bae012d360e = b_d6d05bae012d360e.words;
#if !CAPNP_LITE
static const uint16_t m_d6d05bae012d360e[] = {1, 4, 5, 0, 3, 2};
static const uint16_t i_d6d05bae012d360e[] = {0, 1, 2, 3, 4, 5};
const ::capnp::_::RawSchema s_d6d05bae012d360e = {
  0xd6d05bae012d360e, b_d6d05bae012d360e.words, 123, nullptr, m_d6d05bae012d360e,
  0, 6, i_d6d05bae012d360e, nullptr, nullptr, { &s_d6d05bae012d360e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<120> b_cf447f100da2859a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    154, 133, 162,  13,  16, 127,  68, 207,
     18,   0,   0,   0,   1,   0,   1,   0,
    101,  44, 189, 100,  72,  26, 242, 148,
      4,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
     33,   0,   0,   0,  31,   0,   0,   0,
     69,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  82,  80,  67,  67, 111, 109,
    109,  97, 110, 100,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
     94,  64, 177, 183, 121,  96, 244, 230,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  98,   0,   0,   0,
     67,  82,  80,  67,  67, 111, 109, 109,
     97, 110, 100,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    128,   0,   0,   0,   3,   0,   1,   0,
    140,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   0,   0,   0,   3,   0,   1,   0,
    144,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    140,   0,   0,   0,   3,   0,   1,   0,
    168,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    165,   0,   0,   0,  74,   0,   0,   0,
    169,   0,   0,   0,  31,   0,   0,   0,
    204,   0,   0,   0,   3,   0,   1,   0,
    216,   0,   0,   0,   2,   0,   1,   0,
     99,  97, 116, 101, 103, 111, 114, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  99, 116, 111, 114,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    165, 135,  52,  64, 248,  31,  66, 239,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 114, 103,  78,  97, 109, 101, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    132,  85,  93,  87,  44, 129, 184, 140,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 110, 105, 113, 117, 101,  73, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    185, 219, 244,  99, 143, 136, 148, 181,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  82,   0,   0,   0,
    117, 110, 105, 113, 117, 101,  95, 105,
    100,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cf447f100da2859a = b_cf447f100da2859a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cf447f100da2859a[] = {
  &s_8cb8812c575d5584,
  &s_ef421ff8403487a5,
};
static const uint16_t m_cf447f100da2859a[] = {2, 3, 0, 1, 4};
static const uint16_t i_cf447f100da2859a[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_cf447f100da2859a = {
  0xcf447f100da2859a, b_cf447f100da2859a.words, 120, d_cf447f100da2859a, m_cf447f100da2859a,
  2, 5, i_cf447f100da2859a, nullptr, nullptr, { &s_cf447f100da2859a, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_8cb8812c575d5584 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    132,  85,  93,  87,  44, 129, 184, 140,
     18,   0,   0,   0,   1,   0,   1,   0,
    101,  44, 189, 100,  72,  26, 242, 148,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  82,  80,  67,  65, 114, 103,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  97, 109, 101, 100,  79, 110, 108,
    121,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8cb8812c575d5584 = b_8cb8812c575d5584.words;
#if !CAPNP_LITE
static const uint16_t m_8cb8812c575d5584[] = {0, 1};
static const uint16_t i_8cb8812c575d5584[] = {0, 1};
const ::capnp::_::RawSchema s_8cb8812c575d5584 = {
  0x8cb8812c575d5584, b_8cb8812c575d5584.words, 49, nullptr, m_8cb8812c575d5584,
  0, 2, i_8cb8812c575d5584, nullptr, nullptr, { &s_8cb8812c575d5584, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<42> b_ef421ff8403487a5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    165, 135,  52,  64, 248,  31,  66, 239,
     18,   0,   0,   0,   3,   0,   0,   0,
    101,  44, 189, 100,  72,  26, 242, 148,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
     33,   0,   0,   0,  31,   0,   0,   0,
     81,   0,   0,   0,  71,   0,   0,   0,
    121,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  65,  99, 116, 111, 114,  67,
     97, 108, 108,  98,  97,  99, 107,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
     94,  64, 177, 183, 121,  96, 244, 230,
      4,   0,   0,   0,   2,   0,   1,   0,
     32,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  18,   1,   0,   0,
     80, 114, 111, 120, 121,  67,  97, 108,
    108,  98,  97,  99, 107,  60,  67,  82,
     80,  67,  67, 111, 109, 109,  97, 110,
    100,  58,  58,  65,  99, 116, 111, 114,
     62,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    158, 239,  20, 181, 226,  28,  15, 208,
      6, 204, 154,  99, 201,  53,  88, 253,
     17,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
     99,  97, 108, 108,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_ef421ff8403487a5 = b_ef421ff8403487a5.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ef421ff8403487a5[] = {
  &s_d00f1ce2b514ef9e,
  &s_fd5835c9639acc06,
};
static const uint16_t m_ef421ff8403487a5[] = {0};
const ::capnp::_::RawSchema s_ef421ff8403487a5 = {
  0xef421ff8403487a5, b_ef421ff8403487a5.words, 42, d_ef421ff8403487a5, m_ef421ff8403487a5,
  2, 1, nullptr, nullptr, nullptr, { &s_ef421ff8403487a5, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<81> b_d00f1ce2b514ef9e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    158, 239,  20, 181, 226,  28,  15, 208,
     32,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  65,  99, 116, 111, 114,  67,
     97, 108, 108,  98,  97,  99, 107,  46,
     99,  97, 108, 108,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,   0,   0,   0,   3,   0,   1,   0,
    124,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 113, 117, 101, 115, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    201,  41,  25, 216, 218, 244,   4, 216,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 115, 112, 111, 110, 115, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,  97, 115, 116,  67,  97, 108, 108,
     98,  97,  99, 107,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d00f1ce2b514ef9e = b_d00f1ce2b514ef9e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d00f1ce2b514ef9e[] = {
  &s_9c44e6645d0b22c6,
  &s_d804f4dad81929c9,
};
static const uint16_t m_d00f1ce2b514ef9e[] = {0, 3, 1, 2};
static const uint16_t i_d00f1ce2b514ef9e[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_d00f1ce2b514ef9e = {
  0xd00f1ce2b514ef9e, b_d00f1ce2b514ef9e.words, 81, d_d00f1ce2b514ef9e, m_d00f1ce2b514ef9e,
  2, 4, i_d00f1ce2b514ef9e, nullptr, nullptr, { &s_d00f1ce2b514ef9e, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<128> b_fd5835c9639acc06 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      6, 204, 154,  99, 201,  53,  88, 253,
     32,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  65,  99, 116, 111, 114,  67,
     97, 108, 108,  98,  97,  99, 107,  46,
     99,  97, 108, 108,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  50,   0,   0,   0,
    125,   0,   0,   0,  31,   0,   0,   0,
    160,   0,   0,   0,   3,   0,   1,   0,
    172,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    169,   0,   0,   0,  74,   0,   0,   0,
    173,   0,   0,   0,  31,   0,   0,   0,
    208,   0,   0,   0,   3,   0,   1,   0,
    220,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    217,   0,   0,   0,  82,   0,   0,   0,
    221,   0,   0,   0,  31,   0,   0,   0,
      4,   1,   0,   0,   3,   0,   1,   0,
     16,   1,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   1,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   1,   0,   0,   3,   0,   1,   0,
     24,   1,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   1,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   1,   0,   0,   3,   0,   1,   0,
     28,   1,   0,   0,   2,   0,   1,   0,
    101, 114, 114, 111, 114,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    136,  47, 153,   0,  50,  24, 106, 153,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 122,   0,   0,   0,
    115, 116, 100,  58,  58, 101, 120,  99,
    101, 112, 116, 105, 111, 110,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  69, 114, 114, 111, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    136,  47, 153,   0,  50,  24, 106, 153,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  74,   0,   0,   0,
     85, 110, 105,  86,  97, 108, 117, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 121, 112, 101,  69, 114, 114, 111,
    114,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    136,  47, 153,   0,  50,  24, 106, 153,
      4,   0,   0,   0,   2,   0,   1,   0,
     24,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 170,   0,   0,   0,
     85, 110, 105,  86,  97, 108, 117, 101,
     58,  58, 116, 121, 112, 101,  95, 101,
    114, 114, 111, 114,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 115, 112, 111, 110, 115, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fd5835c9639acc06 = b_fd5835c9639acc06.words;
#if !CAPNP_LITE
static const uint16_t m_fd5835c9639acc06[] = {0, 3, 4, 1, 2};
static const uint16_t i_fd5835c9639acc06[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_fd5835c9639acc06 = {
  0xfd5835c9639acc06, b_fd5835c9639acc06.words, 128, nullptr, m_fd5835c9639acc06,
  0, 5, i_fd5835c9639acc06, nullptr, nullptr, { &s_fd5835c9639acc06, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<180> b_d804f4dad81929c9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    201,  41,  25, 216, 218, 244,   4, 216,
     18,   0,   0,   0,   1,   0,   1,   0,
    101,  44, 189, 100,  72,  26, 242, 148,
      6,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
     37,   0,   0,   0,  31,   0,   0,   0,
     73,   0,   0,   0, 199,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  74,  83,  79,  78,  82,  80,
     67,  82, 101, 113, 117, 101, 115, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
     94,  64, 177, 183, 121,  96, 244, 230,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 122,   0,   0,   0,
     74,  83,  79,  78,  82,  80,  67,  82,
    101, 113, 117, 101, 115, 116,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     32,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    209,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    204,   0,   0,   0,   3,   0,   1,   0,
    216,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    213,   0,   0,   0,  58,   0,   0,   0,
    213,   0,   0,   0,  31,   0,   0,   0,
    248,   0,   0,   0,   3,   0,   1,   0,
      4,   1,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   1,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    252,   0,   0,   0,   3,   0,   1,   0,
      8,   1,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   1,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   1,   0,   0,   3,   0,   1,   0,
     12,   1,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   1,   0,   0,  34,   0,   0,   0,
      9,   1,   0,   0,  31,   0,   0,   0,
     40,   1,   0,   0,   3,   0,   1,   0,
     52,   1,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   1,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   1,   0,   0,   3,   0,   1,   0,
     60,   1,   0,   0,   2,   0,   1,   0,
      6,   0,   0,   0,   5,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     57,   1,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     56,   1,   0,   0,   3,   0,   1,   0,
     68,   1,   0,   0,   2,   0,   1,   0,
      7,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   1,   0,   0,  66,   0,   0,   0,
     65,   1,   0,   0,  31,   0,   0,   0,
    100,   1,   0,   0,   3,   0,   1,   0,
    112,   1,   0,   0,   2,   0,   1,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 101, 116, 104, 111, 100,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    185, 219, 244,  99, 143, 136, 148, 181,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  82,   0,   0,   0,
    115, 116, 114,  77, 101, 116, 104, 111,
    100,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97, 114,  97, 109, 115,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 111, 100, 101,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 114, 105,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    185, 219, 244,  99, 143, 136, 148, 181,
      4,   0,   0,   0,   2,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  34,   0,   0,   0,
     85,  82,  73,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 117, 116, 104,  85, 115, 101, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 101, 101, 114,  65, 100, 100, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118, 101, 114, 115, 105, 111, 110,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    185, 219, 244,  99, 143, 136, 148, 181,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 122,   0,   0,   0,
    109,  95, 106, 115, 111, 110,  95, 118,
    101, 114, 115, 105, 111, 110,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d804f4dad81929c9 = b_d804f4dad81929c9.words;
#if !CAPNP_LITE
static const uint16_t m_d804f4dad81929c9[] = {5, 0, 1, 3, 2, 6, 4, 7};
static const uint16_t i_d804f4dad81929c9[] = {0, 1, 2, 3, 4, 5, 6, 7};
const ::capnp::_::RawSchema s_d804f4dad81929c9 = {
  0xd804f4dad81929c9, b_d804f4dad81929c9.words, 180, nullptr, m_d804f4dad81929c9,
  0, 8, i_d804f4dad81929c9, nullptr, nullptr, { &s_d804f4dad81929c9, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<53> b_b90d32691d40bce8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    232, 188,  64,  29, 105,  50,  13, 185,
     18,   0,   0,   0,   3,   0,   0,   0,
    101,  44, 189, 100,  72,  26, 242, 148,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
     37,   0,   0,   0,  31,   0,   0,   0,
     85,   0,   0,   0, 135,   0,   0,   0,
    165,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  82, 117, 110,  76,  97, 116,
    101, 114,  67,  97, 108, 108,  98,  97,
     99, 107,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
     94,  64, 177, 183, 121,  96, 244, 230,
      4,   0,   0,   0,   2,   0,   1,   0,
     32,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  42,   1,   0,   0,
     80, 114, 111, 120, 121,  67,  97, 108,
    108,  98,  97,  99, 107,  60, 115, 116,
    100,  58,  58, 102, 117, 110,  99, 116,
    105, 111, 110,  60, 118, 111, 105, 100,
     40,  41,  62,  62,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    177, 141, 204, 246,  66, 231, 190, 136,
    184,   5, 127, 250, 110, 225, 105, 165,
     49,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    184,  18,  90,  97, 252,  57,  97, 221,
    159,  73, 233, 127, 127, 190, 209, 237,
     25,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   7,   0,   0,   0,
    100, 101, 115, 116, 114, 111, 121,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99,  97, 108, 108,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_b90d32691d40bce8 = b_b90d32691d40bce8.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b90d32691d40bce8[] = {
  &s_88bee742f6cc8db1,
  &s_a569e16efa7f05b8,
  &s_dd6139fc615a12b8,
  &s_edd1be7f7fe9499f,
};
static const uint16_t m_b90d32691d40bce8[] = {1, 0};
const ::capnp::_::RawSchema s_b90d32691d40bce8 = {
  0xb90d32691d40bce8, b_b90d32691d40bce8.words, 53, d_b90d32691d40bce8, m_b90d32691d40bce8,
  4, 2, nullptr, nullptr, nullptr, { &s_b90d32691d40bce8, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_88bee742f6cc8db1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    177, 141, 204, 246,  66, 231, 190, 136,
     35,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  82, 117, 110,  76,  97, 116,
    101, 114,  67,  97, 108, 108,  98,  97,
     99, 107,  46, 100, 101, 115, 116, 114,
    111, 121,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_88bee742f6cc8db1 = b_88bee742f6cc8db1.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_88bee742f6cc8db1[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_88bee742f6cc8db1[] = {0};
static const uint16_t i_88bee742f6cc8db1[] = {0};
const ::capnp::_::RawSchema s_88bee742f6cc8db1 = {
  0x88bee742f6cc8db1, b_88bee742f6cc8db1.words, 35, d_88bee742f6cc8db1, m_88bee742f6cc8db1,
  1, 1, i_88bee742f6cc8db1, nullptr, nullptr, { &s_88bee742f6cc8db1, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_a569e16efa7f05b8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    184,   5, 127, 250, 110, 225, 105, 165,
     35,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  82, 117, 110,  76,  97, 116,
    101, 114,  67,  97, 108, 108,  98,  97,
     99, 107,  46, 100, 101, 115, 116, 114,
    111, 121,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a569e16efa7f05b8 = b_a569e16efa7f05b8.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_a569e16efa7f05b8 = {
  0xa569e16efa7f05b8, b_a569e16efa7f05b8.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_a569e16efa7f05b8, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_dd6139fc615a12b8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    184,  18,  90,  97, 252,  57,  97, 221,
     35,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  82, 117, 110,  76,  97, 116,
    101, 114,  67,  97, 108, 108,  98,  97,
     99, 107,  46,  99,  97, 108, 108,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dd6139fc615a12b8 = b_dd6139fc615a12b8.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_dd6139fc615a12b8[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_dd6139fc615a12b8[] = {0};
static const uint16_t i_dd6139fc615a12b8[] = {0};
const ::capnp::_::RawSchema s_dd6139fc615a12b8 = {
  0xdd6139fc615a12b8, b_dd6139fc615a12b8.words, 34, d_dd6139fc615a12b8, m_dd6139fc615a12b8,
  1, 1, i_dd6139fc615a12b8, nullptr, nullptr, { &s_dd6139fc615a12b8, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_edd1be7f7fe9499f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    159,  73, 233, 127, 127, 190, 209, 237,
     35,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  82, 117, 110,  76,  97, 116,
    101, 114,  67,  97, 108, 108,  98,  97,
     99, 107,  46,  99,  97, 108, 108,  36,
     82, 101, 115, 117, 108, 116, 115,   0, }
};
::capnp::word const* const bp_edd1be7f7fe9499f = b_edd1be7f7fe9499f.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_edd1be7f7fe9499f = {
  0xedd1be7f7fe9499f, b_edd1be7f7fe9499f.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_edd1be7f7fe9499f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<164> b_edde51f40e3cad2a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     42, 173,  60,  14, 244,  81, 222, 237,
     18,   0,   0,   0,   1,   0,   1,   0,
    101,  44, 189, 100,  72,  26, 242, 148,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 255,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  70, 111, 117, 110, 100,  66,
    108, 111,  99, 107,  80,  97, 114,  97,
    109,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     36,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    237,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    236,   0,   0,   0,   3,   0,   1,   0,
    248,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    245,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    244,   0,   0,   0,   3,   0,   1,   0,
      0,   1,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    253,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    252,   0,   0,   0,   3,   0,   1,   0,
      8,   1,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   1,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   1,   0,   0,   3,   0,   1,   0,
     16,   1,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   1,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   1,   0,   0,   3,   0,   1,   0,
     24,   1,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,   5,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   1,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     24,   1,   0,   0,   3,   0,   1,   0,
     36,   1,   0,   0,   2,   0,   1,   0,
      6,   0,   0,   0,   6,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   1,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     32,   1,   0,   0,   3,   0,   1,   0,
     44,   1,   0,   0,   2,   0,   1,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   1,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   1,   0,   0,   3,   0,   1,   0,
     52,   1,   0,   0,   2,   0,   1,   0,
      8,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   1,   0,   8,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   1,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   1,   0,   0,   3,   0,   1,   0,
     60,   1,   0,   0,   2,   0,   1,   0,
    119,  97, 110, 116,  72,  97, 115, 104,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119,  97, 110, 116,  72, 101, 105, 103,
    104, 116,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119,  97, 110, 116,  84, 105, 109, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119,  97, 110, 116,  77,  97, 120,  84,
    105, 109, 101,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119,  97, 110, 116,  77, 116, 112,  84,
    105, 109, 101,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119,  97, 110, 116,  73, 110,  65,  99,
    116, 105, 118, 101,  67, 104,  97, 105,
    110,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119,  97, 110, 116,  76, 111,  99,  97,
    116, 111, 114,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 120, 116,  66, 108, 111,  99,
    107,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     42, 173,  60,  14, 244,  81, 222, 237,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119,  97, 110, 116,  68,  97, 116,  97,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_edde51f40e3cad2a = b_edde51f40e3cad2a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_edde51f40e3cad2a[] = {
  &s_edde51f40e3cad2a,
};
static const uint16_t m_edde51f40e3cad2a[] = {7, 8, 0, 1, 5, 6, 3, 4, 2};
static const uint16_t i_edde51f40e3cad2a[] = {0, 1, 2, 3, 4, 5, 6, 7, 8};
const ::capnp::_::RawSchema s_edde51f40e3cad2a = {
  0xedde51f40e3cad2a, b_edde51f40e3cad2a.words, 164, d_edde51f40e3cad2a, m_edde51f40e3cad2a,
  1, 9, i_edde51f40e3cad2a, nullptr, nullptr, { &s_edde51f40e3cad2a, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<171> b_980d6d9f8f8630fe = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    254,  48, 134, 143, 159, 109,  13, 152,
     18,   0,   0,   0,   1,   0,   5,   0,
    101,  44, 189, 100,  72,  26, 242, 148,
      4,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  55,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  70, 111, 117, 110, 100,  66,
    108, 111,  99, 107,  82, 101, 115, 117,
    108, 116,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     40,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   1,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   1,   0,   0,   3,   0,   1,   0,
     16,   1,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   1,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   1,   0,   0,   3,   0,   1,   0,
     20,   1,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   1,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   1,   0,   0,   3,   0,   1,   0,
     24,   1,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   1,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   1,   0,   0,   3,   0,   1,   0,
     28,   1,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   1,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     20,   1,   0,   0,   3,   0,   1,   0,
     32,   1,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   1,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     28,   1,   0,   0,   3,   0,   1,   0,
     40,   1,   0,   0,   2,   0,   1,   0,
      6,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   1,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     32,   1,   0,   0,   3,   0,   1,   0,
     44,   1,   0,   0,   2,   0,   1,   0,
      7,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   1,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   1,   0,   0,   3,   0,   1,   0,
     52,   1,   0,   0,   2,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   8,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   1,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   1,   0,   0,   3,   0,   1,   0,
     56,   1,   0,   0,   2,   0,   1,   0,
      9,   0,   0,   0,  32,   0,   0,   0,
      0,   0,   1,   0,   9,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   1,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   1,   0,   0,   3,   0,   1,   0,
     60,   1,   0,   0,   2,   0,   1,   0,
    104,  97, 115, 104,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 101, 105, 103, 104, 116,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 105, 109, 101,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 120,  84, 105, 109, 101,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 116, 112,  84, 105, 109, 101,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110,  65,  99, 116, 105, 118, 101,
     67, 104,  97, 105, 110,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108, 111,  99,  97, 116, 111, 114,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 120, 116,  66, 108, 111,  99,
    107,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    254,  48, 134, 143, 159, 109,  13, 152,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 111, 117, 110, 100,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_980d6d9f8f8630fe = b_980d6d9f8f8630fe.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_980d6d9f8f8630fe[] = {
  &s_980d6d9f8f8630fe,
};
static const uint16_t m_980d6d9f8f8630fe[] = {8, 9, 0, 1, 5, 6, 3, 4, 7, 2};
static const uint16_t i_980d6d9f8f8630fe[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
const ::capnp::_::RawSchema s_980d6d9f8f8630fe = {
  0x980d6d9f8f8630fe, b_980d6d9f8f8630fe.words, 171, d_980d6d9f8f8630fe, m_980d6d9f8f8630fe,
  1, 10, i_980d6d9f8f8630fe, nullptr, nullptr, { &s_980d6d9f8f8630fe, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<215> b_9515caf33b457880 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    128, 120,  69,  59, 243, 202,  21, 149,
     18,   0,   0,   0,   1,   0,   2,   0,
    101,  44, 189, 100,  72,  26, 242, 148,
      4,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
     33,   0,   0,   0,  31,   0,   0,   0,
     73,   0,   0,   0, 199,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  66, 108, 111,  99, 107,  73,
    110, 102, 111,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
     94,  64, 177, 183, 121,  96, 244, 230,
      4,   0,   0,   0,   2,   0,   1,   0,
     24,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 178,   0,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101, 115,  58,  58,  66, 108, 111,  99,
    107,  73, 110, 102, 111,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     32,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    209,   0,   0,   0,  42,   0,   0,   0,
    209,   0,   0,   0,  31,   0,   0,   0,
    236,   0,   0,   0,   3,   0,   1,   0,
    248,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    245,   0,   0,   0,  74,   0,   0,   0,
    249,   0,   0,   0,  31,   0,   0,   0,
     20,   1,   0,   0,   3,   0,   1,   0,
     32,   1,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     29,   1,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     24,   1,   0,   0,   3,   0,   1,   0,
     36,   1,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     33,   1,   0,   0,  90,   0,   0,   0,
     37,   1,   0,   0,  31,   0,   0,   0,
     72,   1,   0,   0,   3,   0,   1,   0,
     84,   1,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     81,   1,   0,   0,  66,   0,   0,   0,
     81,   1,   0,   0,  31,   0,   0,   0,
    116,   1,   0,   0,   3,   0,   1,   0,
    128,   1,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   1,   0,   0,  42,   0,   0,   0,
    125,   1,   0,   0,  31,   0,   0,   0,
    152,   1,   0,   0,   3,   0,   1,   0,
    164,   1,   0,   0,   2,   0,   1,   0,
      6,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    161,   1,   0,   0,  74,   0,   0,   0,
    165,   1,   0,   0,  31,   0,   0,   0,
    192,   1,   0,   0,   3,   0,   1,   0,
    204,   1,   0,   0,   2,   0,   1,   0,
      7,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    201,   1,   0,   0, 106,   0,   0,   0,
    205,   1,   0,   0,  31,   0,   0,   0,
    240,   1,   0,   0,   3,   0,   1,   0,
    252,   1,   0,   0,   2,   0,   1,   0,
    104,  97, 115, 104,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    221, 216, 149,  38, 184,   8,  76, 130,
      4,   0,   0,   0,   2,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 101, 118,  72,  97, 115, 104,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    221, 216, 149,  38, 184,   8,  76, 130,
      4,   0,   0,   0,   2,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 101, 105, 103, 104, 116,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0, 255, 255, 255, 255,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 105, 108, 101,  78, 117, 109,  98,
    101, 114,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    185, 219, 244,  99, 143, 136, 148, 181,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  98,   0,   0,   0,
    102, 105, 108, 101,  95, 110, 117, 109,
     98, 101, 114,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0, 255, 255, 255, 255,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,  80, 111, 115,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    185, 219, 244,  99, 143, 136, 148, 181,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  74,   0,   0,   0,
    100,  97, 116,  97,  95, 112, 111, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    221, 216, 149,  38, 184,   8,  76, 130,
      4,   0,   0,   0,   2,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 110, 100, 111,  68,  97, 116,  97,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    221, 216, 149,  38, 184,   8,  76, 130,
      4,   0,   0,   0,   2,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 104,  97, 105, 110,  84, 105, 109,
    101,  77,  97, 120,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    185, 219, 244,  99, 143, 136, 148, 181,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 122,   0,   0,   0,
     99, 104,  97, 105, 110,  95, 116, 105,
    109, 101,  95, 109,  97, 120,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9515caf33b457880 = b_9515caf33b457880.words;
#if !CAPNP_LITE
static const uint16_t m_9515caf33b457880[] = {7, 5, 4, 3, 0, 2, 1, 6};
static const uint16_t i_9515caf33b457880[] = {0, 1, 2, 3, 4, 5, 6, 7};
const ::capnp::_::RawSchema s_9515caf33b457880 = {
  0x9515caf33b457880, b_9515caf33b457880.words, 215, nullptr, m_9515caf33b457880,
  0, 8, i_9515caf33b457880, nullptr, nullptr, { &s_9515caf33b457880, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<55> b_995e7b64fb44bec5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    197, 190,  68, 251, 100, 123,  94, 153,
     18,   0,   0,   0,   3,   0,   0,   0,
    101,  44, 189, 100,  72,  26, 242, 148,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
     41,   0,   0,   0,  31,   0,   0,   0,
     93,   0,   0,   0, 135,   0,   0,   0,
    173,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  83, 101, 116, 116, 105, 110,
    103, 115,  85, 112, 100,  97, 116, 101,
     67,  97, 108, 108,  98,  97,  99, 107,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
     94,  64, 177, 183, 121,  96, 244, 230,
      4,   0,   0,   0,   2,   0,   1,   0,
     36,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  82,   1,   0,   0,
     80, 114, 111, 120, 121,  67,  97, 108,
    108,  98,  97,  99, 107,  60, 105, 110,
    116, 101, 114, 102,  97,  99, 101, 115,
     58,  58,  83, 101, 116, 116, 105, 110,
    103, 115,  85, 112, 100,  97, 116, 101,
     62,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     38, 165, 209, 183, 234,  35, 207, 158,
    189, 128,  19,  35, 122,  28, 238, 211,
     49,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    190, 191, 181, 134,  76,  78, 239, 207,
     59, 162,  60, 254,  45, 252, 230, 197,
     25,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   7,   0,   0,   0,
    100, 101, 115, 116, 114, 111, 121,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99,  97, 108, 108,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_995e7b64fb44bec5 = b_995e7b64fb44bec5.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_995e7b64fb44bec5[] = {
  &s_9ecf23eab7d1a526,
  &s_c5e6fc2dfe3ca23b,
  &s_cfef4e4c86b5bfbe,
  &s_d3ee1c7a231380bd,
};
static const uint16_t m_995e7b64fb44bec5[] = {1, 0};
const ::capnp::_::RawSchema s_995e7b64fb44bec5 = {
  0x995e7b64fb44bec5, b_995e7b64fb44bec5.words, 55, d_995e7b64fb44bec5, m_995e7b64fb44bec5,
  4, 2, nullptr, nullptr, nullptr, { &s_995e7b64fb44bec5, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_9ecf23eab7d1a526 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     38, 165, 209, 183, 234,  35, 207, 158,
     41,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  83, 101, 116, 116, 105, 110,
    103, 115,  85, 112, 100,  97, 116, 101,
     67,  97, 108, 108,  98,  97,  99, 107,
     46, 100, 101, 115, 116, 114, 111, 121,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9ecf23eab7d1a526 = b_9ecf23eab7d1a526.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9ecf23eab7d1a526[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_9ecf23eab7d1a526[] = {0};
static const uint16_t i_9ecf23eab7d1a526[] = {0};
const ::capnp::_::RawSchema s_9ecf23eab7d1a526 = {
  0x9ecf23eab7d1a526, b_9ecf23eab7d1a526.words, 35, d_9ecf23eab7d1a526, m_9ecf23eab7d1a526,
  1, 1, i_9ecf23eab7d1a526, nullptr, nullptr, { &s_9ecf23eab7d1a526, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_d3ee1c7a231380bd = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    189, 128,  19,  35, 122,  28, 238, 211,
     41,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  83, 101, 116, 116, 105, 110,
    103, 115,  85, 112, 100,  97, 116, 101,
     67,  97, 108, 108,  98,  97,  99, 107,
     46, 100, 101, 115, 116, 114, 111, 121,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d3ee1c7a231380bd = b_d3ee1c7a231380bd.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d3ee1c7a231380bd = {
  0xd3ee1c7a231380bd, b_d3ee1c7a231380bd.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d3ee1c7a231380bd, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_cfef4e4c86b5bfbe = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    190, 191, 181, 134,  76,  78, 239, 207,
     41,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  83, 101, 116, 116, 105, 110,
    103, 115,  85, 112, 100,  97, 116, 101,
     67,  97, 108, 108,  98,  97,  99, 107,
     46,  99,  97, 108, 108,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cfef4e4c86b5bfbe = b_cfef4e4c86b5bfbe.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cfef4e4c86b5bfbe[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_cfef4e4c86b5bfbe[] = {0, 1};
static const uint16_t i_cfef4e4c86b5bfbe[] = {0, 1};
const ::capnp::_::RawSchema s_cfef4e4c86b5bfbe = {
  0xcfef4e4c86b5bfbe, b_cfef4e4c86b5bfbe.words, 50, d_cfef4e4c86b5bfbe, m_cfef4e4c86b5bfbe,
  1, 2, i_cfef4e4c86b5bfbe, nullptr, nullptr, { &s_cfef4e4c86b5bfbe, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<66> b_c5e6fc2dfe3ca23b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     59, 162,  60, 254,  45, 252, 230, 197,
     41,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47,  99, 104,
     97, 105, 110,  46,  99,  97, 112, 110,
    112,  58,  83, 101, 116, 116, 105, 110,
    103, 115,  85, 112, 100,  97, 116, 101,
     67,  97, 108, 108,  98,  97,  99, 107,
     46,  99,  97, 108, 108,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,  32,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,  97, 115,  82, 101, 115, 117, 108,
    116,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c5e6fc2dfe3ca23b = b_c5e6fc2dfe3ca23b.words;
#if !CAPNP_LITE
static const uint16_t m_c5e6fc2dfe3ca23b[] = {2, 1, 0};
static const uint16_t i_c5e6fc2dfe3ca23b[] = {0, 1, 2};
const ::capnp::_::RawSchema s_c5e6fc2dfe3ca23b = {
  0xc5e6fc2dfe3ca23b, b_c5e6fc2dfe3ca23b.words, 66, nullptr, m_c5e6fc2dfe3ca23b,
  0, 3, i_c5e6fc2dfe3ca23b, nullptr, nullptr, { &s_c5e6fc2dfe3ca23b, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace ipc {
namespace capnp {
namespace messages {

#if !CAPNP_LITE
::capnp::Request< ::ipc::capnp::messages::Chain::DestroyParams,  ::ipc::capnp::messages::Chain::DestroyResults>
Chain::Client::destroyRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::DestroyParams,  ::ipc::capnp::messages::Chain::DestroyResults>(
      0xddfb1d54c24414b3ull, 0, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::destroy(DestroyContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "destroy",
      0xddfb1d54c24414b3ull, 0);
}
::capnp::Request< ::ipc::capnp::messages::Chain::GetHeightParams,  ::ipc::capnp::messages::Chain::GetHeightResults>
Chain::Client::getHeightRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::GetHeightParams,  ::ipc::capnp::messages::Chain::GetHeightResults>(
      0xddfb1d54c24414b3ull, 1, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::getHeight(GetHeightContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "getHeight",
      0xddfb1d54c24414b3ull, 1);
}
::capnp::Request< ::ipc::capnp::messages::Chain::GetBlockHashParams,  ::ipc::capnp::messages::Chain::GetBlockHashResults>
Chain::Client::getBlockHashRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::GetBlockHashParams,  ::ipc::capnp::messages::Chain::GetBlockHashResults>(
      0xddfb1d54c24414b3ull, 2, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::getBlockHash(GetBlockHashContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "getBlockHash",
      0xddfb1d54c24414b3ull, 2);
}
::capnp::Request< ::ipc::capnp::messages::Chain::HaveBlockOnDiskParams,  ::ipc::capnp::messages::Chain::HaveBlockOnDiskResults>
Chain::Client::haveBlockOnDiskRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::HaveBlockOnDiskParams,  ::ipc::capnp::messages::Chain::HaveBlockOnDiskResults>(
      0xddfb1d54c24414b3ull, 3, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::haveBlockOnDisk(HaveBlockOnDiskContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "haveBlockOnDisk",
      0xddfb1d54c24414b3ull, 3);
}
::capnp::Request< ::ipc::capnp::messages::Chain::GetTipLocatorParams,  ::ipc::capnp::messages::Chain::GetTipLocatorResults>
Chain::Client::getTipLocatorRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::GetTipLocatorParams,  ::ipc::capnp::messages::Chain::GetTipLocatorResults>(
      0xddfb1d54c24414b3ull, 4, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::getTipLocator(GetTipLocatorContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "getTipLocator",
      0xddfb1d54c24414b3ull, 4);
}
::capnp::Request< ::ipc::capnp::messages::Chain::GetActiveChainLocatorParams,  ::ipc::capnp::messages::Chain::GetActiveChainLocatorResults>
Chain::Client::getActiveChainLocatorRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::GetActiveChainLocatorParams,  ::ipc::capnp::messages::Chain::GetActiveChainLocatorResults>(
      0xddfb1d54c24414b3ull, 5, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::getActiveChainLocator(GetActiveChainLocatorContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "getActiveChainLocator",
      0xddfb1d54c24414b3ull, 5);
}
::capnp::Request< ::ipc::capnp::messages::Chain::FindLocatorForkParams,  ::ipc::capnp::messages::Chain::FindLocatorForkResults>
Chain::Client::findLocatorForkRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::FindLocatorForkParams,  ::ipc::capnp::messages::Chain::FindLocatorForkResults>(
      0xddfb1d54c24414b3ull, 6, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::findLocatorFork(FindLocatorForkContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "findLocatorFork",
      0xddfb1d54c24414b3ull, 6);
}
::capnp::Request< ::ipc::capnp::messages::Chain::HasBlockFilterIndexParams,  ::ipc::capnp::messages::Chain::HasBlockFilterIndexResults>
Chain::Client::hasBlockFilterIndexRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::HasBlockFilterIndexParams,  ::ipc::capnp::messages::Chain::HasBlockFilterIndexResults>(
      0xddfb1d54c24414b3ull, 7, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::hasBlockFilterIndex(HasBlockFilterIndexContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "hasBlockFilterIndex",
      0xddfb1d54c24414b3ull, 7);
}
::capnp::Request< ::ipc::capnp::messages::Chain::BlockFilterMatchesAnyParams,  ::ipc::capnp::messages::Chain::BlockFilterMatchesAnyResults>
Chain::Client::blockFilterMatchesAnyRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::BlockFilterMatchesAnyParams,  ::ipc::capnp::messages::Chain::BlockFilterMatchesAnyResults>(
      0xddfb1d54c24414b3ull, 8, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::blockFilterMatchesAny(BlockFilterMatchesAnyContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "blockFilterMatchesAny",
      0xddfb1d54c24414b3ull, 8);
}
::capnp::Request< ::ipc::capnp::messages::Chain::FindBlockParams,  ::ipc::capnp::messages::Chain::FindBlockResults>
Chain::Client::findBlockRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::FindBlockParams,  ::ipc::capnp::messages::Chain::FindBlockResults>(
      0xddfb1d54c24414b3ull, 9, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::findBlock(FindBlockContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "findBlock",
      0xddfb1d54c24414b3ull, 9);
}
::capnp::Request< ::ipc::capnp::messages::Chain::FindFirstBlockWithTimeAndHeightParams,  ::ipc::capnp::messages::Chain::FindFirstBlockWithTimeAndHeightResults>
Chain::Client::findFirstBlockWithTimeAndHeightRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::FindFirstBlockWithTimeAndHeightParams,  ::ipc::capnp::messages::Chain::FindFirstBlockWithTimeAndHeightResults>(
      0xddfb1d54c24414b3ull, 10, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::findFirstBlockWithTimeAndHeight(FindFirstBlockWithTimeAndHeightContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "findFirstBlockWithTimeAndHeight",
      0xddfb1d54c24414b3ull, 10);
}
::capnp::Request< ::ipc::capnp::messages::Chain::FindAncestorByHeightParams,  ::ipc::capnp::messages::Chain::FindAncestorByHeightResults>
Chain::Client::findAncestorByHeightRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::FindAncestorByHeightParams,  ::ipc::capnp::messages::Chain::FindAncestorByHeightResults>(
      0xddfb1d54c24414b3ull, 11, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::findAncestorByHeight(FindAncestorByHeightContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "findAncestorByHeight",
      0xddfb1d54c24414b3ull, 11);
}
::capnp::Request< ::ipc::capnp::messages::Chain::FindAncestorByHashParams,  ::ipc::capnp::messages::Chain::FindAncestorByHashResults>
Chain::Client::findAncestorByHashRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::FindAncestorByHashParams,  ::ipc::capnp::messages::Chain::FindAncestorByHashResults>(
      0xddfb1d54c24414b3ull, 12, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::findAncestorByHash(FindAncestorByHashContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "findAncestorByHash",
      0xddfb1d54c24414b3ull, 12);
}
::capnp::Request< ::ipc::capnp::messages::Chain::FindCommonAncestorParams,  ::ipc::capnp::messages::Chain::FindCommonAncestorResults>
Chain::Client::findCommonAncestorRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::FindCommonAncestorParams,  ::ipc::capnp::messages::Chain::FindCommonAncestorResults>(
      0xddfb1d54c24414b3ull, 13, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::findCommonAncestor(FindCommonAncestorContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "findCommonAncestor",
      0xddfb1d54c24414b3ull, 13);
}
::capnp::Request< ::ipc::capnp::messages::Chain::FindCoinsParams,  ::ipc::capnp::messages::Chain::FindCoinsResults>
Chain::Client::findCoinsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::FindCoinsParams,  ::ipc::capnp::messages::Chain::FindCoinsResults>(
      0xddfb1d54c24414b3ull, 14, sizeHint, {false});
}
::kj::Promise<void> Chain::Server::findCoins(FindCoinsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "findCoins",
      0xddfb1d54c24414b3ull, 14);
}
::capnp::Request< ::ipc::capnp::messages::Chain::GuessVerificationProgressParams,  ::ipc::capnp::messages::Chain::GuessVerificationProgressResults>
Chain::Client::guessVerificationProgressRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::GuessVerificationProgressParams,  ::ipc::capnp::messages::Chain::GuessVerificationProgressResults>(
      0xddfb1d54c24414b3ull, 15, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::guessVerificationProgress(GuessVerificationProgressContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "guessVerificationProgress",
      0xddfb1d54c24414b3ull, 15);
}
::capnp::Request< ::ipc::capnp::messages::Chain::HasBlocksParams,  ::ipc::capnp::messages::Chain::HasBlocksResults>
Chain::Client::hasBlocksRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::HasBlocksParams,  ::ipc::capnp::messages::Chain::HasBlocksResults>(
      0xddfb1d54c24414b3ull, 16, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::hasBlocks(HasBlocksContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "hasBlocks",
      0xddfb1d54c24414b3ull, 16);
}
::capnp::Request< ::ipc::capnp::messages::Chain::IsRBFOptInParams,  ::ipc::capnp::messages::Chain::IsRBFOptInResults>
Chain::Client::isRBFOptInRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::IsRBFOptInParams,  ::ipc::capnp::messages::Chain::IsRBFOptInResults>(
      0xddfb1d54c24414b3ull, 17, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::isRBFOptIn(IsRBFOptInContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "isRBFOptIn",
      0xddfb1d54c24414b3ull, 17);
}
::capnp::Request< ::ipc::capnp::messages::Chain::IsInMempoolParams,  ::ipc::capnp::messages::Chain::IsInMempoolResults>
Chain::Client::isInMempoolRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::IsInMempoolParams,  ::ipc::capnp::messages::Chain::IsInMempoolResults>(
      0xddfb1d54c24414b3ull, 18, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::isInMempool(IsInMempoolContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "isInMempool",
      0xddfb1d54c24414b3ull, 18);
}
::capnp::Request< ::ipc::capnp::messages::Chain::HasDescendantsInMempoolParams,  ::ipc::capnp::messages::Chain::HasDescendantsInMempoolResults>
Chain::Client::hasDescendantsInMempoolRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::HasDescendantsInMempoolParams,  ::ipc::capnp::messages::Chain::HasDescendantsInMempoolResults>(
      0xddfb1d54c24414b3ull, 19, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::hasDescendantsInMempool(HasDescendantsInMempoolContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "hasDescendantsInMempool",
      0xddfb1d54c24414b3ull, 19);
}
::capnp::Request< ::ipc::capnp::messages::Chain::BroadcastTransactionParams,  ::ipc::capnp::messages::Chain::BroadcastTransactionResults>
Chain::Client::broadcastTransactionRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::BroadcastTransactionParams,  ::ipc::capnp::messages::Chain::BroadcastTransactionResults>(
      0xddfb1d54c24414b3ull, 20, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::broadcastTransaction(BroadcastTransactionContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "broadcastTransaction",
      0xddfb1d54c24414b3ull, 20);
}
::capnp::Request< ::ipc::capnp::messages::Chain::GetTransactionAncestryParams,  ::ipc::capnp::messages::Chain::GetTransactionAncestryResults>
Chain::Client::getTransactionAncestryRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::GetTransactionAncestryParams,  ::ipc::capnp::messages::Chain::GetTransactionAncestryResults>(
      0xddfb1d54c24414b3ull, 21, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::getTransactionAncestry(GetTransactionAncestryContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "getTransactionAncestry",
      0xddfb1d54c24414b3ull, 21);
}
::capnp::Request< ::ipc::capnp::messages::Chain::CalculateIndividualBumpFeesParams,  ::ipc::capnp::messages::Chain::CalculateIndividualBumpFeesResults>
Chain::Client::calculateIndividualBumpFeesRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::CalculateIndividualBumpFeesParams,  ::ipc::capnp::messages::Chain::CalculateIndividualBumpFeesResults>(
      0xddfb1d54c24414b3ull, 22, sizeHint, {false});
}
::kj::Promise<void> Chain::Server::calculateIndividualBumpFees(CalculateIndividualBumpFeesContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "calculateIndividualBumpFees",
      0xddfb1d54c24414b3ull, 22);
}
::capnp::Request< ::ipc::capnp::messages::Chain::CalculateCombinedBumpFeeParams,  ::ipc::capnp::messages::Chain::CalculateCombinedBumpFeeResults>
Chain::Client::calculateCombinedBumpFeeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::CalculateCombinedBumpFeeParams,  ::ipc::capnp::messages::Chain::CalculateCombinedBumpFeeResults>(
      0xddfb1d54c24414b3ull, 23, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::calculateCombinedBumpFee(CalculateCombinedBumpFeeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "calculateCombinedBumpFee",
      0xddfb1d54c24414b3ull, 23);
}
::capnp::Request< ::ipc::capnp::messages::Chain::GetPackageLimitsParams,  ::ipc::capnp::messages::Chain::GetPackageLimitsResults>
Chain::Client::getPackageLimitsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::GetPackageLimitsParams,  ::ipc::capnp::messages::Chain::GetPackageLimitsResults>(
      0xddfb1d54c24414b3ull, 24, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::getPackageLimits(GetPackageLimitsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "getPackageLimits",
      0xddfb1d54c24414b3ull, 24);
}
::capnp::Request< ::ipc::capnp::messages::Chain::CheckChainLimitsParams,  ::ipc::capnp::messages::Chain::CheckChainLimitsResults>
Chain::Client::checkChainLimitsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::CheckChainLimitsParams,  ::ipc::capnp::messages::Chain::CheckChainLimitsResults>(
      0xddfb1d54c24414b3ull, 25, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::checkChainLimits(CheckChainLimitsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "checkChainLimits",
      0xddfb1d54c24414b3ull, 25);
}
::capnp::Request< ::ipc::capnp::messages::Chain::EstimateSmartFeeParams,  ::ipc::capnp::messages::Chain::EstimateSmartFeeResults>
Chain::Client::estimateSmartFeeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::EstimateSmartFeeParams,  ::ipc::capnp::messages::Chain::EstimateSmartFeeResults>(
      0xddfb1d54c24414b3ull, 26, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::estimateSmartFee(EstimateSmartFeeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "estimateSmartFee",
      0xddfb1d54c24414b3ull, 26);
}
::capnp::Request< ::ipc::capnp::messages::Chain::EstimateMaxBlocksParams,  ::ipc::capnp::messages::Chain::EstimateMaxBlocksResults>
Chain::Client::estimateMaxBlocksRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::EstimateMaxBlocksParams,  ::ipc::capnp::messages::Chain::EstimateMaxBlocksResults>(
      0xddfb1d54c24414b3ull, 27, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::estimateMaxBlocks(EstimateMaxBlocksContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "estimateMaxBlocks",
      0xddfb1d54c24414b3ull, 27);
}
::capnp::Request< ::ipc::capnp::messages::Chain::MempoolMinFeeParams,  ::ipc::capnp::messages::Chain::MempoolMinFeeResults>
Chain::Client::mempoolMinFeeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::MempoolMinFeeParams,  ::ipc::capnp::messages::Chain::MempoolMinFeeResults>(
      0xddfb1d54c24414b3ull, 28, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::mempoolMinFee(MempoolMinFeeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "mempoolMinFee",
      0xddfb1d54c24414b3ull, 28);
}
::capnp::Request< ::ipc::capnp::messages::Chain::RelayMinFeeParams,  ::ipc::capnp::messages::Chain::RelayMinFeeResults>
Chain::Client::relayMinFeeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::RelayMinFeeParams,  ::ipc::capnp::messages::Chain::RelayMinFeeResults>(
      0xddfb1d54c24414b3ull, 29, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::relayMinFee(RelayMinFeeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "relayMinFee",
      0xddfb1d54c24414b3ull, 29);
}
::capnp::Request< ::ipc::capnp::messages::Chain::RelayIncrementalFeeParams,  ::ipc::capnp::messages::Chain::RelayIncrementalFeeResults>
Chain::Client::relayIncrementalFeeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::RelayIncrementalFeeParams,  ::ipc::capnp::messages::Chain::RelayIncrementalFeeResults>(
      0xddfb1d54c24414b3ull, 30, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::relayIncrementalFee(RelayIncrementalFeeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "relayIncrementalFee",
      0xddfb1d54c24414b3ull, 30);
}
::capnp::Request< ::ipc::capnp::messages::Chain::RelayDustFeeParams,  ::ipc::capnp::messages::Chain::RelayDustFeeResults>
Chain::Client::relayDustFeeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::RelayDustFeeParams,  ::ipc::capnp::messages::Chain::RelayDustFeeResults>(
      0xddfb1d54c24414b3ull, 31, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::relayDustFee(RelayDustFeeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "relayDustFee",
      0xddfb1d54c24414b3ull, 31);
}
::capnp::Request< ::ipc::capnp::messages::Chain::HavePrunedParams,  ::ipc::capnp::messages::Chain::HavePrunedResults>
Chain::Client::havePrunedRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::HavePrunedParams,  ::ipc::capnp::messages::Chain::HavePrunedResults>(
      0xddfb1d54c24414b3ull, 32, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::havePruned(HavePrunedContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "havePruned",
      0xddfb1d54c24414b3ull, 32);
}
::capnp::Request< ::ipc::capnp::messages::Chain::GetPruneHeightParams,  ::ipc::capnp::messages::Chain::GetPruneHeightResults>
Chain::Client::getPruneHeightRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::GetPruneHeightParams,  ::ipc::capnp::messages::Chain::GetPruneHeightResults>(
      0xddfb1d54c24414b3ull, 33, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::getPruneHeight(GetPruneHeightContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "getPruneHeight",
      0xddfb1d54c24414b3ull, 33);
}
::capnp::Request< ::ipc::capnp::messages::Chain::IsReadyToBroadcastParams,  ::ipc::capnp::messages::Chain::IsReadyToBroadcastResults>
Chain::Client::isReadyToBroadcastRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::IsReadyToBroadcastParams,  ::ipc::capnp::messages::Chain::IsReadyToBroadcastResults>(
      0xddfb1d54c24414b3ull, 34, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::isReadyToBroadcast(IsReadyToBroadcastContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "isReadyToBroadcast",
      0xddfb1d54c24414b3ull, 34);
}
::capnp::Request< ::ipc::capnp::messages::Chain::IsInitialBlockDownloadParams,  ::ipc::capnp::messages::Chain::IsInitialBlockDownloadResults>
Chain::Client::isInitialBlockDownloadRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::IsInitialBlockDownloadParams,  ::ipc::capnp::messages::Chain::IsInitialBlockDownloadResults>(
      0xddfb1d54c24414b3ull, 35, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::isInitialBlockDownload(IsInitialBlockDownloadContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "isInitialBlockDownload",
      0xddfb1d54c24414b3ull, 35);
}
::capnp::Request< ::ipc::capnp::messages::Chain::ShutdownRequestedParams,  ::ipc::capnp::messages::Chain::ShutdownRequestedResults>
Chain::Client::shutdownRequestedRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::ShutdownRequestedParams,  ::ipc::capnp::messages::Chain::ShutdownRequestedResults>(
      0xddfb1d54c24414b3ull, 36, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::shutdownRequested(ShutdownRequestedContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "shutdownRequested",
      0xddfb1d54c24414b3ull, 36);
}
::capnp::Request< ::ipc::capnp::messages::Chain::InitMessageParams,  ::ipc::capnp::messages::Chain::InitMessageResults>
Chain::Client::initMessageRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::InitMessageParams,  ::ipc::capnp::messages::Chain::InitMessageResults>(
      0xddfb1d54c24414b3ull, 37, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::initMessage(InitMessageContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "initMessage",
      0xddfb1d54c24414b3ull, 37);
}
::capnp::Request< ::ipc::capnp::messages::Chain::InitWarningParams,  ::ipc::capnp::messages::Chain::InitWarningResults>
Chain::Client::initWarningRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::InitWarningParams,  ::ipc::capnp::messages::Chain::InitWarningResults>(
      0xddfb1d54c24414b3ull, 38, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::initWarning(InitWarningContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "initWarning",
      0xddfb1d54c24414b3ull, 38);
}
::capnp::Request< ::ipc::capnp::messages::Chain::InitErrorParams,  ::ipc::capnp::messages::Chain::InitErrorResults>
Chain::Client::initErrorRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::InitErrorParams,  ::ipc::capnp::messages::Chain::InitErrorResults>(
      0xddfb1d54c24414b3ull, 39, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::initError(InitErrorContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "initError",
      0xddfb1d54c24414b3ull, 39);
}
::capnp::Request< ::ipc::capnp::messages::Chain::ShowProgressParams,  ::ipc::capnp::messages::Chain::ShowProgressResults>
Chain::Client::showProgressRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::ShowProgressParams,  ::ipc::capnp::messages::Chain::ShowProgressResults>(
      0xddfb1d54c24414b3ull, 40, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::showProgress(ShowProgressContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "showProgress",
      0xddfb1d54c24414b3ull, 40);
}
::capnp::Request< ::ipc::capnp::messages::Chain::HandleNotificationsParams,  ::ipc::capnp::messages::Chain::HandleNotificationsResults>
Chain::Client::handleNotificationsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::HandleNotificationsParams,  ::ipc::capnp::messages::Chain::HandleNotificationsResults>(
      0xddfb1d54c24414b3ull, 41, sizeHint, {false});
}
::kj::Promise<void> Chain::Server::handleNotifications(HandleNotificationsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "handleNotifications",
      0xddfb1d54c24414b3ull, 41);
}
::capnp::Request< ::ipc::capnp::messages::Chain::WaitForNotificationsIfTipChangedParams,  ::ipc::capnp::messages::Chain::WaitForNotificationsIfTipChangedResults>
Chain::Client::waitForNotificationsIfTipChangedRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::WaitForNotificationsIfTipChangedParams,  ::ipc::capnp::messages::Chain::WaitForNotificationsIfTipChangedResults>(
      0xddfb1d54c24414b3ull, 42, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::waitForNotificationsIfTipChanged(WaitForNotificationsIfTipChangedContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "waitForNotificationsIfTipChanged",
      0xddfb1d54c24414b3ull, 42);
}
::capnp::Request< ::ipc::capnp::messages::Chain::HandleRpcParams,  ::ipc::capnp::messages::Chain::HandleRpcResults>
Chain::Client::handleRpcRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::HandleRpcParams,  ::ipc::capnp::messages::Chain::HandleRpcResults>(
      0xddfb1d54c24414b3ull, 43, sizeHint, {false});
}
::kj::Promise<void> Chain::Server::handleRpc(HandleRpcContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "handleRpc",
      0xddfb1d54c24414b3ull, 43);
}
::capnp::Request< ::ipc::capnp::messages::Chain::RpcEnableDeprecatedParams,  ::ipc::capnp::messages::Chain::RpcEnableDeprecatedResults>
Chain::Client::rpcEnableDeprecatedRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::RpcEnableDeprecatedParams,  ::ipc::capnp::messages::Chain::RpcEnableDeprecatedResults>(
      0xddfb1d54c24414b3ull, 44, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::rpcEnableDeprecated(RpcEnableDeprecatedContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "rpcEnableDeprecated",
      0xddfb1d54c24414b3ull, 44);
}
::capnp::Request< ::ipc::capnp::messages::Chain::RpcRunLaterParams,  ::ipc::capnp::messages::Chain::RpcRunLaterResults>
Chain::Client::rpcRunLaterRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::RpcRunLaterParams,  ::ipc::capnp::messages::Chain::RpcRunLaterResults>(
      0xddfb1d54c24414b3ull, 45, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::rpcRunLater(RpcRunLaterContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "rpcRunLater",
      0xddfb1d54c24414b3ull, 45);
}
::capnp::Request< ::ipc::capnp::messages::Chain::GetSettingParams,  ::ipc::capnp::messages::Chain::GetSettingResults>
Chain::Client::getSettingRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::GetSettingParams,  ::ipc::capnp::messages::Chain::GetSettingResults>(
      0xddfb1d54c24414b3ull, 46, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::getSetting(GetSettingContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "getSetting",
      0xddfb1d54c24414b3ull, 46);
}
::capnp::Request< ::ipc::capnp::messages::Chain::GetSettingsListParams,  ::ipc::capnp::messages::Chain::GetSettingsListResults>
Chain::Client::getSettingsListRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::GetSettingsListParams,  ::ipc::capnp::messages::Chain::GetSettingsListResults>(
      0xddfb1d54c24414b3ull, 47, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::getSettingsList(GetSettingsListContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "getSettingsList",
      0xddfb1d54c24414b3ull, 47);
}
::capnp::Request< ::ipc::capnp::messages::Chain::GetRwSettingParams,  ::ipc::capnp::messages::Chain::GetRwSettingResults>
Chain::Client::getRwSettingRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::GetRwSettingParams,  ::ipc::capnp::messages::Chain::GetRwSettingResults>(
      0xddfb1d54c24414b3ull, 48, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::getRwSetting(GetRwSettingContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "getRwSetting",
      0xddfb1d54c24414b3ull, 48);
}
::capnp::Request< ::ipc::capnp::messages::Chain::UpdateRwSettingParams,  ::ipc::capnp::messages::Chain::UpdateRwSettingResults>
Chain::Client::updateRwSettingRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::UpdateRwSettingParams,  ::ipc::capnp::messages::Chain::UpdateRwSettingResults>(
      0xddfb1d54c24414b3ull, 49, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::updateRwSetting(UpdateRwSettingContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "updateRwSetting",
      0xddfb1d54c24414b3ull, 49);
}
::capnp::Request< ::ipc::capnp::messages::Chain::OverwriteRwSettingParams,  ::ipc::capnp::messages::Chain::OverwriteRwSettingResults>
Chain::Client::overwriteRwSettingRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::OverwriteRwSettingParams,  ::ipc::capnp::messages::Chain::OverwriteRwSettingResults>(
      0xddfb1d54c24414b3ull, 50, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::overwriteRwSetting(OverwriteRwSettingContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "overwriteRwSetting",
      0xddfb1d54c24414b3ull, 50);
}
::capnp::Request< ::ipc::capnp::messages::Chain::DeleteRwSettingsParams,  ::ipc::capnp::messages::Chain::DeleteRwSettingsResults>
Chain::Client::deleteRwSettingsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::DeleteRwSettingsParams,  ::ipc::capnp::messages::Chain::DeleteRwSettingsResults>(
      0xddfb1d54c24414b3ull, 51, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::deleteRwSettings(DeleteRwSettingsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "deleteRwSettings",
      0xddfb1d54c24414b3ull, 51);
}
::capnp::Request< ::ipc::capnp::messages::Chain::RequestMempoolTransactionsParams,  ::ipc::capnp::messages::Chain::RequestMempoolTransactionsResults>
Chain::Client::requestMempoolTransactionsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::RequestMempoolTransactionsParams,  ::ipc::capnp::messages::Chain::RequestMempoolTransactionsResults>(
      0xddfb1d54c24414b3ull, 52, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::requestMempoolTransactions(RequestMempoolTransactionsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "requestMempoolTransactions",
      0xddfb1d54c24414b3ull, 52);
}
::capnp::Request< ::ipc::capnp::messages::Chain::HasAssumedValidChainParams,  ::ipc::capnp::messages::Chain::HasAssumedValidChainResults>
Chain::Client::hasAssumedValidChainRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Chain::HasAssumedValidChainParams,  ::ipc::capnp::messages::Chain::HasAssumedValidChainResults>(
      0xddfb1d54c24414b3ull, 53, sizeHint, {true});
}
::kj::Promise<void> Chain::Server::hasAssumedValidChain(HasAssumedValidChainContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:Chain", "hasAssumedValidChain",
      0xddfb1d54c24414b3ull, 53);
}
::capnp::Capability::Server::DispatchCallResult Chain::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xddfb1d54c24414b3ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("capnp/chain.capnp:Chain", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Chain::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        destroy(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::DestroyParams,  ::ipc::capnp::messages::Chain::DestroyResults>(context)),
        false,
        false
      };
    case 1:
      return {
        getHeight(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::GetHeightParams,  ::ipc::capnp::messages::Chain::GetHeightResults>(context)),
        false,
        false
      };
    case 2:
      return {
        getBlockHash(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::GetBlockHashParams,  ::ipc::capnp::messages::Chain::GetBlockHashResults>(context)),
        false,
        false
      };
    case 3:
      return {
        haveBlockOnDisk(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::HaveBlockOnDiskParams,  ::ipc::capnp::messages::Chain::HaveBlockOnDiskResults>(context)),
        false,
        false
      };
    case 4:
      return {
        getTipLocator(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::GetTipLocatorParams,  ::ipc::capnp::messages::Chain::GetTipLocatorResults>(context)),
        false,
        false
      };
    case 5:
      return {
        getActiveChainLocator(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::GetActiveChainLocatorParams,  ::ipc::capnp::messages::Chain::GetActiveChainLocatorResults>(context)),
        false,
        false
      };
    case 6:
      return {
        findLocatorFork(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::FindLocatorForkParams,  ::ipc::capnp::messages::Chain::FindLocatorForkResults>(context)),
        false,
        false
      };
    case 7:
      return {
        hasBlockFilterIndex(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::HasBlockFilterIndexParams,  ::ipc::capnp::messages::Chain::HasBlockFilterIndexResults>(context)),
        false,
        false
      };
    case 8:
      return {
        blockFilterMatchesAny(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::BlockFilterMatchesAnyParams,  ::ipc::capnp::messages::Chain::BlockFilterMatchesAnyResults>(context)),
        false,
        false
      };
    case 9:
      return {
        findBlock(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::FindBlockParams,  ::ipc::capnp::messages::Chain::FindBlockResults>(context)),
        false,
        false
      };
    case 10:
      return {
        findFirstBlockWithTimeAndHeight(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::FindFirstBlockWithTimeAndHeightParams,  ::ipc::capnp::messages::Chain::FindFirstBlockWithTimeAndHeightResults>(context)),
        false,
        false
      };
    case 11:
      return {
        findAncestorByHeight(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::FindAncestorByHeightParams,  ::ipc::capnp::messages::Chain::FindAncestorByHeightResults>(context)),
        false,
        false
      };
    case 12:
      return {
        findAncestorByHash(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::FindAncestorByHashParams,  ::ipc::capnp::messages::Chain::FindAncestorByHashResults>(context)),
        false,
        false
      };
    case 13:
      return {
        findCommonAncestor(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::FindCommonAncestorParams,  ::ipc::capnp::messages::Chain::FindCommonAncestorResults>(context)),
        false,
        false
      };
    case 14:
      return {
        findCoins(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::FindCoinsParams,  ::ipc::capnp::messages::Chain::FindCoinsResults>(context)),
        false,
        false
      };
    case 15:
      return {
        guessVerificationProgress(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::GuessVerificationProgressParams,  ::ipc::capnp::messages::Chain::GuessVerificationProgressResults>(context)),
        false,
        false
      };
    case 16:
      return {
        hasBlocks(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::HasBlocksParams,  ::ipc::capnp::messages::Chain::HasBlocksResults>(context)),
        false,
        false
      };
    case 17:
      return {
        isRBFOptIn(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::IsRBFOptInParams,  ::ipc::capnp::messages::Chain::IsRBFOptInResults>(context)),
        false,
        false
      };
    case 18:
      return {
        isInMempool(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::IsInMempoolParams,  ::ipc::capnp::messages::Chain::IsInMempoolResults>(context)),
        false,
        false
      };
    case 19:
      return {
        hasDescendantsInMempool(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::HasDescendantsInMempoolParams,  ::ipc::capnp::messages::Chain::HasDescendantsInMempoolResults>(context)),
        false,
        false
      };
    case 20:
      return {
        broadcastTransaction(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::BroadcastTransactionParams,  ::ipc::capnp::messages::Chain::BroadcastTransactionResults>(context)),
        false,
        false
      };
    case 21:
      return {
        getTransactionAncestry(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::GetTransactionAncestryParams,  ::ipc::capnp::messages::Chain::GetTransactionAncestryResults>(context)),
        false,
        false
      };
    case 22:
      return {
        calculateIndividualBumpFees(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::CalculateIndividualBumpFeesParams,  ::ipc::capnp::messages::Chain::CalculateIndividualBumpFeesResults>(context)),
        false,
        false
      };
    case 23:
      return {
        calculateCombinedBumpFee(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::CalculateCombinedBumpFeeParams,  ::ipc::capnp::messages::Chain::CalculateCombinedBumpFeeResults>(context)),
        false,
        false
      };
    case 24:
      return {
        getPackageLimits(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::GetPackageLimitsParams,  ::ipc::capnp::messages::Chain::GetPackageLimitsResults>(context)),
        false,
        false
      };
    case 25:
      return {
        checkChainLimits(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::CheckChainLimitsParams,  ::ipc::capnp::messages::Chain::CheckChainLimitsResults>(context)),
        false,
        false
      };
    case 26:
      return {
        estimateSmartFee(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::EstimateSmartFeeParams,  ::ipc::capnp::messages::Chain::EstimateSmartFeeResults>(context)),
        false,
        false
      };
    case 27:
      return {
        estimateMaxBlocks(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::EstimateMaxBlocksParams,  ::ipc::capnp::messages::Chain::EstimateMaxBlocksResults>(context)),
        false,
        false
      };
    case 28:
      return {
        mempoolMinFee(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::MempoolMinFeeParams,  ::ipc::capnp::messages::Chain::MempoolMinFeeResults>(context)),
        false,
        false
      };
    case 29:
      return {
        relayMinFee(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::RelayMinFeeParams,  ::ipc::capnp::messages::Chain::RelayMinFeeResults>(context)),
        false,
        false
      };
    case 30:
      return {
        relayIncrementalFee(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::RelayIncrementalFeeParams,  ::ipc::capnp::messages::Chain::RelayIncrementalFeeResults>(context)),
        false,
        false
      };
    case 31:
      return {
        relayDustFee(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::RelayDustFeeParams,  ::ipc::capnp::messages::Chain::RelayDustFeeResults>(context)),
        false,
        false
      };
    case 32:
      return {
        havePruned(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::HavePrunedParams,  ::ipc::capnp::messages::Chain::HavePrunedResults>(context)),
        false,
        false
      };
    case 33:
      return {
        getPruneHeight(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::GetPruneHeightParams,  ::ipc::capnp::messages::Chain::GetPruneHeightResults>(context)),
        false,
        false
      };
    case 34:
      return {
        isReadyToBroadcast(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::IsReadyToBroadcastParams,  ::ipc::capnp::messages::Chain::IsReadyToBroadcastResults>(context)),
        false,
        false
      };
    case 35:
      return {
        isInitialBlockDownload(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::IsInitialBlockDownloadParams,  ::ipc::capnp::messages::Chain::IsInitialBlockDownloadResults>(context)),
        false,
        false
      };
    case 36:
      return {
        shutdownRequested(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::ShutdownRequestedParams,  ::ipc::capnp::messages::Chain::ShutdownRequestedResults>(context)),
        false,
        false
      };
    case 37:
      return {
        initMessage(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::InitMessageParams,  ::ipc::capnp::messages::Chain::InitMessageResults>(context)),
        false,
        false
      };
    case 38:
      return {
        initWarning(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::InitWarningParams,  ::ipc::capnp::messages::Chain::InitWarningResults>(context)),
        false,
        false
      };
    case 39:
      return {
        initError(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::InitErrorParams,  ::ipc::capnp::messages::Chain::InitErrorResults>(context)),
        false,
        false
      };
    case 40:
      return {
        showProgress(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::ShowProgressParams,  ::ipc::capnp::messages::Chain::ShowProgressResults>(context)),
        false,
        false
      };
    case 41:
      return {
        handleNotifications(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::HandleNotificationsParams,  ::ipc::capnp::messages::Chain::HandleNotificationsResults>(context)),
        false,
        false
      };
    case 42:
      return {
        waitForNotificationsIfTipChanged(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::WaitForNotificationsIfTipChangedParams,  ::ipc::capnp::messages::Chain::WaitForNotificationsIfTipChangedResults>(context)),
        false,
        false
      };
    case 43:
      return {
        handleRpc(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::HandleRpcParams,  ::ipc::capnp::messages::Chain::HandleRpcResults>(context)),
        false,
        false
      };
    case 44:
      return {
        rpcEnableDeprecated(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::RpcEnableDeprecatedParams,  ::ipc::capnp::messages::Chain::RpcEnableDeprecatedResults>(context)),
        false,
        false
      };
    case 45:
      return {
        rpcRunLater(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::RpcRunLaterParams,  ::ipc::capnp::messages::Chain::RpcRunLaterResults>(context)),
        false,
        false
      };
    case 46:
      return {
        getSetting(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::GetSettingParams,  ::ipc::capnp::messages::Chain::GetSettingResults>(context)),
        false,
        false
      };
    case 47:
      return {
        getSettingsList(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::GetSettingsListParams,  ::ipc::capnp::messages::Chain::GetSettingsListResults>(context)),
        false,
        false
      };
    case 48:
      return {
        getRwSetting(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::GetRwSettingParams,  ::ipc::capnp::messages::Chain::GetRwSettingResults>(context)),
        false,
        false
      };
    case 49:
      return {
        updateRwSetting(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::UpdateRwSettingParams,  ::ipc::capnp::messages::Chain::UpdateRwSettingResults>(context)),
        false,
        false
      };
    case 50:
      return {
        overwriteRwSetting(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::OverwriteRwSettingParams,  ::ipc::capnp::messages::Chain::OverwriteRwSettingResults>(context)),
        false,
        false
      };
    case 51:
      return {
        deleteRwSettings(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::DeleteRwSettingsParams,  ::ipc::capnp::messages::Chain::DeleteRwSettingsResults>(context)),
        false,
        false
      };
    case 52:
      return {
        requestMempoolTransactions(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::RequestMempoolTransactionsParams,  ::ipc::capnp::messages::Chain::RequestMempoolTransactionsResults>(context)),
        false,
        false
      };
    case 53:
      return {
        hasAssumedValidChain(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Chain::HasAssumedValidChainParams,  ::ipc::capnp::messages::Chain::HasAssumedValidChainResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "capnp/chain.capnp:Chain",
          0xddfb1d54c24414b3ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Chain
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::DestroyParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::DestroyParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::DestroyParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::DestroyParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::DestroyParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::DestroyResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::DestroyResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::DestroyResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::DestroyResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::DestroyResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::GetHeightParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::GetHeightParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::GetHeightParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::GetHeightParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::GetHeightParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::GetHeightResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::GetHeightResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::GetHeightResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::GetHeightResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::GetHeightResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::GetBlockHashParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::GetBlockHashParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::GetBlockHashParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::GetBlockHashParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::GetBlockHashParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::GetBlockHashResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::GetBlockHashResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::GetBlockHashResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::GetBlockHashResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::GetBlockHashResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::HaveBlockOnDiskParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::HaveBlockOnDiskParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::HaveBlockOnDiskParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::HaveBlockOnDiskParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::HaveBlockOnDiskParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::HaveBlockOnDiskResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::HaveBlockOnDiskResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::HaveBlockOnDiskResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::HaveBlockOnDiskResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::HaveBlockOnDiskResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::GetTipLocatorParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::GetTipLocatorParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::GetTipLocatorParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::GetTipLocatorParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::GetTipLocatorParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::GetTipLocatorResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::GetTipLocatorResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::GetTipLocatorResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::GetTipLocatorResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::GetTipLocatorResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::GetActiveChainLocatorParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::GetActiveChainLocatorParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::GetActiveChainLocatorParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::GetActiveChainLocatorParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::GetActiveChainLocatorParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::GetActiveChainLocatorResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::GetActiveChainLocatorResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::GetActiveChainLocatorResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::GetActiveChainLocatorResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::GetActiveChainLocatorResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::FindLocatorForkParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::FindLocatorForkParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::FindLocatorForkParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::FindLocatorForkParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::FindLocatorForkParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::FindLocatorForkResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::FindLocatorForkResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::FindLocatorForkResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::FindLocatorForkResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::FindLocatorForkResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::HasBlockFilterIndexParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::HasBlockFilterIndexParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::HasBlockFilterIndexParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::HasBlockFilterIndexParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::HasBlockFilterIndexParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::HasBlockFilterIndexResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::HasBlockFilterIndexResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::HasBlockFilterIndexResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::HasBlockFilterIndexResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::HasBlockFilterIndexResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::BlockFilterMatchesAnyParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::BlockFilterMatchesAnyParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::BlockFilterMatchesAnyParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::BlockFilterMatchesAnyParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::BlockFilterMatchesAnyParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::BlockFilterMatchesAnyResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::BlockFilterMatchesAnyResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::BlockFilterMatchesAnyResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::BlockFilterMatchesAnyResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::BlockFilterMatchesAnyResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::FindBlockParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::FindBlockParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::FindBlockParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::FindBlockParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::FindBlockParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::FindBlockResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::FindBlockResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::FindBlockResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::FindBlockResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::FindBlockResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::FindFirstBlockWithTimeAndHeightParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::FindFirstBlockWithTimeAndHeightParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::FindFirstBlockWithTimeAndHeightParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::FindFirstBlockWithTimeAndHeightParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::FindFirstBlockWithTimeAndHeightParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::FindFirstBlockWithTimeAndHeightResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::FindFirstBlockWithTimeAndHeightResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::FindFirstBlockWithTimeAndHeightResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::FindFirstBlockWithTimeAndHeightResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::FindFirstBlockWithTimeAndHeightResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::FindAncestorByHeightParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::FindAncestorByHeightParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::FindAncestorByHeightParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::FindAncestorByHeightParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::FindAncestorByHeightParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::FindAncestorByHeightResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::FindAncestorByHeightResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::FindAncestorByHeightResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::FindAncestorByHeightResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::FindAncestorByHeightResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::FindAncestorByHashParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::FindAncestorByHashParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::FindAncestorByHashParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::FindAncestorByHashParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::FindAncestorByHashParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::FindAncestorByHashResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::FindAncestorByHashResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::FindAncestorByHashResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::FindAncestorByHashResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::FindAncestorByHashResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::FindCommonAncestorParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::FindCommonAncestorParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::FindCommonAncestorParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::FindCommonAncestorParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::FindCommonAncestorParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::FindCommonAncestorResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::FindCommonAncestorResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::FindCommonAncestorResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::FindCommonAncestorResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::FindCommonAncestorResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::FindCoinsParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::FindCoinsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::FindCoinsParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::FindCoinsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::FindCoinsParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::FindCoinsResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::FindCoinsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::FindCoinsResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::FindCoinsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::FindCoinsResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::GuessVerificationProgressParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::GuessVerificationProgressParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::GuessVerificationProgressParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::GuessVerificationProgressParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::GuessVerificationProgressParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::GuessVerificationProgressResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::GuessVerificationProgressResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::GuessVerificationProgressResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::GuessVerificationProgressResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::GuessVerificationProgressResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::HasBlocksParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::HasBlocksParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::HasBlocksParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::HasBlocksParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::HasBlocksParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::HasBlocksResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::HasBlocksResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::HasBlocksResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::HasBlocksResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::HasBlocksResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::IsRBFOptInParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::IsRBFOptInParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::IsRBFOptInParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::IsRBFOptInParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::IsRBFOptInParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::IsRBFOptInResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::IsRBFOptInResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::IsRBFOptInResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::IsRBFOptInResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::IsRBFOptInResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::IsInMempoolParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::IsInMempoolParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::IsInMempoolParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::IsInMempoolParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::IsInMempoolParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::IsInMempoolResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::IsInMempoolResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::IsInMempoolResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::IsInMempoolResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::IsInMempoolResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::HasDescendantsInMempoolParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::HasDescendantsInMempoolParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::HasDescendantsInMempoolParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::HasDescendantsInMempoolParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::HasDescendantsInMempoolParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::HasDescendantsInMempoolResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::HasDescendantsInMempoolResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::HasDescendantsInMempoolResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::HasDescendantsInMempoolResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::HasDescendantsInMempoolResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::BroadcastTransactionParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::BroadcastTransactionParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::BroadcastTransactionParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::BroadcastTransactionParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::BroadcastTransactionParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::BroadcastTransactionResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::BroadcastTransactionResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::BroadcastTransactionResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::BroadcastTransactionResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::BroadcastTransactionResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::GetTransactionAncestryParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::GetTransactionAncestryParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::GetTransactionAncestryParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::GetTransactionAncestryParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::GetTransactionAncestryParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::GetTransactionAncestryResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::GetTransactionAncestryResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::GetTransactionAncestryResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::GetTransactionAncestryResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::GetTransactionAncestryResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::CalculateIndividualBumpFeesParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::CalculateIndividualBumpFeesParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::CalculateIndividualBumpFeesParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::CalculateIndividualBumpFeesParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::CalculateIndividualBumpFeesParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::CalculateIndividualBumpFeesResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::CalculateIndividualBumpFeesResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::CalculateIndividualBumpFeesResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::CalculateIndividualBumpFeesResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::CalculateIndividualBumpFeesResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::CalculateCombinedBumpFeeParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::CalculateCombinedBumpFeeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::CalculateCombinedBumpFeeParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::CalculateCombinedBumpFeeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::CalculateCombinedBumpFeeParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::CalculateCombinedBumpFeeResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::CalculateCombinedBumpFeeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::CalculateCombinedBumpFeeResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::CalculateCombinedBumpFeeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::CalculateCombinedBumpFeeResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::GetPackageLimitsParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::GetPackageLimitsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::GetPackageLimitsParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::GetPackageLimitsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::GetPackageLimitsParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::GetPackageLimitsResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::GetPackageLimitsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::GetPackageLimitsResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::GetPackageLimitsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::GetPackageLimitsResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::CheckChainLimitsParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::CheckChainLimitsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::CheckChainLimitsParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::CheckChainLimitsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::CheckChainLimitsParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::CheckChainLimitsResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::CheckChainLimitsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::CheckChainLimitsResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::CheckChainLimitsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::CheckChainLimitsResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::EstimateSmartFeeParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::EstimateSmartFeeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::EstimateSmartFeeParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::EstimateSmartFeeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::EstimateSmartFeeParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::EstimateSmartFeeResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::EstimateSmartFeeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::EstimateSmartFeeResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::EstimateSmartFeeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::EstimateSmartFeeResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::EstimateMaxBlocksParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::EstimateMaxBlocksParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::EstimateMaxBlocksParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::EstimateMaxBlocksParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::EstimateMaxBlocksParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::EstimateMaxBlocksResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::EstimateMaxBlocksResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::EstimateMaxBlocksResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::EstimateMaxBlocksResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::EstimateMaxBlocksResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::MempoolMinFeeParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::MempoolMinFeeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::MempoolMinFeeParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::MempoolMinFeeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::MempoolMinFeeParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::MempoolMinFeeResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::MempoolMinFeeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::MempoolMinFeeResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::MempoolMinFeeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::MempoolMinFeeResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::RelayMinFeeParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::RelayMinFeeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::RelayMinFeeParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::RelayMinFeeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::RelayMinFeeParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::RelayMinFeeResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::RelayMinFeeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::RelayMinFeeResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::RelayMinFeeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::RelayMinFeeResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::RelayIncrementalFeeParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::RelayIncrementalFeeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::RelayIncrementalFeeParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::RelayIncrementalFeeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::RelayIncrementalFeeParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::RelayIncrementalFeeResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::RelayIncrementalFeeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::RelayIncrementalFeeResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::RelayIncrementalFeeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::RelayIncrementalFeeResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::RelayDustFeeParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::RelayDustFeeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::RelayDustFeeParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::RelayDustFeeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::RelayDustFeeParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::RelayDustFeeResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::RelayDustFeeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::RelayDustFeeResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::RelayDustFeeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::RelayDustFeeResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::HavePrunedParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::HavePrunedParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::HavePrunedParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::HavePrunedParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::HavePrunedParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::HavePrunedResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::HavePrunedResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::HavePrunedResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::HavePrunedResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::HavePrunedResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::GetPruneHeightParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::GetPruneHeightParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::GetPruneHeightParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::GetPruneHeightParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::GetPruneHeightParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::GetPruneHeightResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::GetPruneHeightResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::GetPruneHeightResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::GetPruneHeightResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::GetPruneHeightResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::IsReadyToBroadcastParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::IsReadyToBroadcastParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::IsReadyToBroadcastParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::IsReadyToBroadcastParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::IsReadyToBroadcastParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::IsReadyToBroadcastResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::IsReadyToBroadcastResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::IsReadyToBroadcastResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::IsReadyToBroadcastResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::IsReadyToBroadcastResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::IsInitialBlockDownloadParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::IsInitialBlockDownloadParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::IsInitialBlockDownloadParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::IsInitialBlockDownloadParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::IsInitialBlockDownloadParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::IsInitialBlockDownloadResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::IsInitialBlockDownloadResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::IsInitialBlockDownloadResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::IsInitialBlockDownloadResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::IsInitialBlockDownloadResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::ShutdownRequestedParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::ShutdownRequestedParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::ShutdownRequestedParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::ShutdownRequestedParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::ShutdownRequestedParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::ShutdownRequestedResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::ShutdownRequestedResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::ShutdownRequestedResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::ShutdownRequestedResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::ShutdownRequestedResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::InitMessageParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::InitMessageParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::InitMessageParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::InitMessageParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::InitMessageParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::InitMessageResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::InitMessageResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::InitMessageResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::InitMessageResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::InitMessageResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::InitWarningParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::InitWarningParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::InitWarningParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::InitWarningParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::InitWarningParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::InitWarningResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::InitWarningResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::InitWarningResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::InitWarningResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::InitWarningResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::InitErrorParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::InitErrorParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::InitErrorParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::InitErrorParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::InitErrorParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::InitErrorResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::InitErrorResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::InitErrorResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::InitErrorResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::InitErrorResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::ShowProgressParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::ShowProgressParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::ShowProgressParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::ShowProgressParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::ShowProgressParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::ShowProgressResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::ShowProgressResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::ShowProgressResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::ShowProgressResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::ShowProgressResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::HandleNotificationsParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::HandleNotificationsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::HandleNotificationsParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::HandleNotificationsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::HandleNotificationsParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::HandleNotificationsResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::HandleNotificationsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::HandleNotificationsResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::HandleNotificationsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::HandleNotificationsResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::WaitForNotificationsIfTipChangedParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::WaitForNotificationsIfTipChangedParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::WaitForNotificationsIfTipChangedParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::WaitForNotificationsIfTipChangedParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::WaitForNotificationsIfTipChangedParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::WaitForNotificationsIfTipChangedResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::WaitForNotificationsIfTipChangedResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::WaitForNotificationsIfTipChangedResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::WaitForNotificationsIfTipChangedResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::WaitForNotificationsIfTipChangedResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::HandleRpcParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::HandleRpcParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::HandleRpcParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::HandleRpcParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::HandleRpcParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::HandleRpcResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::HandleRpcResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::HandleRpcResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::HandleRpcResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::HandleRpcResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::RpcEnableDeprecatedParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::RpcEnableDeprecatedParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::RpcEnableDeprecatedParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::RpcEnableDeprecatedParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::RpcEnableDeprecatedParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::RpcEnableDeprecatedResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::RpcEnableDeprecatedResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::RpcEnableDeprecatedResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::RpcEnableDeprecatedResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::RpcEnableDeprecatedResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::RpcRunLaterParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::RpcRunLaterParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::RpcRunLaterParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::RpcRunLaterParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::RpcRunLaterParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::RpcRunLaterResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::RpcRunLaterResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::RpcRunLaterResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::RpcRunLaterResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::RpcRunLaterResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::GetSettingParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::GetSettingParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::GetSettingParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::GetSettingParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::GetSettingParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::GetSettingResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::GetSettingResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::GetSettingResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::GetSettingResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::GetSettingResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::GetSettingsListParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::GetSettingsListParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::GetSettingsListParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::GetSettingsListParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::GetSettingsListParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::GetSettingsListResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::GetSettingsListResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::GetSettingsListResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::GetSettingsListResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::GetSettingsListResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::GetRwSettingParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::GetRwSettingParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::GetRwSettingParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::GetRwSettingParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::GetRwSettingParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::GetRwSettingResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::GetRwSettingResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::GetRwSettingResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::GetRwSettingResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::GetRwSettingResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::UpdateRwSettingParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::UpdateRwSettingParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::UpdateRwSettingParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::UpdateRwSettingParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::UpdateRwSettingParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::UpdateRwSettingResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::UpdateRwSettingResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::UpdateRwSettingResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::UpdateRwSettingResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::UpdateRwSettingResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::OverwriteRwSettingParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::OverwriteRwSettingParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::OverwriteRwSettingParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::OverwriteRwSettingParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::OverwriteRwSettingParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::OverwriteRwSettingResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::OverwriteRwSettingResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::OverwriteRwSettingResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::OverwriteRwSettingResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::OverwriteRwSettingResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::DeleteRwSettingsParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::DeleteRwSettingsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::DeleteRwSettingsParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::DeleteRwSettingsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::DeleteRwSettingsParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::DeleteRwSettingsResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::DeleteRwSettingsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::DeleteRwSettingsResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::DeleteRwSettingsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::DeleteRwSettingsResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::RequestMempoolTransactionsParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::RequestMempoolTransactionsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::RequestMempoolTransactionsParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::RequestMempoolTransactionsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::RequestMempoolTransactionsParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::RequestMempoolTransactionsResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::RequestMempoolTransactionsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::RequestMempoolTransactionsResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::RequestMempoolTransactionsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::RequestMempoolTransactionsResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::HasAssumedValidChainParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::HasAssumedValidChainParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::HasAssumedValidChainParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::HasAssumedValidChainParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::HasAssumedValidChainParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Chain::HasAssumedValidChainResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Chain::HasAssumedValidChainResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Chain::HasAssumedValidChainResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Chain::HasAssumedValidChainResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Chain::HasAssumedValidChainResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::ipc::capnp::messages::ChainNotifications::DestroyParams,  ::ipc::capnp::messages::ChainNotifications::DestroyResults>
ChainNotifications::Client::destroyRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::ChainNotifications::DestroyParams,  ::ipc::capnp::messages::ChainNotifications::DestroyResults>(
      0x9ac9db48ba219039ull, 0, sizeHint, {true});
}
::kj::Promise<void> ChainNotifications::Server::destroy(DestroyContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:ChainNotifications", "destroy",
      0x9ac9db48ba219039ull, 0);
}
::capnp::Request< ::ipc::capnp::messages::ChainNotifications::TransactionAddedToMempoolParams,  ::ipc::capnp::messages::ChainNotifications::TransactionAddedToMempoolResults>
ChainNotifications::Client::transactionAddedToMempoolRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::ChainNotifications::TransactionAddedToMempoolParams,  ::ipc::capnp::messages::ChainNotifications::TransactionAddedToMempoolResults>(
      0x9ac9db48ba219039ull, 1, sizeHint, {true});
}
::kj::Promise<void> ChainNotifications::Server::transactionAddedToMempool(TransactionAddedToMempoolContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:ChainNotifications", "transactionAddedToMempool",
      0x9ac9db48ba219039ull, 1);
}
::capnp::Request< ::ipc::capnp::messages::ChainNotifications::TransactionRemovedFromMempoolParams,  ::ipc::capnp::messages::ChainNotifications::TransactionRemovedFromMempoolResults>
ChainNotifications::Client::transactionRemovedFromMempoolRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::ChainNotifications::TransactionRemovedFromMempoolParams,  ::ipc::capnp::messages::ChainNotifications::TransactionRemovedFromMempoolResults>(
      0x9ac9db48ba219039ull, 2, sizeHint, {true});
}
::kj::Promise<void> ChainNotifications::Server::transactionRemovedFromMempool(TransactionRemovedFromMempoolContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:ChainNotifications", "transactionRemovedFromMempool",
      0x9ac9db48ba219039ull, 2);
}
::capnp::Request< ::ipc::capnp::messages::ChainNotifications::BlockConnectedParams,  ::ipc::capnp::messages::ChainNotifications::BlockConnectedResults>
ChainNotifications::Client::blockConnectedRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::ChainNotifications::BlockConnectedParams,  ::ipc::capnp::messages::ChainNotifications::BlockConnectedResults>(
      0x9ac9db48ba219039ull, 3, sizeHint, {true});
}
::kj::Promise<void> ChainNotifications::Server::blockConnected(BlockConnectedContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:ChainNotifications", "blockConnected",
      0x9ac9db48ba219039ull, 3);
}
::capnp::Request< ::ipc::capnp::messages::ChainNotifications::BlockDisconnectedParams,  ::ipc::capnp::messages::ChainNotifications::BlockDisconnectedResults>
ChainNotifications::Client::blockDisconnectedRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::ChainNotifications::BlockDisconnectedParams,  ::ipc::capnp::messages::ChainNotifications::BlockDisconnectedResults>(
      0x9ac9db48ba219039ull, 4, sizeHint, {true});
}
::kj::Promise<void> ChainNotifications::Server::blockDisconnected(BlockDisconnectedContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:ChainNotifications", "blockDisconnected",
      0x9ac9db48ba219039ull, 4);
}
::capnp::Request< ::ipc::capnp::messages::ChainNotifications::UpdatedBlockTipParams,  ::ipc::capnp::messages::ChainNotifications::UpdatedBlockTipResults>
ChainNotifications::Client::updatedBlockTipRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::ChainNotifications::UpdatedBlockTipParams,  ::ipc::capnp::messages::ChainNotifications::UpdatedBlockTipResults>(
      0x9ac9db48ba219039ull, 5, sizeHint, {true});
}
::kj::Promise<void> ChainNotifications::Server::updatedBlockTip(UpdatedBlockTipContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:ChainNotifications", "updatedBlockTip",
      0x9ac9db48ba219039ull, 5);
}
::capnp::Request< ::ipc::capnp::messages::ChainNotifications::ChainStateFlushedParams,  ::ipc::capnp::messages::ChainNotifications::ChainStateFlushedResults>
ChainNotifications::Client::chainStateFlushedRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::ChainNotifications::ChainStateFlushedParams,  ::ipc::capnp::messages::ChainNotifications::ChainStateFlushedResults>(
      0x9ac9db48ba219039ull, 6, sizeHint, {true});
}
::kj::Promise<void> ChainNotifications::Server::chainStateFlushed(ChainStateFlushedContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:ChainNotifications", "chainStateFlushed",
      0x9ac9db48ba219039ull, 6);
}
::capnp::Capability::Server::DispatchCallResult ChainNotifications::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x9ac9db48ba219039ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("capnp/chain.capnp:ChainNotifications", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult ChainNotifications::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        destroy(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::ChainNotifications::DestroyParams,  ::ipc::capnp::messages::ChainNotifications::DestroyResults>(context)),
        false,
        false
      };
    case 1:
      return {
        transactionAddedToMempool(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::ChainNotifications::TransactionAddedToMempoolParams,  ::ipc::capnp::messages::ChainNotifications::TransactionAddedToMempoolResults>(context)),
        false,
        false
      };
    case 2:
      return {
        transactionRemovedFromMempool(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::ChainNotifications::TransactionRemovedFromMempoolParams,  ::ipc::capnp::messages::ChainNotifications::TransactionRemovedFromMempoolResults>(context)),
        false,
        false
      };
    case 3:
      return {
        blockConnected(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::ChainNotifications::BlockConnectedParams,  ::ipc::capnp::messages::ChainNotifications::BlockConnectedResults>(context)),
        false,
        false
      };
    case 4:
      return {
        blockDisconnected(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::ChainNotifications::BlockDisconnectedParams,  ::ipc::capnp::messages::ChainNotifications::BlockDisconnectedResults>(context)),
        false,
        false
      };
    case 5:
      return {
        updatedBlockTip(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::ChainNotifications::UpdatedBlockTipParams,  ::ipc::capnp::messages::ChainNotifications::UpdatedBlockTipResults>(context)),
        false,
        false
      };
    case 6:
      return {
        chainStateFlushed(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::ChainNotifications::ChainStateFlushedParams,  ::ipc::capnp::messages::ChainNotifications::ChainStateFlushedResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "capnp/chain.capnp:ChainNotifications",
          0x9ac9db48ba219039ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// ChainNotifications
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainNotifications::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainNotifications::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainNotifications::DestroyParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainNotifications::DestroyParams::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainNotifications::DestroyParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainNotifications::DestroyParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainNotifications::DestroyParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainNotifications::DestroyResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainNotifications::DestroyResults::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainNotifications::DestroyResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainNotifications::DestroyResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainNotifications::DestroyResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainNotifications::TransactionAddedToMempoolParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainNotifications::TransactionAddedToMempoolParams::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainNotifications::TransactionAddedToMempoolParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainNotifications::TransactionAddedToMempoolParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainNotifications::TransactionAddedToMempoolParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainNotifications::TransactionAddedToMempoolResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainNotifications::TransactionAddedToMempoolResults::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainNotifications::TransactionAddedToMempoolResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainNotifications::TransactionAddedToMempoolResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainNotifications::TransactionAddedToMempoolResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainNotifications::TransactionRemovedFromMempoolParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainNotifications::TransactionRemovedFromMempoolParams::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainNotifications::TransactionRemovedFromMempoolParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainNotifications::TransactionRemovedFromMempoolParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainNotifications::TransactionRemovedFromMempoolParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainNotifications::TransactionRemovedFromMempoolResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainNotifications::TransactionRemovedFromMempoolResults::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainNotifications::TransactionRemovedFromMempoolResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainNotifications::TransactionRemovedFromMempoolResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainNotifications::TransactionRemovedFromMempoolResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainNotifications::BlockConnectedParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainNotifications::BlockConnectedParams::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainNotifications::BlockConnectedParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainNotifications::BlockConnectedParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainNotifications::BlockConnectedParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainNotifications::BlockConnectedResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainNotifications::BlockConnectedResults::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainNotifications::BlockConnectedResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainNotifications::BlockConnectedResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainNotifications::BlockConnectedResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainNotifications::BlockDisconnectedParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainNotifications::BlockDisconnectedParams::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainNotifications::BlockDisconnectedParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainNotifications::BlockDisconnectedParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainNotifications::BlockDisconnectedParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainNotifications::BlockDisconnectedResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainNotifications::BlockDisconnectedResults::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainNotifications::BlockDisconnectedResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainNotifications::BlockDisconnectedResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainNotifications::BlockDisconnectedResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainNotifications::UpdatedBlockTipParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainNotifications::UpdatedBlockTipParams::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainNotifications::UpdatedBlockTipParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainNotifications::UpdatedBlockTipParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainNotifications::UpdatedBlockTipParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainNotifications::UpdatedBlockTipResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainNotifications::UpdatedBlockTipResults::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainNotifications::UpdatedBlockTipResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainNotifications::UpdatedBlockTipResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainNotifications::UpdatedBlockTipResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainNotifications::ChainStateFlushedParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainNotifications::ChainStateFlushedParams::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainNotifications::ChainStateFlushedParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainNotifications::ChainStateFlushedParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainNotifications::ChainStateFlushedParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainNotifications::ChainStateFlushedResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainNotifications::ChainStateFlushedResults::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainNotifications::ChainStateFlushedResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainNotifications::ChainStateFlushedResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainNotifications::ChainStateFlushedResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::ipc::capnp::messages::ChainClient::DestroyParams,  ::ipc::capnp::messages::ChainClient::DestroyResults>
ChainClient::Client::destroyRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::ChainClient::DestroyParams,  ::ipc::capnp::messages::ChainClient::DestroyResults>(
      0xe12e54f4b0c4b578ull, 0, sizeHint, {true});
}
::kj::Promise<void> ChainClient::Server::destroy(DestroyContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:ChainClient", "destroy",
      0xe12e54f4b0c4b578ull, 0);
}
::capnp::Request< ::ipc::capnp::messages::ChainClient::RegisterRpcsParams,  ::ipc::capnp::messages::ChainClient::RegisterRpcsResults>
ChainClient::Client::registerRpcsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::ChainClient::RegisterRpcsParams,  ::ipc::capnp::messages::ChainClient::RegisterRpcsResults>(
      0xe12e54f4b0c4b578ull, 1, sizeHint, {true});
}
::kj::Promise<void> ChainClient::Server::registerRpcs(RegisterRpcsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:ChainClient", "registerRpcs",
      0xe12e54f4b0c4b578ull, 1);
}
::capnp::Request< ::ipc::capnp::messages::ChainClient::VerifyParams,  ::ipc::capnp::messages::ChainClient::VerifyResults>
ChainClient::Client::verifyRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::ChainClient::VerifyParams,  ::ipc::capnp::messages::ChainClient::VerifyResults>(
      0xe12e54f4b0c4b578ull, 2, sizeHint, {true});
}
::kj::Promise<void> ChainClient::Server::verify(VerifyContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:ChainClient", "verify",
      0xe12e54f4b0c4b578ull, 2);
}
::capnp::Request< ::ipc::capnp::messages::ChainClient::LoadParams,  ::ipc::capnp::messages::ChainClient::LoadResults>
ChainClient::Client::loadRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::ChainClient::LoadParams,  ::ipc::capnp::messages::ChainClient::LoadResults>(
      0xe12e54f4b0c4b578ull, 3, sizeHint, {true});
}
::kj::Promise<void> ChainClient::Server::load(LoadContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:ChainClient", "load",
      0xe12e54f4b0c4b578ull, 3);
}
::capnp::Request< ::ipc::capnp::messages::ChainClient::StartParams,  ::ipc::capnp::messages::ChainClient::StartResults>
ChainClient::Client::startRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::ChainClient::StartParams,  ::ipc::capnp::messages::ChainClient::StartResults>(
      0xe12e54f4b0c4b578ull, 4, sizeHint, {true});
}
::kj::Promise<void> ChainClient::Server::start(StartContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:ChainClient", "start",
      0xe12e54f4b0c4b578ull, 4);
}
::capnp::Request< ::ipc::capnp::messages::ChainClient::FlushParams,  ::ipc::capnp::messages::ChainClient::FlushResults>
ChainClient::Client::flushRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::ChainClient::FlushParams,  ::ipc::capnp::messages::ChainClient::FlushResults>(
      0xe12e54f4b0c4b578ull, 5, sizeHint, {true});
}
::kj::Promise<void> ChainClient::Server::flush(FlushContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:ChainClient", "flush",
      0xe12e54f4b0c4b578ull, 5);
}
::capnp::Request< ::ipc::capnp::messages::ChainClient::StopParams,  ::ipc::capnp::messages::ChainClient::StopResults>
ChainClient::Client::stopRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::ChainClient::StopParams,  ::ipc::capnp::messages::ChainClient::StopResults>(
      0xe12e54f4b0c4b578ull, 6, sizeHint, {true});
}
::kj::Promise<void> ChainClient::Server::stop(StopContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:ChainClient", "stop",
      0xe12e54f4b0c4b578ull, 6);
}
::capnp::Request< ::ipc::capnp::messages::ChainClient::SetMockTimeParams,  ::ipc::capnp::messages::ChainClient::SetMockTimeResults>
ChainClient::Client::setMockTimeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::ChainClient::SetMockTimeParams,  ::ipc::capnp::messages::ChainClient::SetMockTimeResults>(
      0xe12e54f4b0c4b578ull, 7, sizeHint, {true});
}
::kj::Promise<void> ChainClient::Server::setMockTime(SetMockTimeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:ChainClient", "setMockTime",
      0xe12e54f4b0c4b578ull, 7);
}
::capnp::Request< ::ipc::capnp::messages::ChainClient::SchedulerMockForwardParams,  ::ipc::capnp::messages::ChainClient::SchedulerMockForwardResults>
ChainClient::Client::schedulerMockForwardRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::ChainClient::SchedulerMockForwardParams,  ::ipc::capnp::messages::ChainClient::SchedulerMockForwardResults>(
      0xe12e54f4b0c4b578ull, 8, sizeHint, {true});
}
::kj::Promise<void> ChainClient::Server::schedulerMockForward(SchedulerMockForwardContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:ChainClient", "schedulerMockForward",
      0xe12e54f4b0c4b578ull, 8);
}
::capnp::Capability::Server::DispatchCallResult ChainClient::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xe12e54f4b0c4b578ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("capnp/chain.capnp:ChainClient", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult ChainClient::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        destroy(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::ChainClient::DestroyParams,  ::ipc::capnp::messages::ChainClient::DestroyResults>(context)),
        false,
        false
      };
    case 1:
      return {
        registerRpcs(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::ChainClient::RegisterRpcsParams,  ::ipc::capnp::messages::ChainClient::RegisterRpcsResults>(context)),
        false,
        false
      };
    case 2:
      return {
        verify(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::ChainClient::VerifyParams,  ::ipc::capnp::messages::ChainClient::VerifyResults>(context)),
        false,
        false
      };
    case 3:
      return {
        load(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::ChainClient::LoadParams,  ::ipc::capnp::messages::ChainClient::LoadResults>(context)),
        false,
        false
      };
    case 4:
      return {
        start(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::ChainClient::StartParams,  ::ipc::capnp::messages::ChainClient::StartResults>(context)),
        false,
        false
      };
    case 5:
      return {
        flush(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::ChainClient::FlushParams,  ::ipc::capnp::messages::ChainClient::FlushResults>(context)),
        false,
        false
      };
    case 6:
      return {
        stop(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::ChainClient::StopParams,  ::ipc::capnp::messages::ChainClient::StopResults>(context)),
        false,
        false
      };
    case 7:
      return {
        setMockTime(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::ChainClient::SetMockTimeParams,  ::ipc::capnp::messages::ChainClient::SetMockTimeResults>(context)),
        false,
        false
      };
    case 8:
      return {
        schedulerMockForward(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::ChainClient::SchedulerMockForwardParams,  ::ipc::capnp::messages::ChainClient::SchedulerMockForwardResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "capnp/chain.capnp:ChainClient",
          0xe12e54f4b0c4b578ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// ChainClient
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainClient::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainClient::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainClient::DestroyParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainClient::DestroyParams::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainClient::DestroyParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainClient::DestroyParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainClient::DestroyParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainClient::DestroyResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainClient::DestroyResults::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainClient::DestroyResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainClient::DestroyResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainClient::DestroyResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainClient::RegisterRpcsParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainClient::RegisterRpcsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainClient::RegisterRpcsParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainClient::RegisterRpcsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainClient::RegisterRpcsParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainClient::RegisterRpcsResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainClient::RegisterRpcsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainClient::RegisterRpcsResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainClient::RegisterRpcsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainClient::RegisterRpcsResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainClient::VerifyParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainClient::VerifyParams::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainClient::VerifyParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainClient::VerifyParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainClient::VerifyParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainClient::VerifyResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainClient::VerifyResults::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainClient::VerifyResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainClient::VerifyResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainClient::VerifyResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainClient::LoadParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainClient::LoadParams::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainClient::LoadParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainClient::LoadParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainClient::LoadParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainClient::LoadResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainClient::LoadResults::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainClient::LoadResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainClient::LoadResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainClient::LoadResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainClient::StartParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainClient::StartParams::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainClient::StartParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainClient::StartParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainClient::StartParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainClient::StartResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainClient::StartResults::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainClient::StartResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainClient::StartResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainClient::StartResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainClient::FlushParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainClient::FlushParams::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainClient::FlushParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainClient::FlushParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainClient::FlushParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainClient::FlushResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainClient::FlushResults::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainClient::FlushResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainClient::FlushResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainClient::FlushResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainClient::StopParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainClient::StopParams::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainClient::StopParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainClient::StopParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainClient::StopParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainClient::StopResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainClient::StopResults::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainClient::StopResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainClient::StopResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainClient::StopResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainClient::SetMockTimeParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainClient::SetMockTimeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainClient::SetMockTimeParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainClient::SetMockTimeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainClient::SetMockTimeParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainClient::SetMockTimeResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainClient::SetMockTimeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainClient::SetMockTimeResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainClient::SetMockTimeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainClient::SetMockTimeResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainClient::SchedulerMockForwardParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainClient::SchedulerMockForwardParams::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainClient::SchedulerMockForwardParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainClient::SchedulerMockForwardParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainClient::SchedulerMockForwardParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ChainClient::SchedulerMockForwardResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ChainClient::SchedulerMockForwardResults::_capnpPrivate::dataWordSize;
constexpr uint16_t ChainClient::SchedulerMockForwardResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ChainClient::SchedulerMockForwardResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ChainClient::SchedulerMockForwardResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// FeeCalculation
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t FeeCalculation::_capnpPrivate::dataWordSize;
constexpr uint16_t FeeCalculation::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind FeeCalculation::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* FeeCalculation::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// EstimationResult
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t EstimationResult::_capnpPrivate::dataWordSize;
constexpr uint16_t EstimationResult::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind EstimationResult::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EstimationResult::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// EstimatorBucket
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t EstimatorBucket::_capnpPrivate::dataWordSize;
constexpr uint16_t EstimatorBucket::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind EstimatorBucket::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EstimatorBucket::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// RPCCommand
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t RPCCommand::_capnpPrivate::dataWordSize;
constexpr uint16_t RPCCommand::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind RPCCommand::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RPCCommand::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// RPCArg
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t RPCArg::_capnpPrivate::dataWordSize;
constexpr uint16_t RPCArg::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind RPCArg::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RPCArg::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::ipc::capnp::messages::ActorCallback::CallParams,  ::ipc::capnp::messages::ActorCallback::CallResults>
ActorCallback::Client::callRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::ActorCallback::CallParams,  ::ipc::capnp::messages::ActorCallback::CallResults>(
      0xef421ff8403487a5ull, 0, sizeHint, {true});
}
::kj::Promise<void> ActorCallback::Server::call(CallContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:ActorCallback", "call",
      0xef421ff8403487a5ull, 0);
}
::capnp::Capability::Server::DispatchCallResult ActorCallback::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xef421ff8403487a5ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("capnp/chain.capnp:ActorCallback", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult ActorCallback::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        call(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::ActorCallback::CallParams,  ::ipc::capnp::messages::ActorCallback::CallResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "capnp/chain.capnp:ActorCallback",
          0xef421ff8403487a5ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// ActorCallback
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ActorCallback::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ActorCallback::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ActorCallback::CallParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ActorCallback::CallParams::_capnpPrivate::dataWordSize;
constexpr uint16_t ActorCallback::CallParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ActorCallback::CallParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ActorCallback::CallParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// ActorCallback::CallResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t ActorCallback::CallResults::_capnpPrivate::dataWordSize;
constexpr uint16_t ActorCallback::CallResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind ActorCallback::CallResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ActorCallback::CallResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// JSONRPCRequest
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t JSONRPCRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t JSONRPCRequest::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind JSONRPCRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* JSONRPCRequest::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::ipc::capnp::messages::RunLaterCallback::DestroyParams,  ::ipc::capnp::messages::RunLaterCallback::DestroyResults>
RunLaterCallback::Client::destroyRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::RunLaterCallback::DestroyParams,  ::ipc::capnp::messages::RunLaterCallback::DestroyResults>(
      0xb90d32691d40bce8ull, 0, sizeHint, {true});
}
::kj::Promise<void> RunLaterCallback::Server::destroy(DestroyContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:RunLaterCallback", "destroy",
      0xb90d32691d40bce8ull, 0);
}
::capnp::Request< ::ipc::capnp::messages::RunLaterCallback::CallParams,  ::ipc::capnp::messages::RunLaterCallback::CallResults>
RunLaterCallback::Client::callRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::RunLaterCallback::CallParams,  ::ipc::capnp::messages::RunLaterCallback::CallResults>(
      0xb90d32691d40bce8ull, 1, sizeHint, {true});
}
::kj::Promise<void> RunLaterCallback::Server::call(CallContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:RunLaterCallback", "call",
      0xb90d32691d40bce8ull, 1);
}
::capnp::Capability::Server::DispatchCallResult RunLaterCallback::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xb90d32691d40bce8ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("capnp/chain.capnp:RunLaterCallback", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult RunLaterCallback::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        destroy(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::RunLaterCallback::DestroyParams,  ::ipc::capnp::messages::RunLaterCallback::DestroyResults>(context)),
        false,
        false
      };
    case 1:
      return {
        call(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::RunLaterCallback::CallParams,  ::ipc::capnp::messages::RunLaterCallback::CallResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "capnp/chain.capnp:RunLaterCallback",
          0xb90d32691d40bce8ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// RunLaterCallback
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind RunLaterCallback::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RunLaterCallback::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// RunLaterCallback::DestroyParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t RunLaterCallback::DestroyParams::_capnpPrivate::dataWordSize;
constexpr uint16_t RunLaterCallback::DestroyParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind RunLaterCallback::DestroyParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RunLaterCallback::DestroyParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// RunLaterCallback::DestroyResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t RunLaterCallback::DestroyResults::_capnpPrivate::dataWordSize;
constexpr uint16_t RunLaterCallback::DestroyResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind RunLaterCallback::DestroyResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RunLaterCallback::DestroyResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// RunLaterCallback::CallParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t RunLaterCallback::CallParams::_capnpPrivate::dataWordSize;
constexpr uint16_t RunLaterCallback::CallParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind RunLaterCallback::CallParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RunLaterCallback::CallParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// RunLaterCallback::CallResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t RunLaterCallback::CallResults::_capnpPrivate::dataWordSize;
constexpr uint16_t RunLaterCallback::CallResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind RunLaterCallback::CallResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RunLaterCallback::CallResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// FoundBlockParam
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t FoundBlockParam::_capnpPrivate::dataWordSize;
constexpr uint16_t FoundBlockParam::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind FoundBlockParam::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* FoundBlockParam::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// FoundBlockResult
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t FoundBlockResult::_capnpPrivate::dataWordSize;
constexpr uint16_t FoundBlockResult::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind FoundBlockResult::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* FoundBlockResult::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BlockInfo
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BlockInfo::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockInfo::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BlockInfo::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockInfo::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::ipc::capnp::messages::SettingsUpdateCallback::DestroyParams,  ::ipc::capnp::messages::SettingsUpdateCallback::DestroyResults>
SettingsUpdateCallback::Client::destroyRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::SettingsUpdateCallback::DestroyParams,  ::ipc::capnp::messages::SettingsUpdateCallback::DestroyResults>(
      0x995e7b64fb44bec5ull, 0, sizeHint, {true});
}
::kj::Promise<void> SettingsUpdateCallback::Server::destroy(DestroyContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:SettingsUpdateCallback", "destroy",
      0x995e7b64fb44bec5ull, 0);
}
::capnp::Request< ::ipc::capnp::messages::SettingsUpdateCallback::CallParams,  ::ipc::capnp::messages::SettingsUpdateCallback::CallResults>
SettingsUpdateCallback::Client::callRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::SettingsUpdateCallback::CallParams,  ::ipc::capnp::messages::SettingsUpdateCallback::CallResults>(
      0x995e7b64fb44bec5ull, 1, sizeHint, {true});
}
::kj::Promise<void> SettingsUpdateCallback::Server::call(CallContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/chain.capnp:SettingsUpdateCallback", "call",
      0x995e7b64fb44bec5ull, 1);
}
::capnp::Capability::Server::DispatchCallResult SettingsUpdateCallback::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x995e7b64fb44bec5ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("capnp/chain.capnp:SettingsUpdateCallback", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult SettingsUpdateCallback::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        destroy(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::SettingsUpdateCallback::DestroyParams,  ::ipc::capnp::messages::SettingsUpdateCallback::DestroyResults>(context)),
        false,
        false
      };
    case 1:
      return {
        call(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::SettingsUpdateCallback::CallParams,  ::ipc::capnp::messages::SettingsUpdateCallback::CallResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "capnp/chain.capnp:SettingsUpdateCallback",
          0x995e7b64fb44bec5ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// SettingsUpdateCallback
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind SettingsUpdateCallback::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SettingsUpdateCallback::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// SettingsUpdateCallback::DestroyParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t SettingsUpdateCallback::DestroyParams::_capnpPrivate::dataWordSize;
constexpr uint16_t SettingsUpdateCallback::DestroyParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind SettingsUpdateCallback::DestroyParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SettingsUpdateCallback::DestroyParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// SettingsUpdateCallback::DestroyResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t SettingsUpdateCallback::DestroyResults::_capnpPrivate::dataWordSize;
constexpr uint16_t SettingsUpdateCallback::DestroyResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind SettingsUpdateCallback::DestroyResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SettingsUpdateCallback::DestroyResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// SettingsUpdateCallback::CallParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t SettingsUpdateCallback::CallParams::_capnpPrivate::dataWordSize;
constexpr uint16_t SettingsUpdateCallback::CallParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind SettingsUpdateCallback::CallParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SettingsUpdateCallback::CallParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// SettingsUpdateCallback::CallResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t SettingsUpdateCallback::CallResults::_capnpPrivate::dataWordSize;
constexpr uint16_t SettingsUpdateCallback::CallResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind SettingsUpdateCallback::CallResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SettingsUpdateCallback::CallResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace
}  // namespace

