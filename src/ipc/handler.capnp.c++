// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: handler.capnp

#include "handler.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<51> b_ea08728d34263f55 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     85,  63,  38,  52, 141, 114,   8, 234,
     20,   0,   0,   0,   3,   0,   0,   0,
    118, 144,  54,  47, 110, 244, 216, 235,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
     33,   0,   0,   0,  31,   0,   0,   0,
     73,   0,   0,   0, 135,   0,   0,   0,
    157,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 104,  97,
    110, 100, 108, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72,  97, 110, 100,
    108, 101, 114,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
     94,  64, 177, 183, 121,  96, 244, 230,
      4,   0,   0,   0,   2,   0,   1,   0,
     24,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 162,   0,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101, 115,  58,  58,  72,  97, 110, 100,
    108, 101, 114,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137, 151, 120,  21, 228,   1, 108, 242,
    216, 192, 254, 248,  46,  52, 143, 242,
     49,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     15,  30, 255, 154, 229,  91, 114, 163,
     53, 130, 191,  76, 133,  21,  13, 249,
     25,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   7,   0,   0,   0,
    100, 101, 115, 116, 114, 111, 121,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    100, 105, 115,  99, 111, 110, 110, 101,
     99, 116,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_ea08728d34263f55 = b_ea08728d34263f55.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ea08728d34263f55[] = {
  &s_a3725be59aff1e0f,
  &s_f26c01e415789789,
  &s_f28f342ef8fec0d8,
  &s_f90d15854cbf8235,
};
static const uint16_t m_ea08728d34263f55[] = {0, 1};
const ::capnp::_::RawSchema s_ea08728d34263f55 = {
  0xea08728d34263f55, b_ea08728d34263f55.words, 51, d_ea08728d34263f55, m_ea08728d34263f55,
  4, 2, nullptr, nullptr, nullptr, { &s_ea08728d34263f55, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_f26c01e415789789 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    137, 151, 120,  21, 228,   1, 108, 242,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 104,  97,
    110, 100, 108, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72,  97, 110, 100,
    108, 101, 114,  46, 100, 101, 115, 116,
    114, 111, 121,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f26c01e415789789 = b_f26c01e415789789.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f26c01e415789789[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_f26c01e415789789[] = {0};
static const uint16_t i_f26c01e415789789[] = {0};
const ::capnp::_::RawSchema s_f26c01e415789789 = {
  0xf26c01e415789789, b_f26c01e415789789.words, 34, d_f26c01e415789789, m_f26c01e415789789,
  1, 1, i_f26c01e415789789, nullptr, nullptr, { &s_f26c01e415789789, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_f28f342ef8fec0d8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    216, 192, 254, 248,  46,  52, 143, 242,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 104,  97,
    110, 100, 108, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72,  97, 110, 100,
    108, 101, 114,  46, 100, 101, 115, 116,
    114, 111, 121,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f28f342ef8fec0d8 = b_f28f342ef8fec0d8.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f28f342ef8fec0d8 = {
  0xf28f342ef8fec0d8, b_f28f342ef8fec0d8.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f28f342ef8fec0d8, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_a3725be59aff1e0f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     15,  30, 255, 154, 229,  91, 114, 163,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 104,  97,
    110, 100, 108, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72,  97, 110, 100,
    108, 101, 114,  46, 100, 105, 115,  99,
    111, 110, 110, 101,  99, 116,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a3725be59aff1e0f = b_a3725be59aff1e0f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a3725be59aff1e0f[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_a3725be59aff1e0f[] = {0};
static const uint16_t i_a3725be59aff1e0f[] = {0};
const ::capnp::_::RawSchema s_a3725be59aff1e0f = {
  0xa3725be59aff1e0f, b_a3725be59aff1e0f.words, 34, d_a3725be59aff1e0f, m_a3725be59aff1e0f,
  1, 1, i_a3725be59aff1e0f, nullptr, nullptr, { &s_a3725be59aff1e0f, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_f90d15854cbf8235 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     53, 130, 191,  76, 133,  21,  13, 249,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 104,  97,
    110, 100, 108, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72,  97, 110, 100,
    108, 101, 114,  46, 100, 105, 115,  99,
    111, 110, 110, 101,  99, 116,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0, }
};
::capnp::word const* const bp_f90d15854cbf8235 = b_f90d15854cbf8235.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f90d15854cbf8235 = {
  0xf90d15854cbf8235, b_f90d15854cbf8235.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f90d15854cbf8235, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace ipc {
namespace capnp {
namespace messages {

#if !CAPNP_LITE
::capnp::Request< ::ipc::capnp::messages::Handler::DestroyParams,  ::ipc::capnp::messages::Handler::DestroyResults>
Handler::Client::destroyRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Handler::DestroyParams,  ::ipc::capnp::messages::Handler::DestroyResults>(
      0xea08728d34263f55ull, 0, sizeHint, {true});
}
::kj::Promise<void> Handler::Server::destroy(DestroyContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/handler.capnp:Handler", "destroy",
      0xea08728d34263f55ull, 0);
}
::capnp::Request< ::ipc::capnp::messages::Handler::DisconnectParams,  ::ipc::capnp::messages::Handler::DisconnectResults>
Handler::Client::disconnectRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Handler::DisconnectParams,  ::ipc::capnp::messages::Handler::DisconnectResults>(
      0xea08728d34263f55ull, 1, sizeHint, {true});
}
::kj::Promise<void> Handler::Server::disconnect(DisconnectContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/handler.capnp:Handler", "disconnect",
      0xea08728d34263f55ull, 1);
}
::capnp::Capability::Server::DispatchCallResult Handler::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xea08728d34263f55ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("capnp/handler.capnp:Handler", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Handler::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        destroy(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Handler::DestroyParams,  ::ipc::capnp::messages::Handler::DestroyResults>(context)),
        false,
        false
      };
    case 1:
      return {
        disconnect(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Handler::DisconnectParams,  ::ipc::capnp::messages::Handler::DisconnectResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "capnp/handler.capnp:Handler",
          0xea08728d34263f55ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Handler
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Handler::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Handler::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Handler::DestroyParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Handler::DestroyParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Handler::DestroyParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Handler::DestroyParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Handler::DestroyParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Handler::DestroyResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Handler::DestroyResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Handler::DestroyResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Handler::DestroyResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Handler::DestroyResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Handler::DisconnectParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Handler::DisconnectParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Handler::DisconnectParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Handler::DisconnectParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Handler::DisconnectParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Handler::DisconnectResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Handler::DisconnectResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Handler::DisconnectResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Handler::DisconnectResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Handler::DisconnectResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace
}  // namespace

