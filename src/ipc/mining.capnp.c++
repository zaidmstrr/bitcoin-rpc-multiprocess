// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: mining.capnp

#include "mining.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<85> b_f9c68436df3af39e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    158, 243,  58, 223,  54, 132, 198, 249,
     19,   0,   0,   0,   3,   0,   0,   0,
      5, 181,  65, 106, 223,   3, 125, 199,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
     33,   0,   0,   0,  31,   0,   0,   0,
     73,   0,   0,   0,  71,   1,   0,   0,
     37,   1,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  77, 105, 110, 105, 110,
    103,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
     94,  64, 177, 183, 121,  96, 244, 230,
      4,   0,   0,   0,   2,   0,   1,   0,
     24,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 154,   0,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101, 115,  58,  58,  77, 105, 110, 105,
    110, 103,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     20,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    186, 111,  64,  10,  31, 133,  42, 214,
    203,   7, 252, 166,  70, 169, 109, 210,
    145,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    200, 136, 237,  83, 113, 203, 134, 192,
    224, 171, 181,  28, 238, 220, 173, 138,
    125,   0,   0,   0, 186,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     30,  26,  32, 179, 226,  15, 104, 166,
     52,  32,  68, 178, 215, 131, 189, 205,
    109,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     41, 178, 146,  43,  88, 211, 223, 226,
    234,  48, 241, 227, 150,  47,  19, 143,
     85,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    222, 168, 174,  82, 212,  89,  61, 242,
     21, 158, 218, 243, 235, 108, 176, 160,
     65,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     57,   0,   0,   0,   7,   0,   0,   0,
    105, 115,  84, 101, 115, 116,  67, 104,
     97, 105, 110,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    105, 115,  73, 110, 105, 116, 105,  97,
    108,  66, 108, 111,  99, 107,  68, 111,
    119, 110, 108, 111,  97, 100,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  84, 105, 112,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    119,  97, 105, 116,  84, 105, 112,  67,
    104,  97, 110, 103, 101, 100,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 114, 101,  97, 116, 101,  78, 101,
    119,  66, 108, 111,  99, 107,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_f9c68436df3af39e = b_f9c68436df3af39e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f9c68436df3af39e[] = {
  &s_8aaddcee1cb5abe0,
  &s_8f132f96e3f130ea,
  &s_a0b06cebf3da9e15,
  &s_a6680fe2b3201a1e,
  &s_c086cb7153ed88c8,
  &s_cdbd83d7b2442034,
  &s_d26da946a6fc07cb,
  &s_d62a851f0a406fba,
  &s_e2dfd3582b92b229,
  &s_f23d59d452aea8de,
};
static const uint16_t m_f9c68436df3af39e[] = {4, 2, 1, 0, 3};
const ::capnp::_::RawSchema s_f9c68436df3af39e = {
  0xf9c68436df3af39e, b_f9c68436df3af39e.words, 85, d_f9c68436df3af39e, m_f9c68436df3af39e,
  10, 5, nullptr, nullptr, nullptr, { &s_f9c68436df3af39e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_d62a851f0a406fba = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    186, 111,  64,  10,  31, 133,  42, 214,
     26,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  77, 105, 110, 105, 110,
    103,  46, 105, 115,  84, 101, 115, 116,
     67, 104,  97, 105, 110,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d62a851f0a406fba = b_d62a851f0a406fba.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d62a851f0a406fba[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_d62a851f0a406fba[] = {0};
static const uint16_t i_d62a851f0a406fba[] = {0};
const ::capnp::_::RawSchema s_d62a851f0a406fba = {
  0xd62a851f0a406fba, b_d62a851f0a406fba.words, 34, d_d62a851f0a406fba, m_d62a851f0a406fba,
  1, 1, i_d62a851f0a406fba, nullptr, nullptr, { &s_d62a851f0a406fba, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_d26da946a6fc07cb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    203,   7, 252, 166,  70, 169, 109, 210,
     26,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  77, 105, 110, 105, 110,
    103,  46, 105, 115,  84, 101, 115, 116,
     67, 104,  97, 105, 110,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d26da946a6fc07cb = b_d26da946a6fc07cb.words;
#if !CAPNP_LITE
static const uint16_t m_d26da946a6fc07cb[] = {0};
static const uint16_t i_d26da946a6fc07cb[] = {0};
const ::capnp::_::RawSchema s_d26da946a6fc07cb = {
  0xd26da946a6fc07cb, b_d26da946a6fc07cb.words, 34, nullptr, m_d26da946a6fc07cb,
  0, 1, i_d26da946a6fc07cb, nullptr, nullptr, { &s_d26da946a6fc07cb, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_c086cb7153ed88c8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    200, 136, 237,  83, 113, 203, 134, 192,
     26,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  77, 105, 110, 105, 110,
    103,  46, 105, 115,  73, 110, 105, 116,
    105,  97, 108,  66, 108, 111,  99, 107,
     68, 111, 119, 110, 108, 111,  97, 100,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c086cb7153ed88c8 = b_c086cb7153ed88c8.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c086cb7153ed88c8[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_c086cb7153ed88c8[] = {0};
static const uint16_t i_c086cb7153ed88c8[] = {0};
const ::capnp::_::RawSchema s_c086cb7153ed88c8 = {
  0xc086cb7153ed88c8, b_c086cb7153ed88c8.words, 35, d_c086cb7153ed88c8, m_c086cb7153ed88c8,
  1, 1, i_c086cb7153ed88c8, nullptr, nullptr, { &s_c086cb7153ed88c8, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_8aaddcee1cb5abe0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    224, 171, 181,  28, 238, 220, 173, 138,
     26,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  77, 105, 110, 105, 110,
    103,  46, 105, 115,  73, 110, 105, 116,
    105,  97, 108,  66, 108, 111,  99, 107,
     68, 111, 119, 110, 108, 111,  97, 100,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8aaddcee1cb5abe0 = b_8aaddcee1cb5abe0.words;
#if !CAPNP_LITE
static const uint16_t m_8aaddcee1cb5abe0[] = {0};
static const uint16_t i_8aaddcee1cb5abe0[] = {0};
const ::capnp::_::RawSchema s_8aaddcee1cb5abe0 = {
  0x8aaddcee1cb5abe0, b_8aaddcee1cb5abe0.words, 36, nullptr, m_8aaddcee1cb5abe0,
  0, 1, i_8aaddcee1cb5abe0, nullptr, nullptr, { &s_8aaddcee1cb5abe0, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_a6680fe2b3201a1e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     30,  26,  32, 179, 226,  15, 104, 166,
     26,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  77, 105, 110, 105, 110,
    103,  46, 103, 101, 116,  84, 105, 112,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a6680fe2b3201a1e = b_a6680fe2b3201a1e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a6680fe2b3201a1e[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_a6680fe2b3201a1e[] = {0};
static const uint16_t i_a6680fe2b3201a1e[] = {0};
const ::capnp::_::RawSchema s_a6680fe2b3201a1e = {
  0xa6680fe2b3201a1e, b_a6680fe2b3201a1e.words, 33, d_a6680fe2b3201a1e, m_a6680fe2b3201a1e,
  1, 1, i_a6680fe2b3201a1e, nullptr, nullptr, { &s_a6680fe2b3201a1e, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_cdbd83d7b2442034 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     52,  32,  68, 178, 215, 131, 189, 205,
     26,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  77, 105, 110, 105, 110,
    103,  46, 103, 101, 116,  84, 105, 112,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    105,   3,  53,  73, 137,  75, 190, 179,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,  97, 115,  82, 101, 115, 117, 108,
    116,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cdbd83d7b2442034 = b_cdbd83d7b2442034.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cdbd83d7b2442034[] = {
  &s_b3be4b8949350369,
};
static const uint16_t m_cdbd83d7b2442034[] = {1, 0};
static const uint16_t i_cdbd83d7b2442034[] = {0, 1};
const ::capnp::_::RawSchema s_cdbd83d7b2442034 = {
  0xcdbd83d7b2442034, b_cdbd83d7b2442034.words, 50, d_cdbd83d7b2442034, m_cdbd83d7b2442034,
  1, 2, i_cdbd83d7b2442034, nullptr, nullptr, { &s_cdbd83d7b2442034, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<65> b_e2dfd3582b92b229 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     41, 178, 146,  43,  88, 211, 223, 226,
     26,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  77, 105, 110, 105, 110,
    103,  46, 119,  97, 105, 116,  84, 105,
    112,  67, 104,  97, 110, 103, 101, 100,
     36,  80,  97, 114,  97, 109, 115,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 114, 114, 101, 110, 116,  84,
    105, 112,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 105, 109, 101, 111, 117, 116,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e2dfd3582b92b229 = b_e2dfd3582b92b229.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e2dfd3582b92b229[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_e2dfd3582b92b229[] = {0, 1, 2};
static const uint16_t i_e2dfd3582b92b229[] = {0, 1, 2};
const ::capnp::_::RawSchema s_e2dfd3582b92b229 = {
  0xe2dfd3582b92b229, b_e2dfd3582b92b229.words, 65, d_e2dfd3582b92b229, m_e2dfd3582b92b229,
  1, 3, i_e2dfd3582b92b229, nullptr, nullptr, { &s_e2dfd3582b92b229, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_8f132f96e3f130ea = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    234,  48, 241, 227, 150,  47,  19, 143,
     26,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  77, 105, 110, 105, 110,
    103,  46, 119,  97, 105, 116,  84, 105,
    112,  67, 104,  97, 110, 103, 101, 100,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    105,   3,  53,  73, 137,  75, 190, 179,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8f132f96e3f130ea = b_8f132f96e3f130ea.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8f132f96e3f130ea[] = {
  &s_b3be4b8949350369,
};
static const uint16_t m_8f132f96e3f130ea[] = {0};
static const uint16_t i_8f132f96e3f130ea[] = {0};
const ::capnp::_::RawSchema s_8f132f96e3f130ea = {
  0x8f132f96e3f130ea, b_8f132f96e3f130ea.words, 35, d_8f132f96e3f130ea, m_8f132f96e3f130ea,
  1, 1, i_8f132f96e3f130ea, nullptr, nullptr, { &s_8f132f96e3f130ea, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_f23d59d452aea8de = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    222, 168, 174,  82, 212,  89,  61, 242,
     26,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  77, 105, 110, 105, 110,
    103,  46,  99, 114, 101,  97, 116, 101,
     78, 101, 119,  66, 108, 111,  99, 107,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    111, 112, 116, 105, 111, 110, 115,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     89, 165, 129, 239, 131, 160, 252, 128,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f23d59d452aea8de = b_f23d59d452aea8de.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f23d59d452aea8de[] = {
  &s_80fca083ef81a559,
};
static const uint16_t m_f23d59d452aea8de[] = {0};
static const uint16_t i_f23d59d452aea8de[] = {0};
const ::capnp::_::RawSchema s_f23d59d452aea8de = {
  0xf23d59d452aea8de, b_f23d59d452aea8de.words, 34, d_f23d59d452aea8de, m_f23d59d452aea8de,
  1, 1, i_f23d59d452aea8de, nullptr, nullptr, { &s_f23d59d452aea8de, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_a0b06cebf3da9e15 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     21, 158, 218, 243, 235, 108, 176, 160,
     26,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  77, 105, 110, 105, 110,
    103,  46,  99, 114, 101,  97, 116, 101,
     78, 101, 119,  66, 108, 111,  99, 107,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     34, 246, 178,  65, 216,  26, 103, 249,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a0b06cebf3da9e15 = b_a0b06cebf3da9e15.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a0b06cebf3da9e15[] = {
  &s_f9671ad841b2f622,
};
static const uint16_t m_a0b06cebf3da9e15[] = {0};
static const uint16_t i_a0b06cebf3da9e15[] = {0};
const ::capnp::_::RawSchema s_a0b06cebf3da9e15 = {
  0xa0b06cebf3da9e15, b_a0b06cebf3da9e15.words, 35, d_a0b06cebf3da9e15, m_a0b06cebf3da9e15,
  1, 1, i_a0b06cebf3da9e15, nullptr, nullptr, { &s_a0b06cebf3da9e15, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<145> b_f9671ad841b2f622 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     34, 246, 178,  65, 216,  26, 103, 249,
     19,   0,   0,   0,   3,   0,   0,   0,
      5, 181,  65, 106, 223,   3, 125, 199,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
     37,   0,   0,   0,  31,   0,   0,   0,
     81,   0,   0,   0, 135,   2,   0,   0,
     21,   2,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  66, 108, 111,  99, 107,
     84, 101, 109, 112, 108,  97, 116, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
     94,  64, 177, 183, 121,  96, 244, 230,
      4,   0,   0,   0,   2,   0,   1,   0,
     28,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 210,   0,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101, 115,  58,  58,  66, 108, 111,  99,
    107,  84, 101, 109, 112, 108,  97, 116,
    101,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64, 171, 142, 143, 149, 117, 140, 137,
    113, 248, 104,  67,  72, 233, 119, 178,
     49,   1,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   1,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    203, 171, 159,  12,  29, 150, 110, 188,
     15, 165,  59, 245, 107, 134,  68, 190,
     25,   1,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   1,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    185, 216, 211,   9,  12, 220, 122, 181,
     59, 189, 107, 248,  98,   9,  87, 218,
      5,   1,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    253,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    214,  84, 182, 113, 136, 200,  72, 252,
    120, 175, 211,  71, 233,  25, 148, 206,
    241,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    233,   0,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    129, 238,  58, 190, 240, 173,  77, 143,
    251, 116, 247, 246, 149, 111, 145, 207,
    221,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    213,   0,   0,   0,   7,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
    184, 193, 253,   3, 228,  55,  67, 253,
    150, 253, 234, 227, 125,  66, 148, 225,
    201,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    193,   0,   0,   0,   7,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
     75,  47, 102, 173, 224,  87,  38, 161,
    255, 136, 100, 247,   6,  42, 149, 218,
    181,   0,   0,   0, 178,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    177,   0,   0,   0,   7,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
    135,  59, 110, 134, 176,  30, 232, 246,
     95, 193, 227, 181, 159, 137, 246, 151,
    165,   0,   0,   0, 210,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    165,   0,   0,   0,   7,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
    179,  77, 192, 250, 101, 169,  38, 183,
      0,  91, 101, 206, 191, 191, 253, 218,
    153,   0,   0,   0, 178,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    149,   0,   0,   0,   7,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
    177, 236, 212, 242,  91, 137, 137, 184,
    194,  11, 127,   0, 243, 223,  60, 254,
    137,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,   7,   0,   0,   0,
    100, 101, 115, 116, 114, 111, 121,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  66, 108, 111,  99, 107,
     72, 101,  97, 100, 101, 114,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  66, 108, 111,  99, 107,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  84, 120,  70, 101, 101,
    115,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  84, 120,  83, 105, 103,
    111, 112, 115,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  67, 111, 105, 110,  98,
     97, 115, 101,  84, 120,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  67, 111, 105, 110,  98,
     97, 115, 101,  67, 111, 109, 109, 105,
    116, 109, 101, 110, 116,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  87, 105, 116, 110, 101,
    115, 115,  67, 111, 109, 109, 105, 116,
    109, 101, 110, 116,  73, 110, 100, 101,
    120,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  67, 111, 105, 110,  98,
     97, 115, 101,  77, 101, 114, 107, 108,
    101,  80,  97, 116, 104,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 117,  98, 109, 105, 116,  83, 111,
    108, 117, 116, 105, 111, 110,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_f9671ad841b2f622 = b_f9671ad841b2f622.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f9671ad841b2f622[] = {
  &s_898c75958f8eab40,
  &s_8f4dadf0be3aee81,
  &s_97f6899fb5e3c15f,
  &s_a12657e0ad662f4b,
  &s_b277e9484368f871,
  &s_b57adc0c09d3d8b9,
  &s_b726a965fac04db3,
  &s_b889895bf2d4ecb1,
  &s_bc6e961d0c9fabcb,
  &s_be44866bf53ba50f,
  &s_ce9419e947d3af78,
  &s_cf916f95f6f774fb,
  &s_da570962f86bbd3b,
  &s_da952a06f76488ff,
  &s_dafdbfbfce655b00,
  &s_e194427de3eafd96,
  &s_f6e81eb0866e3b87,
  &s_fc48c88871b654d6,
  &s_fd4337e403fdc1b8,
  &s_fe3cdff3007f0bc2,
};
static const uint16_t m_f9671ad841b2f622[] = {0, 2, 1, 6, 8, 5, 3, 4, 7, 9};
const ::capnp::_::RawSchema s_f9671ad841b2f622 = {
  0xf9671ad841b2f622, b_f9671ad841b2f622.words, 145, d_f9671ad841b2f622, m_f9671ad841b2f622,
  20, 10, nullptr, nullptr, nullptr, { &s_f9671ad841b2f622, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_898c75958f8eab40 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     64, 171, 142, 143, 149, 117, 140, 137,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  66, 108, 111,  99, 107,
     84, 101, 109, 112, 108,  97, 116, 101,
     46, 100, 101, 115, 116, 114, 111, 121,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_898c75958f8eab40 = b_898c75958f8eab40.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_898c75958f8eab40[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_898c75958f8eab40[] = {0};
static const uint16_t i_898c75958f8eab40[] = {0};
const ::capnp::_::RawSchema s_898c75958f8eab40 = {
  0x898c75958f8eab40, b_898c75958f8eab40.words, 34, d_898c75958f8eab40, m_898c75958f8eab40,
  1, 1, i_898c75958f8eab40, nullptr, nullptr, { &s_898c75958f8eab40, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_b277e9484368f871 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    113, 248, 104,  67,  72, 233, 119, 178,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  66, 108, 111,  99, 107,
     84, 101, 109, 112, 108,  97, 116, 101,
     46, 100, 101, 115, 116, 114, 111, 121,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b277e9484368f871 = b_b277e9484368f871.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_b277e9484368f871 = {
  0xb277e9484368f871, b_b277e9484368f871.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_b277e9484368f871, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_bc6e961d0c9fabcb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    203, 171, 159,  12,  29, 150, 110, 188,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  66, 108, 111,  99, 107,
     84, 101, 109, 112, 108,  97, 116, 101,
     46, 103, 101, 116,  66, 108, 111,  99,
    107,  72, 101,  97, 100, 101, 114,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bc6e961d0c9fabcb = b_bc6e961d0c9fabcb.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bc6e961d0c9fabcb[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_bc6e961d0c9fabcb[] = {0};
static const uint16_t i_bc6e961d0c9fabcb[] = {0};
const ::capnp::_::RawSchema s_bc6e961d0c9fabcb = {
  0xbc6e961d0c9fabcb, b_bc6e961d0c9fabcb.words, 35, d_bc6e961d0c9fabcb, m_bc6e961d0c9fabcb,
  1, 1, i_bc6e961d0c9fabcb, nullptr, nullptr, { &s_bc6e961d0c9fabcb, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_be44866bf53ba50f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     15, 165,  59, 245, 107, 134,  68, 190,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  66, 108, 111,  99, 107,
     84, 101, 109, 112, 108,  97, 116, 101,
     46, 103, 101, 116,  66, 108, 111,  99,
    107,  72, 101,  97, 100, 101, 114,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_be44866bf53ba50f = b_be44866bf53ba50f.words;
#if !CAPNP_LITE
static const uint16_t m_be44866bf53ba50f[] = {0};
static const uint16_t i_be44866bf53ba50f[] = {0};
const ::capnp::_::RawSchema s_be44866bf53ba50f = {
  0xbe44866bf53ba50f, b_be44866bf53ba50f.words, 35, nullptr, m_be44866bf53ba50f,
  0, 1, i_be44866bf53ba50f, nullptr, nullptr, { &s_be44866bf53ba50f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_b57adc0c09d3d8b9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    185, 216, 211,   9,  12, 220, 122, 181,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  66, 108, 111,  99, 107,
     84, 101, 109, 112, 108,  97, 116, 101,
     46, 103, 101, 116,  66, 108, 111,  99,
    107,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b57adc0c09d3d8b9 = b_b57adc0c09d3d8b9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b57adc0c09d3d8b9[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_b57adc0c09d3d8b9[] = {0};
static const uint16_t i_b57adc0c09d3d8b9[] = {0};
const ::capnp::_::RawSchema s_b57adc0c09d3d8b9 = {
  0xb57adc0c09d3d8b9, b_b57adc0c09d3d8b9.words, 35, d_b57adc0c09d3d8b9, m_b57adc0c09d3d8b9,
  1, 1, i_b57adc0c09d3d8b9, nullptr, nullptr, { &s_b57adc0c09d3d8b9, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_da570962f86bbd3b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     59, 189, 107, 248,  98,   9,  87, 218,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  66, 108, 111,  99, 107,
     84, 101, 109, 112, 108,  97, 116, 101,
     46, 103, 101, 116,  66, 108, 111,  99,
    107,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_da570962f86bbd3b = b_da570962f86bbd3b.words;
#if !CAPNP_LITE
static const uint16_t m_da570962f86bbd3b[] = {0};
static const uint16_t i_da570962f86bbd3b[] = {0};
const ::capnp::_::RawSchema s_da570962f86bbd3b = {
  0xda570962f86bbd3b, b_da570962f86bbd3b.words, 35, nullptr, m_da570962f86bbd3b,
  0, 1, i_da570962f86bbd3b, nullptr, nullptr, { &s_da570962f86bbd3b, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_fc48c88871b654d6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    214,  84, 182, 113, 136, 200,  72, 252,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  66, 108, 111,  99, 107,
     84, 101, 109, 112, 108,  97, 116, 101,
     46, 103, 101, 116,  84, 120,  70, 101,
    101, 115,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fc48c88871b654d6 = b_fc48c88871b654d6.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fc48c88871b654d6[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_fc48c88871b654d6[] = {0};
static const uint16_t i_fc48c88871b654d6[] = {0};
const ::capnp::_::RawSchema s_fc48c88871b654d6 = {
  0xfc48c88871b654d6, b_fc48c88871b654d6.words, 35, d_fc48c88871b654d6, m_fc48c88871b654d6,
  1, 1, i_fc48c88871b654d6, nullptr, nullptr, { &s_fc48c88871b654d6, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_ce9419e947d3af78 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    120, 175, 211,  71, 233,  25, 148, 206,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  66, 108, 111,  99, 107,
     84, 101, 109, 112, 108,  97, 116, 101,
     46, 103, 101, 116,  84, 120,  70, 101,
    101, 115,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ce9419e947d3af78 = b_ce9419e947d3af78.words;
#if !CAPNP_LITE
static const uint16_t m_ce9419e947d3af78[] = {0};
static const uint16_t i_ce9419e947d3af78[] = {0};
const ::capnp::_::RawSchema s_ce9419e947d3af78 = {
  0xce9419e947d3af78, b_ce9419e947d3af78.words, 39, nullptr, m_ce9419e947d3af78,
  0, 1, i_ce9419e947d3af78, nullptr, nullptr, { &s_ce9419e947d3af78, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_8f4dadf0be3aee81 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    129, 238,  58, 190, 240, 173,  77, 143,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  66, 108, 111,  99, 107,
     84, 101, 109, 112, 108,  97, 116, 101,
     46, 103, 101, 116,  84, 120,  83, 105,
    103, 111, 112, 115,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8f4dadf0be3aee81 = b_8f4dadf0be3aee81.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8f4dadf0be3aee81[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_8f4dadf0be3aee81[] = {0};
static const uint16_t i_8f4dadf0be3aee81[] = {0};
const ::capnp::_::RawSchema s_8f4dadf0be3aee81 = {
  0x8f4dadf0be3aee81, b_8f4dadf0be3aee81.words, 35, d_8f4dadf0be3aee81, m_8f4dadf0be3aee81,
  1, 1, i_8f4dadf0be3aee81, nullptr, nullptr, { &s_8f4dadf0be3aee81, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_cf916f95f6f774fb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    251, 116, 247, 246, 149, 111, 145, 207,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  66, 108, 111,  99, 107,
     84, 101, 109, 112, 108,  97, 116, 101,
     46, 103, 101, 116,  84, 120,  83, 105,
    103, 111, 112, 115,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cf916f95f6f774fb = b_cf916f95f6f774fb.words;
#if !CAPNP_LITE
static const uint16_t m_cf916f95f6f774fb[] = {0};
static const uint16_t i_cf916f95f6f774fb[] = {0};
const ::capnp::_::RawSchema s_cf916f95f6f774fb = {
  0xcf916f95f6f774fb, b_cf916f95f6f774fb.words, 39, nullptr, m_cf916f95f6f774fb,
  0, 1, i_cf916f95f6f774fb, nullptr, nullptr, { &s_cf916f95f6f774fb, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_fd4337e403fdc1b8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    184, 193, 253,   3, 228,  55,  67, 253,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  66, 108, 111,  99, 107,
     84, 101, 109, 112, 108,  97, 116, 101,
     46, 103, 101, 116,  67, 111, 105, 110,
     98,  97, 115, 101,  84, 120,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fd4337e403fdc1b8 = b_fd4337e403fdc1b8.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fd4337e403fdc1b8[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_fd4337e403fdc1b8[] = {0};
static const uint16_t i_fd4337e403fdc1b8[] = {0};
const ::capnp::_::RawSchema s_fd4337e403fdc1b8 = {
  0xfd4337e403fdc1b8, b_fd4337e403fdc1b8.words, 35, d_fd4337e403fdc1b8, m_fd4337e403fdc1b8,
  1, 1, i_fd4337e403fdc1b8, nullptr, nullptr, { &s_fd4337e403fdc1b8, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_e194427de3eafd96 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    150, 253, 234, 227, 125,  66, 148, 225,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  66, 108, 111,  99, 107,
     84, 101, 109, 112, 108,  97, 116, 101,
     46, 103, 101, 116,  67, 111, 105, 110,
     98,  97, 115, 101,  84, 120,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e194427de3eafd96 = b_e194427de3eafd96.words;
#if !CAPNP_LITE
static const uint16_t m_e194427de3eafd96[] = {0};
static const uint16_t i_e194427de3eafd96[] = {0};
const ::capnp::_::RawSchema s_e194427de3eafd96 = {
  0xe194427de3eafd96, b_e194427de3eafd96.words, 35, nullptr, m_e194427de3eafd96,
  0, 1, i_e194427de3eafd96, nullptr, nullptr, { &s_e194427de3eafd96, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_a12657e0ad662f4b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     75,  47, 102, 173, 224,  87,  38, 161,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  66, 108, 111,  99, 107,
     84, 101, 109, 112, 108,  97, 116, 101,
     46, 103, 101, 116,  67, 111, 105, 110,
     98,  97, 115, 101,  67, 111, 109, 109,
    105, 116, 109, 101, 110, 116,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a12657e0ad662f4b = b_a12657e0ad662f4b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a12657e0ad662f4b[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_a12657e0ad662f4b[] = {0};
static const uint16_t i_a12657e0ad662f4b[] = {0};
const ::capnp::_::RawSchema s_a12657e0ad662f4b = {
  0xa12657e0ad662f4b, b_a12657e0ad662f4b.words, 36, d_a12657e0ad662f4b, m_a12657e0ad662f4b,
  1, 1, i_a12657e0ad662f4b, nullptr, nullptr, { &s_a12657e0ad662f4b, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_da952a06f76488ff = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    255, 136, 100, 247,   6,  42, 149, 218,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  66, 108, 111,  99, 107,
     84, 101, 109, 112, 108,  97, 116, 101,
     46, 103, 101, 116,  67, 111, 105, 110,
     98,  97, 115, 101,  67, 111, 109, 109,
    105, 116, 109, 101, 110, 116,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_da952a06f76488ff = b_da952a06f76488ff.words;
#if !CAPNP_LITE
static const uint16_t m_da952a06f76488ff[] = {0};
static const uint16_t i_da952a06f76488ff[] = {0};
const ::capnp::_::RawSchema s_da952a06f76488ff = {
  0xda952a06f76488ff, b_da952a06f76488ff.words, 36, nullptr, m_da952a06f76488ff,
  0, 1, i_da952a06f76488ff, nullptr, nullptr, { &s_da952a06f76488ff, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_f6e81eb0866e3b87 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    135,  59, 110, 134, 176,  30, 232, 246,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  66, 108, 111,  99, 107,
     84, 101, 109, 112, 108,  97, 116, 101,
     46, 103, 101, 116,  87, 105, 116, 110,
    101, 115, 115,  67, 111, 109, 109, 105,
    116, 109, 101, 110, 116,  73, 110, 100,
    101, 120,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f6e81eb0866e3b87 = b_f6e81eb0866e3b87.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f6e81eb0866e3b87[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_f6e81eb0866e3b87[] = {0};
static const uint16_t i_f6e81eb0866e3b87[] = {0};
const ::capnp::_::RawSchema s_f6e81eb0866e3b87 = {
  0xf6e81eb0866e3b87, b_f6e81eb0866e3b87.words, 37, d_f6e81eb0866e3b87, m_f6e81eb0866e3b87,
  1, 1, i_f6e81eb0866e3b87, nullptr, nullptr, { &s_f6e81eb0866e3b87, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_97f6899fb5e3c15f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     95, 193, 227, 181, 159, 137, 246, 151,
     33,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  66, 108, 111,  99, 107,
     84, 101, 109, 112, 108,  97, 116, 101,
     46, 103, 101, 116,  87, 105, 116, 110,
    101, 115, 115,  67, 111, 109, 109, 105,
    116, 109, 101, 110, 116,  73, 110, 100,
    101, 120,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_97f6899fb5e3c15f = b_97f6899fb5e3c15f.words;
#if !CAPNP_LITE
static const uint16_t m_97f6899fb5e3c15f[] = {0};
static const uint16_t i_97f6899fb5e3c15f[] = {0};
const ::capnp::_::RawSchema s_97f6899fb5e3c15f = {
  0x97f6899fb5e3c15f, b_97f6899fb5e3c15f.words, 37, nullptr, m_97f6899fb5e3c15f,
  0, 1, i_97f6899fb5e3c15f, nullptr, nullptr, { &s_97f6899fb5e3c15f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_b726a965fac04db3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    179,  77, 192, 250, 101, 169,  38, 183,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  66, 108, 111,  99, 107,
     84, 101, 109, 112, 108,  97, 116, 101,
     46, 103, 101, 116,  67, 111, 105, 110,
     98,  97, 115, 101,  77, 101, 114, 107,
    108, 101,  80,  97, 116, 104,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b726a965fac04db3 = b_b726a965fac04db3.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b726a965fac04db3[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_b726a965fac04db3[] = {0};
static const uint16_t i_b726a965fac04db3[] = {0};
const ::capnp::_::RawSchema s_b726a965fac04db3 = {
  0xb726a965fac04db3, b_b726a965fac04db3.words, 36, d_b726a965fac04db3, m_b726a965fac04db3,
  1, 1, i_b726a965fac04db3, nullptr, nullptr, { &s_b726a965fac04db3, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<40> b_dafdbfbfce655b00 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      0,  91, 101, 206, 191, 191, 253, 218,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  66, 108, 111,  99, 107,
     84, 101, 109, 112, 108,  97, 116, 101,
     46, 103, 101, 116,  67, 111, 105, 110,
     98,  97, 115, 101,  77, 101, 114, 107,
    108, 101,  80,  97, 116, 104,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dafdbfbfce655b00 = b_dafdbfbfce655b00.words;
#if !CAPNP_LITE
static const uint16_t m_dafdbfbfce655b00[] = {0};
static const uint16_t i_dafdbfbfce655b00[] = {0};
const ::capnp::_::RawSchema s_dafdbfbfce655b00 = {
  0xdafdbfbfce655b00, b_dafdbfbfce655b00.words, 40, nullptr, m_dafdbfbfce655b00,
  0, 1, i_dafdbfbfce655b00, nullptr, nullptr, { &s_dafdbfbfce655b00, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<97> b_b889895bf2d4ecb1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    177, 236, 212, 242,  91, 137, 137, 184,
     33,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  66, 108, 111,  99, 107,
     84, 101, 109, 112, 108,  97, 116, 101,
     46, 115, 117,  98, 109, 105, 116,  83,
    111, 108, 117, 116, 105, 111, 110,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   0,   0,   0,   3,   0,   1,   0,
    144,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    136,   0,   0,   0,   3,   0,   1,   0,
    148,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    145,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    144,   0,   0,   0,   3,   0,   1,   0,
    156,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118, 101, 114, 115, 105, 111, 110,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 105, 109, 101, 115, 116,  97, 109,
    112,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 111, 110,  99, 101,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 105, 110,  98,  97, 115, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b889895bf2d4ecb1 = b_b889895bf2d4ecb1.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b889895bf2d4ecb1[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_b889895bf2d4ecb1[] = {4, 0, 3, 2, 1};
static const uint16_t i_b889895bf2d4ecb1[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_b889895bf2d4ecb1 = {
  0xb889895bf2d4ecb1, b_b889895bf2d4ecb1.words, 97, d_b889895bf2d4ecb1, m_b889895bf2d4ecb1,
  1, 5, i_b889895bf2d4ecb1, nullptr, nullptr, { &s_b889895bf2d4ecb1, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_fe3cdff3007f0bc2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    194,  11, 127,   0, 243, 223,  60, 254,
     33,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  66, 108, 111,  99, 107,
     84, 101, 109, 112, 108,  97, 116, 101,
     46, 115, 117,  98, 109, 105, 116,  83,
    111, 108, 117, 116, 105, 111, 110,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fe3cdff3007f0bc2 = b_fe3cdff3007f0bc2.words;
#if !CAPNP_LITE
static const uint16_t m_fe3cdff3007f0bc2[] = {0};
static const uint16_t i_fe3cdff3007f0bc2[] = {0};
const ::capnp::_::RawSchema s_fe3cdff3007f0bc2 = {
  0xfe3cdff3007f0bc2, b_fe3cdff3007f0bc2.words, 35, nullptr, m_fe3cdff3007f0bc2,
  0, 1, i_fe3cdff3007f0bc2, nullptr, nullptr, { &s_fe3cdff3007f0bc2, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<117> b_80fca083ef81a559 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     89, 165, 129, 239, 131, 160, 252, 128,
     19,   0,   0,   0,   1,   0,   3,   0,
      5, 181,  65, 106, 223,   3, 125, 199,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
     37,   0,   0,   0,  31,   0,   0,   0,
     81,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  66, 108, 111,  99, 107,
     67, 114, 101,  97, 116, 101,  79, 112,
    116, 105, 111, 110, 115,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
     94,  64, 177, 183, 121,  96, 244, 230,
      4,   0,   0,   0,   2,   0,   1,   0,
     28,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 202,   0,   0,   0,
    110, 111, 100, 101,  58,  58,  66, 108,
    111,  99, 107,  67, 114, 101,  97, 116,
    101,  79, 112, 116, 105, 111, 110, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  90,   0,   0,   0,
     73,   0,   0,   0,  31,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0, 162,   0,   0,   0,
    125,   0,   0,   0,  31,   0,   0,   0,
    164,   0,   0,   0,   3,   0,   1,   0,
    176,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    173,   0,   0,   0,  18,   1,   0,   0,
    189,   0,   0,   0,  31,   0,   0,   0,
    236,   0,   0,   0,   3,   0,   1,   0,
    248,   0,   0,   0,   2,   0,   1,   0,
    117, 115, 101,  77, 101, 109, 112, 111,
    111, 108,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    185, 219, 244,  99, 143, 136, 148, 181,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  98,   0,   0,   0,
    117, 115, 101,  95, 109, 101, 109, 112,
    111, 111, 108,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 108, 111,  99, 107,  82, 101, 115,
    101, 114, 118, 101, 100,  87, 101, 105,
    103, 104, 116,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    185, 219, 244,  99, 143, 136, 148, 181,
      4,   0,   0,   0,   2,   0,   1,   0,
     24,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 178,   0,   0,   0,
     98, 108, 111,  99, 107,  95, 114, 101,
    115, 101, 114, 118, 101, 100,  95, 119,
    101, 105, 103, 104, 116,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 105, 110,  98,  97, 115, 101,
     79, 117, 116, 112, 117, 116,  77,  97,
    120,  65, 100, 100, 105, 116, 105, 111,
    110,  97, 108,  83, 105, 103, 111, 112,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    185, 219, 244,  99, 143, 136, 148, 181,
      4,   0,   0,   0,   2,   0,   1,   0,
     32,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  50,   1,   0,   0,
     99, 111, 105, 110,  98,  97, 115, 101,
     95, 111, 117, 116, 112, 117, 116,  95,
    109,  97, 120,  95,  97, 100, 100, 105,
    116, 105, 111, 110,  97, 108,  95, 115,
    105, 103, 111, 112, 115,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_80fca083ef81a559 = b_80fca083ef81a559.words;
#if !CAPNP_LITE
static const uint16_t m_80fca083ef81a559[] = {1, 2, 0};
static const uint16_t i_80fca083ef81a559[] = {0, 1, 2};
const ::capnp::_::RawSchema s_80fca083ef81a559 = {
  0x80fca083ef81a559, b_80fca083ef81a559.words, 117, nullptr, m_80fca083ef81a559,
  0, 3, i_80fca083ef81a559, nullptr, nullptr, { &s_80fca083ef81a559, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<81> b_9f6631a52550e381 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    129, 227,  80,  37, 165,  49, 102, 159,
     19,   0,   0,   0,   1,   0,   1,   0,
      5, 181,  65, 106, 223,   3, 125, 199,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 109, 105,
    110, 105, 110, 103,  46,  99,  97, 112,
    110, 112,  58,  66, 108, 111,  99, 107,
     86,  97, 108, 105, 100,  97, 116, 105,
    111, 110,  83, 116,  97, 116, 101,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,   0,   0,   0,   3,   0,   1,   0,
    124,   0,   0,   0,   2,   0,   1,   0,
    109, 111, 100, 101,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 106, 101,  99, 116,  82, 101,
     97, 115, 111, 110,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101,  98, 117, 103,  77, 101, 115,
    115,  97, 103, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9f6631a52550e381 = b_9f6631a52550e381.words;
#if !CAPNP_LITE
static const uint16_t m_9f6631a52550e381[] = {3, 0, 2, 1};
static const uint16_t i_9f6631a52550e381[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_9f6631a52550e381 = {
  0x9f6631a52550e381, b_9f6631a52550e381.words, 81, nullptr, m_9f6631a52550e381,
  0, 4, i_9f6631a52550e381, nullptr, nullptr, { &s_9f6631a52550e381, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace ipc {
namespace capnp {
namespace messages {

#if !CAPNP_LITE
::capnp::Request< ::ipc::capnp::messages::Mining::IsTestChainParams,  ::ipc::capnp::messages::Mining::IsTestChainResults>
Mining::Client::isTestChainRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Mining::IsTestChainParams,  ::ipc::capnp::messages::Mining::IsTestChainResults>(
      0xf9c68436df3af39eull, 0, sizeHint, {true});
}
::kj::Promise<void> Mining::Server::isTestChain(IsTestChainContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/mining.capnp:Mining", "isTestChain",
      0xf9c68436df3af39eull, 0);
}
::capnp::Request< ::ipc::capnp::messages::Mining::IsInitialBlockDownloadParams,  ::ipc::capnp::messages::Mining::IsInitialBlockDownloadResults>
Mining::Client::isInitialBlockDownloadRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Mining::IsInitialBlockDownloadParams,  ::ipc::capnp::messages::Mining::IsInitialBlockDownloadResults>(
      0xf9c68436df3af39eull, 1, sizeHint, {true});
}
::kj::Promise<void> Mining::Server::isInitialBlockDownload(IsInitialBlockDownloadContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/mining.capnp:Mining", "isInitialBlockDownload",
      0xf9c68436df3af39eull, 1);
}
::capnp::Request< ::ipc::capnp::messages::Mining::GetTipParams,  ::ipc::capnp::messages::Mining::GetTipResults>
Mining::Client::getTipRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Mining::GetTipParams,  ::ipc::capnp::messages::Mining::GetTipResults>(
      0xf9c68436df3af39eull, 2, sizeHint, {true});
}
::kj::Promise<void> Mining::Server::getTip(GetTipContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/mining.capnp:Mining", "getTip",
      0xf9c68436df3af39eull, 2);
}
::capnp::Request< ::ipc::capnp::messages::Mining::WaitTipChangedParams,  ::ipc::capnp::messages::Mining::WaitTipChangedResults>
Mining::Client::waitTipChangedRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Mining::WaitTipChangedParams,  ::ipc::capnp::messages::Mining::WaitTipChangedResults>(
      0xf9c68436df3af39eull, 3, sizeHint, {true});
}
::kj::Promise<void> Mining::Server::waitTipChanged(WaitTipChangedContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/mining.capnp:Mining", "waitTipChanged",
      0xf9c68436df3af39eull, 3);
}
::capnp::Request< ::ipc::capnp::messages::Mining::CreateNewBlockParams,  ::ipc::capnp::messages::Mining::CreateNewBlockResults>
Mining::Client::createNewBlockRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Mining::CreateNewBlockParams,  ::ipc::capnp::messages::Mining::CreateNewBlockResults>(
      0xf9c68436df3af39eull, 4, sizeHint, {false});
}
::kj::Promise<void> Mining::Server::createNewBlock(CreateNewBlockContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/mining.capnp:Mining", "createNewBlock",
      0xf9c68436df3af39eull, 4);
}
::capnp::Capability::Server::DispatchCallResult Mining::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xf9c68436df3af39eull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("capnp/mining.capnp:Mining", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Mining::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        isTestChain(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Mining::IsTestChainParams,  ::ipc::capnp::messages::Mining::IsTestChainResults>(context)),
        false,
        false
      };
    case 1:
      return {
        isInitialBlockDownload(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Mining::IsInitialBlockDownloadParams,  ::ipc::capnp::messages::Mining::IsInitialBlockDownloadResults>(context)),
        false,
        false
      };
    case 2:
      return {
        getTip(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Mining::GetTipParams,  ::ipc::capnp::messages::Mining::GetTipResults>(context)),
        false,
        false
      };
    case 3:
      return {
        waitTipChanged(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Mining::WaitTipChangedParams,  ::ipc::capnp::messages::Mining::WaitTipChangedResults>(context)),
        false,
        false
      };
    case 4:
      return {
        createNewBlock(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Mining::CreateNewBlockParams,  ::ipc::capnp::messages::Mining::CreateNewBlockResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "capnp/mining.capnp:Mining",
          0xf9c68436df3af39eull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Mining
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Mining::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Mining::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Mining::IsTestChainParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Mining::IsTestChainParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Mining::IsTestChainParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Mining::IsTestChainParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Mining::IsTestChainParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Mining::IsTestChainResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Mining::IsTestChainResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Mining::IsTestChainResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Mining::IsTestChainResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Mining::IsTestChainResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Mining::IsInitialBlockDownloadParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Mining::IsInitialBlockDownloadParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Mining::IsInitialBlockDownloadParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Mining::IsInitialBlockDownloadParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Mining::IsInitialBlockDownloadParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Mining::IsInitialBlockDownloadResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Mining::IsInitialBlockDownloadResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Mining::IsInitialBlockDownloadResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Mining::IsInitialBlockDownloadResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Mining::IsInitialBlockDownloadResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Mining::GetTipParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Mining::GetTipParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Mining::GetTipParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Mining::GetTipParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Mining::GetTipParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Mining::GetTipResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Mining::GetTipResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Mining::GetTipResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Mining::GetTipResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Mining::GetTipResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Mining::WaitTipChangedParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Mining::WaitTipChangedParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Mining::WaitTipChangedParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Mining::WaitTipChangedParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Mining::WaitTipChangedParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Mining::WaitTipChangedResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Mining::WaitTipChangedResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Mining::WaitTipChangedResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Mining::WaitTipChangedResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Mining::WaitTipChangedResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Mining::CreateNewBlockParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Mining::CreateNewBlockParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Mining::CreateNewBlockParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Mining::CreateNewBlockParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Mining::CreateNewBlockParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Mining::CreateNewBlockResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Mining::CreateNewBlockResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Mining::CreateNewBlockResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Mining::CreateNewBlockResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Mining::CreateNewBlockResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::ipc::capnp::messages::BlockTemplate::DestroyParams,  ::ipc::capnp::messages::BlockTemplate::DestroyResults>
BlockTemplate::Client::destroyRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::BlockTemplate::DestroyParams,  ::ipc::capnp::messages::BlockTemplate::DestroyResults>(
      0xf9671ad841b2f622ull, 0, sizeHint, {true});
}
::kj::Promise<void> BlockTemplate::Server::destroy(DestroyContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/mining.capnp:BlockTemplate", "destroy",
      0xf9671ad841b2f622ull, 0);
}
::capnp::Request< ::ipc::capnp::messages::BlockTemplate::GetBlockHeaderParams,  ::ipc::capnp::messages::BlockTemplate::GetBlockHeaderResults>
BlockTemplate::Client::getBlockHeaderRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::BlockTemplate::GetBlockHeaderParams,  ::ipc::capnp::messages::BlockTemplate::GetBlockHeaderResults>(
      0xf9671ad841b2f622ull, 1, sizeHint, {true});
}
::kj::Promise<void> BlockTemplate::Server::getBlockHeader(GetBlockHeaderContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/mining.capnp:BlockTemplate", "getBlockHeader",
      0xf9671ad841b2f622ull, 1);
}
::capnp::Request< ::ipc::capnp::messages::BlockTemplate::GetBlockParams,  ::ipc::capnp::messages::BlockTemplate::GetBlockResults>
BlockTemplate::Client::getBlockRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::BlockTemplate::GetBlockParams,  ::ipc::capnp::messages::BlockTemplate::GetBlockResults>(
      0xf9671ad841b2f622ull, 2, sizeHint, {true});
}
::kj::Promise<void> BlockTemplate::Server::getBlock(GetBlockContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/mining.capnp:BlockTemplate", "getBlock",
      0xf9671ad841b2f622ull, 2);
}
::capnp::Request< ::ipc::capnp::messages::BlockTemplate::GetTxFeesParams,  ::ipc::capnp::messages::BlockTemplate::GetTxFeesResults>
BlockTemplate::Client::getTxFeesRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::BlockTemplate::GetTxFeesParams,  ::ipc::capnp::messages::BlockTemplate::GetTxFeesResults>(
      0xf9671ad841b2f622ull, 3, sizeHint, {true});
}
::kj::Promise<void> BlockTemplate::Server::getTxFees(GetTxFeesContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/mining.capnp:BlockTemplate", "getTxFees",
      0xf9671ad841b2f622ull, 3);
}
::capnp::Request< ::ipc::capnp::messages::BlockTemplate::GetTxSigopsParams,  ::ipc::capnp::messages::BlockTemplate::GetTxSigopsResults>
BlockTemplate::Client::getTxSigopsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::BlockTemplate::GetTxSigopsParams,  ::ipc::capnp::messages::BlockTemplate::GetTxSigopsResults>(
      0xf9671ad841b2f622ull, 4, sizeHint, {true});
}
::kj::Promise<void> BlockTemplate::Server::getTxSigops(GetTxSigopsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/mining.capnp:BlockTemplate", "getTxSigops",
      0xf9671ad841b2f622ull, 4);
}
::capnp::Request< ::ipc::capnp::messages::BlockTemplate::GetCoinbaseTxParams,  ::ipc::capnp::messages::BlockTemplate::GetCoinbaseTxResults>
BlockTemplate::Client::getCoinbaseTxRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::BlockTemplate::GetCoinbaseTxParams,  ::ipc::capnp::messages::BlockTemplate::GetCoinbaseTxResults>(
      0xf9671ad841b2f622ull, 5, sizeHint, {true});
}
::kj::Promise<void> BlockTemplate::Server::getCoinbaseTx(GetCoinbaseTxContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/mining.capnp:BlockTemplate", "getCoinbaseTx",
      0xf9671ad841b2f622ull, 5);
}
::capnp::Request< ::ipc::capnp::messages::BlockTemplate::GetCoinbaseCommitmentParams,  ::ipc::capnp::messages::BlockTemplate::GetCoinbaseCommitmentResults>
BlockTemplate::Client::getCoinbaseCommitmentRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::BlockTemplate::GetCoinbaseCommitmentParams,  ::ipc::capnp::messages::BlockTemplate::GetCoinbaseCommitmentResults>(
      0xf9671ad841b2f622ull, 6, sizeHint, {true});
}
::kj::Promise<void> BlockTemplate::Server::getCoinbaseCommitment(GetCoinbaseCommitmentContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/mining.capnp:BlockTemplate", "getCoinbaseCommitment",
      0xf9671ad841b2f622ull, 6);
}
::capnp::Request< ::ipc::capnp::messages::BlockTemplate::GetWitnessCommitmentIndexParams,  ::ipc::capnp::messages::BlockTemplate::GetWitnessCommitmentIndexResults>
BlockTemplate::Client::getWitnessCommitmentIndexRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::BlockTemplate::GetWitnessCommitmentIndexParams,  ::ipc::capnp::messages::BlockTemplate::GetWitnessCommitmentIndexResults>(
      0xf9671ad841b2f622ull, 7, sizeHint, {true});
}
::kj::Promise<void> BlockTemplate::Server::getWitnessCommitmentIndex(GetWitnessCommitmentIndexContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/mining.capnp:BlockTemplate", "getWitnessCommitmentIndex",
      0xf9671ad841b2f622ull, 7);
}
::capnp::Request< ::ipc::capnp::messages::BlockTemplate::GetCoinbaseMerklePathParams,  ::ipc::capnp::messages::BlockTemplate::GetCoinbaseMerklePathResults>
BlockTemplate::Client::getCoinbaseMerklePathRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::BlockTemplate::GetCoinbaseMerklePathParams,  ::ipc::capnp::messages::BlockTemplate::GetCoinbaseMerklePathResults>(
      0xf9671ad841b2f622ull, 8, sizeHint, {true});
}
::kj::Promise<void> BlockTemplate::Server::getCoinbaseMerklePath(GetCoinbaseMerklePathContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/mining.capnp:BlockTemplate", "getCoinbaseMerklePath",
      0xf9671ad841b2f622ull, 8);
}
::capnp::Request< ::ipc::capnp::messages::BlockTemplate::SubmitSolutionParams,  ::ipc::capnp::messages::BlockTemplate::SubmitSolutionResults>
BlockTemplate::Client::submitSolutionRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::BlockTemplate::SubmitSolutionParams,  ::ipc::capnp::messages::BlockTemplate::SubmitSolutionResults>(
      0xf9671ad841b2f622ull, 9, sizeHint, {true});
}
::kj::Promise<void> BlockTemplate::Server::submitSolution(SubmitSolutionContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/mining.capnp:BlockTemplate", "submitSolution",
      0xf9671ad841b2f622ull, 9);
}
::capnp::Capability::Server::DispatchCallResult BlockTemplate::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xf9671ad841b2f622ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("capnp/mining.capnp:BlockTemplate", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult BlockTemplate::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        destroy(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::BlockTemplate::DestroyParams,  ::ipc::capnp::messages::BlockTemplate::DestroyResults>(context)),
        false,
        false
      };
    case 1:
      return {
        getBlockHeader(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::BlockTemplate::GetBlockHeaderParams,  ::ipc::capnp::messages::BlockTemplate::GetBlockHeaderResults>(context)),
        false,
        false
      };
    case 2:
      return {
        getBlock(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::BlockTemplate::GetBlockParams,  ::ipc::capnp::messages::BlockTemplate::GetBlockResults>(context)),
        false,
        false
      };
    case 3:
      return {
        getTxFees(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::BlockTemplate::GetTxFeesParams,  ::ipc::capnp::messages::BlockTemplate::GetTxFeesResults>(context)),
        false,
        false
      };
    case 4:
      return {
        getTxSigops(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::BlockTemplate::GetTxSigopsParams,  ::ipc::capnp::messages::BlockTemplate::GetTxSigopsResults>(context)),
        false,
        false
      };
    case 5:
      return {
        getCoinbaseTx(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::BlockTemplate::GetCoinbaseTxParams,  ::ipc::capnp::messages::BlockTemplate::GetCoinbaseTxResults>(context)),
        false,
        false
      };
    case 6:
      return {
        getCoinbaseCommitment(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::BlockTemplate::GetCoinbaseCommitmentParams,  ::ipc::capnp::messages::BlockTemplate::GetCoinbaseCommitmentResults>(context)),
        false,
        false
      };
    case 7:
      return {
        getWitnessCommitmentIndex(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::BlockTemplate::GetWitnessCommitmentIndexParams,  ::ipc::capnp::messages::BlockTemplate::GetWitnessCommitmentIndexResults>(context)),
        false,
        false
      };
    case 8:
      return {
        getCoinbaseMerklePath(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::BlockTemplate::GetCoinbaseMerklePathParams,  ::ipc::capnp::messages::BlockTemplate::GetCoinbaseMerklePathResults>(context)),
        false,
        false
      };
    case 9:
      return {
        submitSolution(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::BlockTemplate::SubmitSolutionParams,  ::ipc::capnp::messages::BlockTemplate::SubmitSolutionResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "capnp/mining.capnp:BlockTemplate",
          0xf9671ad841b2f622ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// BlockTemplate
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BlockTemplate::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockTemplate::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BlockTemplate::DestroyParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BlockTemplate::DestroyParams::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockTemplate::DestroyParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BlockTemplate::DestroyParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockTemplate::DestroyParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BlockTemplate::DestroyResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BlockTemplate::DestroyResults::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockTemplate::DestroyResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BlockTemplate::DestroyResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockTemplate::DestroyResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BlockTemplate::GetBlockHeaderParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BlockTemplate::GetBlockHeaderParams::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockTemplate::GetBlockHeaderParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BlockTemplate::GetBlockHeaderParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockTemplate::GetBlockHeaderParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BlockTemplate::GetBlockHeaderResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BlockTemplate::GetBlockHeaderResults::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockTemplate::GetBlockHeaderResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BlockTemplate::GetBlockHeaderResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockTemplate::GetBlockHeaderResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BlockTemplate::GetBlockParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BlockTemplate::GetBlockParams::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockTemplate::GetBlockParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BlockTemplate::GetBlockParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockTemplate::GetBlockParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BlockTemplate::GetBlockResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BlockTemplate::GetBlockResults::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockTemplate::GetBlockResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BlockTemplate::GetBlockResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockTemplate::GetBlockResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BlockTemplate::GetTxFeesParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BlockTemplate::GetTxFeesParams::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockTemplate::GetTxFeesParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BlockTemplate::GetTxFeesParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockTemplate::GetTxFeesParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BlockTemplate::GetTxFeesResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BlockTemplate::GetTxFeesResults::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockTemplate::GetTxFeesResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BlockTemplate::GetTxFeesResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockTemplate::GetTxFeesResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BlockTemplate::GetTxSigopsParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BlockTemplate::GetTxSigopsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockTemplate::GetTxSigopsParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BlockTemplate::GetTxSigopsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockTemplate::GetTxSigopsParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BlockTemplate::GetTxSigopsResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BlockTemplate::GetTxSigopsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockTemplate::GetTxSigopsResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BlockTemplate::GetTxSigopsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockTemplate::GetTxSigopsResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BlockTemplate::GetCoinbaseTxParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BlockTemplate::GetCoinbaseTxParams::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockTemplate::GetCoinbaseTxParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BlockTemplate::GetCoinbaseTxParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockTemplate::GetCoinbaseTxParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BlockTemplate::GetCoinbaseTxResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BlockTemplate::GetCoinbaseTxResults::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockTemplate::GetCoinbaseTxResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BlockTemplate::GetCoinbaseTxResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockTemplate::GetCoinbaseTxResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BlockTemplate::GetCoinbaseCommitmentParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BlockTemplate::GetCoinbaseCommitmentParams::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockTemplate::GetCoinbaseCommitmentParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BlockTemplate::GetCoinbaseCommitmentParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockTemplate::GetCoinbaseCommitmentParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BlockTemplate::GetCoinbaseCommitmentResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BlockTemplate::GetCoinbaseCommitmentResults::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockTemplate::GetCoinbaseCommitmentResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BlockTemplate::GetCoinbaseCommitmentResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockTemplate::GetCoinbaseCommitmentResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BlockTemplate::GetWitnessCommitmentIndexParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BlockTemplate::GetWitnessCommitmentIndexParams::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockTemplate::GetWitnessCommitmentIndexParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BlockTemplate::GetWitnessCommitmentIndexParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockTemplate::GetWitnessCommitmentIndexParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BlockTemplate::GetWitnessCommitmentIndexResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BlockTemplate::GetWitnessCommitmentIndexResults::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockTemplate::GetWitnessCommitmentIndexResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BlockTemplate::GetWitnessCommitmentIndexResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockTemplate::GetWitnessCommitmentIndexResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BlockTemplate::GetCoinbaseMerklePathParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BlockTemplate::GetCoinbaseMerklePathParams::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockTemplate::GetCoinbaseMerklePathParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BlockTemplate::GetCoinbaseMerklePathParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockTemplate::GetCoinbaseMerklePathParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BlockTemplate::GetCoinbaseMerklePathResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BlockTemplate::GetCoinbaseMerklePathResults::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockTemplate::GetCoinbaseMerklePathResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BlockTemplate::GetCoinbaseMerklePathResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockTemplate::GetCoinbaseMerklePathResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BlockTemplate::SubmitSolutionParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BlockTemplate::SubmitSolutionParams::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockTemplate::SubmitSolutionParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BlockTemplate::SubmitSolutionParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockTemplate::SubmitSolutionParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BlockTemplate::SubmitSolutionResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BlockTemplate::SubmitSolutionResults::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockTemplate::SubmitSolutionResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BlockTemplate::SubmitSolutionResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockTemplate::SubmitSolutionResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BlockCreateOptions
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BlockCreateOptions::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockCreateOptions::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BlockCreateOptions::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockCreateOptions::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BlockValidationState
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BlockValidationState::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockValidationState::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BlockValidationState::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockValidationState::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace
}  // namespace

