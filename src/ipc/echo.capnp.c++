// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: echo.capnp

#include "echo.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<49> b_d36b89640dc94399 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    153,  67, 201,  13, 100, 137, 107, 211,
     17,   0,   0,   0,   3,   0,   0,   0,
    247, 145, 230,  81, 127,  79, 139, 136,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
     29,   0,   0,   0,  31,   0,   0,   0,
     69,   0,   0,   0, 135,   0,   0,   0,
    149,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 101,  99,
    104, 111,  46,  99,  97, 112, 110, 112,
     58,  69,  99, 104, 111,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
     94,  64, 177, 183, 121,  96, 244, 230,
      4,   0,   0,   0,   2,   0,   1,   0,
     24,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 138,   0,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101, 115,  58,  58,  69,  99, 104, 111,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133, 251,  93, 182,  76,  47, 111, 185,
    255, 138, 134, 141, 211, 215,  62, 180,
     49,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     14, 189,  76, 194,   6, 128, 184, 198,
     49,  19,  91, 216, 217, 191, 107, 157,
     25,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   7,   0,   0,   0,
    100, 101, 115, 116, 114, 111, 121,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    101,  99, 104, 111,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_d36b89640dc94399 = b_d36b89640dc94399.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d36b89640dc94399[] = {
  &s_9d6bbfd9d85b1331,
  &s_b43ed7d38d868aff,
  &s_b96f2f4cb65dfb85,
  &s_c6b88006c24cbd0e,
};
static const uint16_t m_d36b89640dc94399[] = {0, 1};
const ::capnp::_::RawSchema s_d36b89640dc94399 = {
  0xd36b89640dc94399, b_d36b89640dc94399.words, 49, d_d36b89640dc94399, m_d36b89640dc94399,
  4, 2, nullptr, nullptr, nullptr, { &s_d36b89640dc94399, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_b96f2f4cb65dfb85 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    133, 251,  93, 182,  76,  47, 111, 185,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 101,  99,
    104, 111,  46,  99,  97, 112, 110, 112,
     58,  69,  99, 104, 111,  46, 100, 101,
    115, 116, 114, 111, 121,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b96f2f4cb65dfb85 = b_b96f2f4cb65dfb85.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b96f2f4cb65dfb85[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_b96f2f4cb65dfb85[] = {0};
static const uint16_t i_b96f2f4cb65dfb85[] = {0};
const ::capnp::_::RawSchema s_b96f2f4cb65dfb85 = {
  0xb96f2f4cb65dfb85, b_b96f2f4cb65dfb85.words, 33, d_b96f2f4cb65dfb85, m_b96f2f4cb65dfb85,
  1, 1, i_b96f2f4cb65dfb85, nullptr, nullptr, { &s_b96f2f4cb65dfb85, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_b43ed7d38d868aff = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    255, 138, 134, 141, 211, 215,  62, 180,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 101,  99,
    104, 111,  46,  99,  97, 112, 110, 112,
     58,  69,  99, 104, 111,  46, 100, 101,
    115, 116, 114, 111, 121,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_b43ed7d38d868aff = b_b43ed7d38d868aff.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_b43ed7d38d868aff = {
  0xb43ed7d38d868aff, b_b43ed7d38d868aff.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_b43ed7d38d868aff, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<48> b_c6b88006c24cbd0e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     14, 189,  76, 194,   6, 128, 184, 198,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 101,  99,
    104, 111,  46,  99,  97, 112, 110, 112,
     58,  69,  99, 104, 111,  46, 101,  99,
    104, 111,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,  99, 104, 111,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c6b88006c24cbd0e = b_c6b88006c24cbd0e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c6b88006c24cbd0e[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_c6b88006c24cbd0e[] = {0, 1};
static const uint16_t i_c6b88006c24cbd0e[] = {0, 1};
const ::capnp::_::RawSchema s_c6b88006c24cbd0e = {
  0xc6b88006c24cbd0e, b_c6b88006c24cbd0e.words, 48, d_c6b88006c24cbd0e, m_c6b88006c24cbd0e,
  1, 2, i_c6b88006c24cbd0e, nullptr, nullptr, { &s_c6b88006c24cbd0e, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_9d6bbfd9d85b1331 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     49,  19,  91, 216, 217, 191, 107, 157,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 101,  99,
    104, 111,  46,  99,  97, 112, 110, 112,
     58,  69,  99, 104, 111,  46, 101,  99,
    104, 111,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9d6bbfd9d85b1331 = b_9d6bbfd9d85b1331.words;
#if !CAPNP_LITE
static const uint16_t m_9d6bbfd9d85b1331[] = {0};
static const uint16_t i_9d6bbfd9d85b1331[] = {0};
const ::capnp::_::RawSchema s_9d6bbfd9d85b1331 = {
  0x9d6bbfd9d85b1331, b_9d6bbfd9d85b1331.words, 33, nullptr, m_9d6bbfd9d85b1331,
  0, 1, i_9d6bbfd9d85b1331, nullptr, nullptr, { &s_9d6bbfd9d85b1331, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace ipc {
namespace capnp {
namespace messages {

#if !CAPNP_LITE
::capnp::Request< ::ipc::capnp::messages::Echo::DestroyParams,  ::ipc::capnp::messages::Echo::DestroyResults>
Echo::Client::destroyRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Echo::DestroyParams,  ::ipc::capnp::messages::Echo::DestroyResults>(
      0xd36b89640dc94399ull, 0, sizeHint, {true});
}
::kj::Promise<void> Echo::Server::destroy(DestroyContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/echo.capnp:Echo", "destroy",
      0xd36b89640dc94399ull, 0);
}
::capnp::Request< ::ipc::capnp::messages::Echo::EchoParams,  ::ipc::capnp::messages::Echo::EchoResults>
Echo::Client::echoRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Echo::EchoParams,  ::ipc::capnp::messages::Echo::EchoResults>(
      0xd36b89640dc94399ull, 1, sizeHint, {true});
}
::kj::Promise<void> Echo::Server::echo(EchoContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/echo.capnp:Echo", "echo",
      0xd36b89640dc94399ull, 1);
}
::capnp::Capability::Server::DispatchCallResult Echo::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xd36b89640dc94399ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("capnp/echo.capnp:Echo", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Echo::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        destroy(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Echo::DestroyParams,  ::ipc::capnp::messages::Echo::DestroyResults>(context)),
        false,
        false
      };
    case 1:
      return {
        echo(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Echo::EchoParams,  ::ipc::capnp::messages::Echo::EchoResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "capnp/echo.capnp:Echo",
          0xd36b89640dc94399ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Echo
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Echo::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Echo::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Echo::DestroyParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Echo::DestroyParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Echo::DestroyParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Echo::DestroyParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Echo::DestroyParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Echo::DestroyResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Echo::DestroyResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Echo::DestroyResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Echo::DestroyResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Echo::DestroyResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Echo::EchoParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Echo::EchoParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Echo::EchoParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Echo::EchoParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Echo::EchoParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Echo::EchoResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Echo::EchoResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Echo::EchoResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Echo::EchoResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Echo::EchoResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace
}  // namespace

