// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: init.capnp

#include "init.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<73> b_8838c700ba5cba65 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    101, 186,  92, 186,   0, 199,  56, 136,
     17,   0,   0,   0,   3,   0,   0,   0,
    166, 106,  64,  25, 163, 207, 197, 242,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
     29,   0,   0,   0,  31,   0,   0,   0,
     69,   0,   0,   0,   7,   1,   0,   0,
    245,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 105, 110,
    105, 116,  46,  99,  97, 112, 110, 112,
     58,  73, 110, 105, 116,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
     94,  64, 177, 183, 121,  96, 244, 230,
      4,   0,   0,   0,   2,   0,   1,   0,
     24,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 138,   0,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101, 115,  58,  58,  73, 110, 105, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    250, 112,  95, 230,  67,  79,   9, 208,
    157, 106, 133, 176, 156, 156, 245, 207,
    113,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    154, 122,  43, 241, 211, 255, 234, 209,
    199,  97, 199, 109, 229,  61, 184, 198,
     93,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     85,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     73, 106, 187, 172,  43, 161, 201, 236,
     16,  28, 234,  72,  11,  61,  11, 180,
     73,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     21, 183, 149, 166, 121, 157, 145, 240,
      9, 149,  59, 207, 223,  21,  80, 155,
     53,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
     99, 111, 110, 115, 116, 114, 117,  99,
    116,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    109,  97, 107, 101,  69,  99, 104, 111,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    109,  97, 107, 101,  77, 105, 110, 105,
    110, 103,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    109,  97, 107, 101,  67, 104,  97, 105,
    110,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_8838c700ba5cba65 = b_8838c700ba5cba65.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8838c700ba5cba65[] = {
  &s_9b5015dfcf3b9509,
  &s_b40b3d0b48ea1c10,
  &s_c6b83de56dc761c7,
  &s_cff59c9cb0856a9d,
  &s_d0094f43e65f70fa,
  &s_d1eaffd3f12b7a9a,
  &s_ecc9a12bacbb6a49,
  &s_f0919d79a695b715,
};
static const uint16_t m_8838c700ba5cba65[] = {0, 3, 1, 2};
const ::capnp::_::RawSchema s_8838c700ba5cba65 = {
  0x8838c700ba5cba65, b_8838c700ba5cba65.words, 73, d_8838c700ba5cba65, m_8838c700ba5cba65,
  8, 4, nullptr, nullptr, nullptr, { &s_8838c700ba5cba65, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_d0094f43e65f70fa = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    250, 112,  95, 230,  67,  79,   9, 208,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 105, 110,
    105, 116,  46,  99,  97, 112, 110, 112,
     58,  73, 110, 105, 116,  46,  99, 111,
    110, 115, 116, 114, 117,  99, 116,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    116, 104, 114, 101,  97, 100,  77,  97,
    112,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    157, 220, 217, 154,  23,  55,  94, 238,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d0094f43e65f70fa = b_d0094f43e65f70fa.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d0094f43e65f70fa[] = {
  &s_ee5e37179ad9dc9d,
};
static const uint16_t m_d0094f43e65f70fa[] = {0};
static const uint16_t i_d0094f43e65f70fa[] = {0};
const ::capnp::_::RawSchema s_d0094f43e65f70fa = {
  0xd0094f43e65f70fa, b_d0094f43e65f70fa.words, 34, d_d0094f43e65f70fa, m_d0094f43e65f70fa,
  1, 1, i_d0094f43e65f70fa, nullptr, nullptr, { &s_d0094f43e65f70fa, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_cff59c9cb0856a9d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    157, 106, 133, 176, 156, 156, 245, 207,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 105, 110,
    105, 116,  46,  99,  97, 112, 110, 112,
     58,  73, 110, 105, 116,  46,  99, 111,
    110, 115, 116, 114, 117,  99, 116,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    116, 104, 114, 101,  97, 100,  77,  97,
    112,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    157, 220, 217, 154,  23,  55,  94, 238,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cff59c9cb0856a9d = b_cff59c9cb0856a9d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cff59c9cb0856a9d[] = {
  &s_ee5e37179ad9dc9d,
};
static const uint16_t m_cff59c9cb0856a9d[] = {0};
static const uint16_t i_cff59c9cb0856a9d[] = {0};
const ::capnp::_::RawSchema s_cff59c9cb0856a9d = {
  0xcff59c9cb0856a9d, b_cff59c9cb0856a9d.words, 34, d_cff59c9cb0856a9d, m_cff59c9cb0856a9d,
  1, 1, i_cff59c9cb0856a9d, nullptr, nullptr, { &s_cff59c9cb0856a9d, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_d1eaffd3f12b7a9a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    154, 122,  43, 241, 211, 255, 234, 209,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 105, 110,
    105, 116,  46,  99,  97, 112, 110, 112,
     58,  73, 110, 105, 116,  46, 109,  97,
    107, 101,  69,  99, 104, 111,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d1eaffd3f12b7a9a = b_d1eaffd3f12b7a9a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d1eaffd3f12b7a9a[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_d1eaffd3f12b7a9a[] = {0};
static const uint16_t i_d1eaffd3f12b7a9a[] = {0};
const ::capnp::_::RawSchema s_d1eaffd3f12b7a9a = {
  0xd1eaffd3f12b7a9a, b_d1eaffd3f12b7a9a.words, 33, d_d1eaffd3f12b7a9a, m_d1eaffd3f12b7a9a,
  1, 1, i_d1eaffd3f12b7a9a, nullptr, nullptr, { &s_d1eaffd3f12b7a9a, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_c6b83de56dc761c7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    199,  97, 199, 109, 229,  61, 184, 198,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 105, 110,
    105, 116,  46,  99,  97, 112, 110, 112,
     58,  73, 110, 105, 116,  46, 109,  97,
    107, 101,  69,  99, 104, 111,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    153,  67, 201,  13, 100, 137, 107, 211,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c6b83de56dc761c7 = b_c6b83de56dc761c7.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c6b83de56dc761c7[] = {
  &s_d36b89640dc94399,
};
static const uint16_t m_c6b83de56dc761c7[] = {0};
static const uint16_t i_c6b83de56dc761c7[] = {0};
const ::capnp::_::RawSchema s_c6b83de56dc761c7 = {
  0xc6b83de56dc761c7, b_c6b83de56dc761c7.words, 33, d_c6b83de56dc761c7, m_c6b83de56dc761c7,
  1, 1, i_c6b83de56dc761c7, nullptr, nullptr, { &s_c6b83de56dc761c7, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_ecc9a12bacbb6a49 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     73, 106, 187, 172,  43, 161, 201, 236,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 105, 110,
    105, 116,  46,  99,  97, 112, 110, 112,
     58,  73, 110, 105, 116,  46, 109,  97,
    107, 101,  77, 105, 110, 105, 110, 103,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ecc9a12bacbb6a49 = b_ecc9a12bacbb6a49.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ecc9a12bacbb6a49[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_ecc9a12bacbb6a49[] = {0};
static const uint16_t i_ecc9a12bacbb6a49[] = {0};
const ::capnp::_::RawSchema s_ecc9a12bacbb6a49 = {
  0xecc9a12bacbb6a49, b_ecc9a12bacbb6a49.words, 33, d_ecc9a12bacbb6a49, m_ecc9a12bacbb6a49,
  1, 1, i_ecc9a12bacbb6a49, nullptr, nullptr, { &s_ecc9a12bacbb6a49, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_b40b3d0b48ea1c10 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     16,  28, 234,  72,  11,  61,  11, 180,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 105, 110,
    105, 116,  46,  99,  97, 112, 110, 112,
     58,  73, 110, 105, 116,  46, 109,  97,
    107, 101,  77, 105, 110, 105, 110, 103,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    158, 243,  58, 223,  54, 132, 198, 249,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b40b3d0b48ea1c10 = b_b40b3d0b48ea1c10.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b40b3d0b48ea1c10[] = {
  &s_f9c68436df3af39e,
};
static const uint16_t m_b40b3d0b48ea1c10[] = {0};
static const uint16_t i_b40b3d0b48ea1c10[] = {0};
const ::capnp::_::RawSchema s_b40b3d0b48ea1c10 = {
  0xb40b3d0b48ea1c10, b_b40b3d0b48ea1c10.words, 34, d_b40b3d0b48ea1c10, m_b40b3d0b48ea1c10,
  1, 1, i_b40b3d0b48ea1c10, nullptr, nullptr, { &s_b40b3d0b48ea1c10, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_f0919d79a695b715 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     21, 183, 149, 166, 121, 157, 145, 240,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 105, 110,
    105, 116,  46,  99,  97, 112, 110, 112,
     58,  73, 110, 105, 116,  46, 109,  97,
    107, 101,  67, 104,  97, 105, 110,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  34,  11,  93, 100, 230,  68, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f0919d79a695b715 = b_f0919d79a695b715.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f0919d79a695b715[] = {
  &s_9c44e6645d0b22c6,
};
static const uint16_t m_f0919d79a695b715[] = {0};
static const uint16_t i_f0919d79a695b715[] = {0};
const ::capnp::_::RawSchema s_f0919d79a695b715 = {
  0xf0919d79a695b715, b_f0919d79a695b715.words, 33, d_f0919d79a695b715, m_f0919d79a695b715,
  1, 1, i_f0919d79a695b715, nullptr, nullptr, { &s_f0919d79a695b715, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_9b5015dfcf3b9509 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      9, 149,  59, 207, 223,  21,  80, 155,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 105, 110,
    105, 116,  46,  99,  97, 112, 110, 112,
     58,  73, 110, 105, 116,  46, 109,  97,
    107, 101,  67, 104,  97, 105, 110,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    179,  20,  68, 194,  84,  29, 251, 221,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9b5015dfcf3b9509 = b_9b5015dfcf3b9509.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9b5015dfcf3b9509[] = {
  &s_ddfb1d54c24414b3,
};
static const uint16_t m_9b5015dfcf3b9509[] = {0};
static const uint16_t i_9b5015dfcf3b9509[] = {0};
const ::capnp::_::RawSchema s_9b5015dfcf3b9509 = {
  0x9b5015dfcf3b9509, b_9b5015dfcf3b9509.words, 33, d_9b5015dfcf3b9509, m_9b5015dfcf3b9509,
  1, 1, i_9b5015dfcf3b9509, nullptr, nullptr, { &s_9b5015dfcf3b9509, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace ipc {
namespace capnp {
namespace messages {

#if !CAPNP_LITE
::capnp::Request< ::ipc::capnp::messages::Init::ConstructParams,  ::ipc::capnp::messages::Init::ConstructResults>
Init::Client::constructRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Init::ConstructParams,  ::ipc::capnp::messages::Init::ConstructResults>(
      0x8838c700ba5cba65ull, 0, sizeHint, {false});
}
::kj::Promise<void> Init::Server::construct(ConstructContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/init.capnp:Init", "construct",
      0x8838c700ba5cba65ull, 0);
}
::capnp::Request< ::ipc::capnp::messages::Init::MakeEchoParams,  ::ipc::capnp::messages::Init::MakeEchoResults>
Init::Client::makeEchoRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Init::MakeEchoParams,  ::ipc::capnp::messages::Init::MakeEchoResults>(
      0x8838c700ba5cba65ull, 1, sizeHint, {false});
}
::kj::Promise<void> Init::Server::makeEcho(MakeEchoContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/init.capnp:Init", "makeEcho",
      0x8838c700ba5cba65ull, 1);
}
::capnp::Request< ::ipc::capnp::messages::Init::MakeMiningParams,  ::ipc::capnp::messages::Init::MakeMiningResults>
Init::Client::makeMiningRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Init::MakeMiningParams,  ::ipc::capnp::messages::Init::MakeMiningResults>(
      0x8838c700ba5cba65ull, 2, sizeHint, {false});
}
::kj::Promise<void> Init::Server::makeMining(MakeMiningContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/init.capnp:Init", "makeMining",
      0x8838c700ba5cba65ull, 2);
}
::capnp::Request< ::ipc::capnp::messages::Init::MakeChainParams,  ::ipc::capnp::messages::Init::MakeChainResults>
Init::Client::makeChainRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::ipc::capnp::messages::Init::MakeChainParams,  ::ipc::capnp::messages::Init::MakeChainResults>(
      0x8838c700ba5cba65ull, 3, sizeHint, {false});
}
::kj::Promise<void> Init::Server::makeChain(MakeChainContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/init.capnp:Init", "makeChain",
      0x8838c700ba5cba65ull, 3);
}
::capnp::Capability::Server::DispatchCallResult Init::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x8838c700ba5cba65ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("capnp/init.capnp:Init", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Init::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        construct(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Init::ConstructParams,  ::ipc::capnp::messages::Init::ConstructResults>(context)),
        false,
        false
      };
    case 1:
      return {
        makeEcho(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Init::MakeEchoParams,  ::ipc::capnp::messages::Init::MakeEchoResults>(context)),
        false,
        false
      };
    case 2:
      return {
        makeMining(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Init::MakeMiningParams,  ::ipc::capnp::messages::Init::MakeMiningResults>(context)),
        false,
        false
      };
    case 3:
      return {
        makeChain(::capnp::Capability::Server::internalGetTypedContext<
             ::ipc::capnp::messages::Init::MakeChainParams,  ::ipc::capnp::messages::Init::MakeChainResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "capnp/init.capnp:Init",
          0x8838c700ba5cba65ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Init
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Init::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Init::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Init::ConstructParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Init::ConstructParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Init::ConstructParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Init::ConstructParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Init::ConstructParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Init::ConstructResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Init::ConstructResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Init::ConstructResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Init::ConstructResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Init::ConstructResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Init::MakeEchoParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Init::MakeEchoParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Init::MakeEchoParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Init::MakeEchoParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Init::MakeEchoParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Init::MakeEchoResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Init::MakeEchoResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Init::MakeEchoResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Init::MakeEchoResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Init::MakeEchoResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Init::MakeMiningParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Init::MakeMiningParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Init::MakeMiningParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Init::MakeMiningParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Init::MakeMiningParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Init::MakeMiningResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Init::MakeMiningResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Init::MakeMiningResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Init::MakeMiningResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Init::MakeMiningResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Init::MakeChainParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Init::MakeChainParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Init::MakeChainParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Init::MakeChainParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Init::MakeChainParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Init::MakeChainResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Init::MakeChainResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Init::MakeChainResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Init::MakeChainResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Init::MakeChainResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace
}  // namespace

